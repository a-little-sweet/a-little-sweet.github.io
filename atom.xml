<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奈落のBlog</title>
  
  <subtitle>be yourself, be bette</subtitle>
  <link href="https://a-little-sweet.github.io/atom.xml" rel="self"/>
  
  <link href="https://a-little-sweet.github.io/"/>
  <updated>2023-04-03T13:13:12.525Z</updated>
  <id>https://a-little-sweet.github.io/</id>
  
  <author>
    <name>saber</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>书籍推荐</title>
    <link href="https://a-little-sweet.github.io/posts/82cb469d.html"/>
    <id>https://a-little-sweet.github.io/posts/82cb469d.html</id>
    <published>2023-04-03T12:26:33.354Z</published>
    <updated>2023-04-03T13:13:12.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="好书推荐"><a href="#好书推荐" class="headerlink" title="好书推荐"></a>好书推荐</h3><blockquote><p>2023.4 .2</p></blockquote><p><a href="https://www.zhihu.com/question/25563234">https://www.zhihu.com/question/25563234</a>  万万没想到：用理工科思维理解世界》</p><h3 id="读书的建议"><a href="#读书的建议" class="headerlink" title="读书的建议"></a>读书的建议</h3><p><a href="http://mindhacks.cn/2008/09/17/learning-habits-part3">http://mindhacks.cn/2008/09/17/learning-habits-part3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;好书推荐&quot;&gt;&lt;a href=&quot;#好书推荐&quot; class=&quot;headerlink&quot; title=&quot;好书推荐&quot;&gt;&lt;/a&gt;好书推荐&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;2023.4 .2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://w</summary>
      
    
    
    
    
    <category term="学习栈" scheme="https://a-little-sweet.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>阅读方法</title>
    <link href="https://a-little-sweet.github.io/posts/123fd56.html"/>
    <id>https://a-little-sweet.github.io/posts/123fd56.html</id>
    <published>2023-04-03T12:26:14.337Z</published>
    <updated>2023-04-03T13:13:12.514Z</updated>
    
    <content type="html"><![CDATA[<ol><li><strong>趁着对一件事情有热情的时候，一股脑儿把万事开头那个最难的阶段熬过去</strong>。万事开头难，因为从不了解到了解基本的一些事实，是一个新知识暴涨的阶段，这个时候的困难是最大的。有人熬不过去，觉得困难太大就放弃了。不过，狂热的兴趣可以抵消对困难的感觉，所以趁着对一件事情有热情的时候，开一个好头是很重要的。（当然，这并不是说持之以恒就不重要了）。当然，也许这个是因人而异的，对我来说我会在对一件事情有浓厚兴趣的时候非常专注地学习，把很多 groundworks 做掉。后面就会顺利一些了。</li><li><strong>根据主题来查阅资料，而不是根据资料来查阅主题</strong>。以前读书的时候是一本一本的读，眼里看到的是一本一本的书，现在则是一章、甚至一节一节的读，眼中看到的不是一本一本的书，而是一堆一堆的章节，一个一个的知识主题，按照主题来阅读，你会发现读的时候不再是老老实实地一本书看完看另一本，而是非常频繁地从一本书跳到另一本书，从一处资料跳到另一处资料，从而来获得多个不同的人对同一个主题是如何讲解的。比如最近我发现在看蒙特卡罗算法时就查了十来处资料，其中有三四篇 paper 和六七本书；这是因为即便是经典的书，你也不能指望它对其中每一个主题的介绍都是尽善尽美的，有些书对某个主题（知识点）的介绍比较到位，有些书则对另一些知识点介绍得比较到位。而有时候一篇紧凑的 paper 比一本书上讲得还要好。我硬盘里面的书按主题分类，每个主题下面都有一堆书，当我需要学习某个主题的知识时（譬如贝叶斯学习或者神经网络），我会把里面涉及这个主题的书都翻开来，索引到相关章节，然后挑讲得好的看。那么，如何判断一个资料是好资料还是坏资料呢？</li><li><strong>好资料，坏资料</strong>。好资料的特点：从问题出发；重点介绍方法背后的理念（ rationale ），注重直观解释，而不是方法的技术细节；按照方法被发明的时间流程来介绍（先是遇到了什么什么问题，然后怎样分析，推理，最后发现目前所使用的方法）。坏资料的特点是好资料的反面：上来就讲方法细节，仿佛某方法是从天上掉下来的，他们往往这样写“我们定义… 我们称… 我们进行以下几个步骤… ”。根本不讲为什么要用这个方法，人们最初是因为面对什么问题才想到这个方法的，其间又是怎样才想出了这么个方法的，方法背后的直观思想又是什么。实际上一个方法如果将其最终最简洁的形式直接表达出来往往丢失掉了绝大多数信息，这个丢掉的信息就是问题解决背后的思维过程。至于为什么大多数书做不到这一点，我在<a href="http://blog.csdn.net/pongba/archive/2008/07/07/2622713.aspx">这里</a>试着分析过。</li><li><strong>学习一个东西之前，首先在大脑中积累充分的“疑惑感”</strong>。即弄清面临的问题到底是什么，在浏览方法本身之前，最好先使劲问问自己能想到什么方法。一个公认的事实是，你对问题的疑惑越大，在之前做的自己的思考越多，当看到解答之后印象就越深刻。记得大学里面的课本总是瀑布式地把整个知识结构一览无余地放在面前，读的过程倒是挺爽，连连点头，读完了很快又忘掉了，为什么？因为没有带着疑问去学习。</li><li><strong>有选择地阅读</strong>。很多人觉得我读书速度很快，其实我只是有选择地阅读。这里的选择体现在两个地方，一是选择一本书中感兴趣的章节优先阅读。二是对一本书中技术性较弱或信息密度较低的部分快速地略读。一般来说，除了技术性非常强的书之外，大多数书的信息密度很低，有很多废话。一般来说在阅读的时候应该这样来切分内容：1. 问题是什么？2. 方案是什么？3. 例子是什么？如果是需要解释一个现象的（譬如《黑天鹅》），那么1. 现象是什么？2. 解释是什么？3. 支撑这个解释的理由是什么？4. 例子是什么？一般来说，这一二三四用不了多少字就可以写完了（如果假设只举一到两个精到的例子的话），这样的无废话著作的典型是《合作的进化》；那为什么有些书，明明核心观点就那点东西（顶多加上几个精要的例子罢了）却写得长得要命呢？因为人的思维都有一个“联想”的特点，写着写着就容易旁逸斜出，而且作者自己也往往觉得引申出去挺牛逼，有时候很多与主题无关的废话就掺和进来了；那么，阅读的时候就应该有选择性地滤掉这些不相干的废话；此外还有一种可能性就是大量冗余的例子。一般来说组织得比较好的书会有详细且一目了然的目录和索引，根据目录首先就可以滤掉一部分（比如某个子章节的内容你以前是看过的），然后有时候作者还会举很多冗余的例子，如果你已经觉得印象够深刻了这些例子完全可以不看（一些书就非常厚道地对每个观点只辅以一两个最最经典的例子，譬如《与众不同的心理学——如何正视心理学》，这样的书我最是喜欢）。</li><li><strong>为什么看不懂</strong>？如果看不懂一个知识，一般有如下几个可能的原因：1. 你看得不够使劲。对此古人总结过——书读百遍其义自现。虽然这个规律不是任何时候都成立的，但是从认知科学的角度看是完全可以解释的，我们在阅读的时候，注意力往往会有选择性地关注其中的某一些“点”，而忽略了另一些“点”，于是一遍看下来可能因为某一些忽略导致无法理解整体。或者干脆看的时候就没注意其中一些细节但重要的东西。此外，大脑理解一个东西需要一定的处理时间，人脑的处理速度很慢，神经冲动每秒传输速度不过百米，所以不能指望看到哪懂到哪。最后，我们可能因为思维定势的原因会从某个特定的角度去看一句话而忽略了从不同角度去理解的可能性。对于这类情况，仔仔细细地再多读两遍，多试着去理解两遍，往往会“哦！原来这样。”地恍然大悟。2. 其中涉及到了你不懂的概念。这是技术性的不理解。这种情况就需要 Cross Reference 。如果一句话中用到了你不懂的概念，那就去查，现在很多书都是电子书，直接搜索一下，或者，对于纸书，看一下书后面的索引就行了。奇怪的是很多人看不懂也不分析一下为什么不懂，就直接放弃了。正如解决问题一样，问题卡住解决不了，第一时间要做的就是分析到底为什么解决不了，而不是直接求救。3. 作者讲述的顺序不对，你接着往下看，也许看到后面就明白了前面的了。</li></ol><p><strong>杂项</strong></p><ol><li><p><strong>如何在阅读之前就能获得对一本书质量的大致评估</strong>。在深入阅读之前能够迅速评估一本书的质量可以节省很多时间。基本上有几个线索：1. 看作者。牛作者写的书一般都不错。2. 看目录和简介。一份好的目录和简介能够透露这本书质量的相当一部分信息。目录结构是否清晰，是否直白（而不是装神弄鬼），都是衡量的线索。3. 看 Amazon 上的评价，这里要注意的是，除了看整体打分之外，更要看打分最低的人是怎么说的，因为小众意见往往有可能来自那些真正懂行的人（除了来踢馆的），如果在打分最低的意见里面看不到真正有价值的反驳意见的话就相当肯定书是不错的了。4. 看样章。Amazon 上一般都可以随机浏览一些章节的，表达是否清晰，论证是否严谨，内容是否深刻，基本是几页纸就能看出来的。</p></li><li><p><strong>如何搜寻到好书</strong>。几个线索：1. 同作者的著作。2. Amazon 相关推荐和主题相关的书列（类似豆瓣的豆列）。3. 一本好的著作（或一份好的资料——不管是书还是网页）在参考资料里面重点提到的其他著作。4. 有时对于一个主题，可以搜索到好心人总结的参考资源导引，那是最好不过的。</p></li></ol><p>titls: 万事开头难，以至于万事难开头，可当你开头了，万事也就不难了。兴趣是最好的导师，专注力是最好的动力，有了这些，妈妈再也不用担心我的学习。好读书，读好书，并不是所有的书都是好书，并不是所有的好书都是好的，真正好的只是其中的精华。要学会把书读薄，然后再把书读厚。做什么事情都一样，要掌握方法。方法对了，世界就对了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;趁着对一件事情有热情的时候，一股脑儿把万事开头那个最难的阶段熬过去&lt;/strong&gt;。万事开头难，因为从不了解到了解基本的一些事实，是一个新知识暴涨的阶段，这个时候的困难是最大的。有人熬不过去，觉得困难太大就放弃了。不过，狂热的兴趣可以抵消对困难</summary>
      
    
    
    
    
    <category term="学习栈" scheme="https://a-little-sweet.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>RSS源</title>
    <link href="https://a-little-sweet.github.io/posts/15c5646c.html"/>
    <id>https://a-little-sweet.github.io/posts/15c5646c.html</id>
    <published>2023-04-03T12:26:09.654Z</published>
    <updated>2023-04-03T13:13:12.498Z</updated>
    
    <content type="html"><![CDATA[<p>工具不用始终是工具，将目光聚集在内容才是最重要的。订阅RSS源前，建议点开博客链接，浏览最新的三篇文章，看到自己喜欢的再订阅，以免造成无用的信息堆积。</p><h3 id="写文有深度的博客"><a href="#写文有深度的博客" class="headerlink" title="写文有深度的博客"></a>写文有深度的博客</h3><hr><p>好博客发源地： </p><ul><li>财新 <a href="https://blog.caixin.com/">https://blog.caixin.com/</a></li><li>新浪博客 <a href="https://blog.sina.com.cn/">https://blog.sina.com.cn/</a></li></ul><ol><li><a href="http://www.huangjiwei.com/blog/">http://www.huangjiwei.com/blog/</a> 孤岛客</li><li><a href="http://www.zreading.cn/">http://www.zreading.cn/</a>  左岸读书</li><li><a href="https://fangbolin.blog.caixin.com/">https://fangbolin.blog.caixin.com/</a>  南桥先生<blockquote><p>安徽桐城人，现居美国，在美国高校从事课程设计工作，业余从事文学翻译，曾译有《河湾》、《一个唯美主义者的遗言》 、《老谋深算》、《万灵节》、《布鲁克林有棵树》、《两个世界之间：赛珍珠传》、《另类的英雄：萨特传》 、《地之国》</p></blockquote></li><li><a href="https://wangpei.net/">https://wangpei.net/</a> 白版报  </li><li><a href="https://blog.sina.com.cn/u/1408084550">https://blog.sina.com.cn/u/1408084550</a>   萧秋水的博客</li><li><a href="https://www.yangzhiping.com/">https://www.yangzhiping.com/</a> 阳志平的网志</li><li><a href="https://www.changhai.org/index.php">https://www.changhai.org/index.php</a> 卢仓海的博客</li><li><a href="https://blog.sina.com.cn/u/1228571733">https://blog.sina.com.cn/u/1228571733</a> 人月神话的BLOG</li><li><a href="https://headsalon.org/">https://headsalon.org/</a>  海德沙龙</li><li><a href="https://www.cnfeat.com/">https://www.cnfeat.com/</a>  陈素封</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><hr><ol><li>安卓pc推荐 inoreader，Feeder(限制订阅150个源，可付费升级)</li><li>配合RSShub谷歌插件和Tampermonkey中的RSS+脚本使用更佳</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;工具不用始终是工具，将目光聚集在内容才是最重要的。订阅RSS源前，建议点开博客链接，浏览最新的三篇文章，看到自己喜欢的再订阅，以免造成无用的信息堆积。&lt;/p&gt;
&lt;h3 id=&quot;写文有深度的博客&quot;&gt;&lt;a href=&quot;#写文有深度的博客&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="学习栈" scheme="https://a-little-sweet.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a-little-sweet.github.io/posts/0.html"/>
    <id>https://a-little-sweet.github.io/posts/0.html</id>
    <published>2023-04-03T12:26:04.904Z</published>
    <updated>2023-04-03T13:13:12.466Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: 如何整理巩固零碎的知识<br>tags: 学习栈<br>keywords: 学习栈<br>cover: ‘<a href="https://www.dmoe.cc/random.php">https://www.dmoe.cc/random.php</a>‘</p><hr><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><blockquote><p>你可以在方法论和模式的指导下创造出更多的行走路线，你要做的是根据自己的技能特点和面临的场景，选择最适合自己的学习路线。</p><p>学习也一样，构建自己的知识体系，要知道自己需要学习什么，圈定自己的学习内容，再有计划的向周边拓展，有效的分配自己的学习时间，明确自己的学习方式。”</p></blockquote><h2 id="为什么要学习知识管理"><a href="#为什么要学习知识管理" class="headerlink" title="为什么要学习知识管理"></a>为什么要学习知识管理</h2><hr><blockquote><p>“德鲁克说过，没有人为你负责，除了你自己，而你唯一的资本就是知识。</p></blockquote><p>学知识是一个很漫长的积累过程，幸好的是，我学会了知识管理，并获益良多，我视之为我人生中最重要的技能，而PKM的最终目标仍然是提升自我的核心竞争力，体现知识创造价值，”在我们平时的问题管理，工作，技术研究，学习，时间管理等各个方面都无处不体现知识管理的影子。</p><p>说到底，知识管理就是用于创造价值，并不是所有知识都能够创造价值，但是知识不做管理，想用的时候就找不出来，那学来有何用。<br>个人知识管理帮助你作好归纳和总结，但还无法上升到一个更高的高度．当有了这些量的积累后才谈得上质变，质变的结果就是我们经常需要的创新思维和系统观．</p><h2 id="什么是知识管理"><a href="#什么是知识管理" class="headerlink" title="什么是知识管理"></a>什么是知识管理</h2><hr><blockquote><p>个人知识管理，又名PKM（Personal Knowledge Management）, 是一种个人收集，验证，存储，搜索，提取消化吸收，分享知识，创造的过程。</p></blockquote><h3 id="PKM与PIM的关系"><a href="#PKM与PIM的关系" class="headerlink" title="PKM与PIM的关系"></a>PKM与PIM的关系</h3><hr><p>PIM只采用了个人知识管理过程中收集，存储，搜索的过程。 可以这样说，PIM只是PKM的子集，而这些知识并没有像化学药剂一样产生连锁反应，所以其对收集者带来的帮助也不是特别明显了。而PKM会对知识进行提炼，它是信息的精华部分，是经过归纳总结得来的。</p><h2 id="知识管理带来的好处"><a href="#知识管理带来的好处" class="headerlink" title="知识管理带来的好处"></a>知识管理带来的好处</h2><p>个人品牌最大受益者<br>内在品德修养比外在形象更重要<br>持续学习和终身学习<br>提高个人核心竞争力<br>你需要站在巨人的肩膀上，这样才能够走得更远，看得更高.Google不是让你不思考，而是让你从重复的无价值的活动中解脱出来．真正将思维用在有价值的事情上．</p><h2 id="如何建立学习知识管理"><a href="#如何建立学习知识管理" class="headerlink" title="如何建立学习知识管理"></a>如何建立学习知识管理</h2><hr><blockquote><ol><li>从资料收集开始形成个人知识库</li><li>是根据自我的目标形成知识地图</li><li>是从知识到技能到方法论和模式不断的进行转换和升华。</li></ol></blockquote><p>四个过程</p><ol><li>收集（保存、记录）知识</li><li>吸收（优化，萃取）知识</li><li>实践操作、应用知识、创造价值</li><li>分享知识、研究探讨。</li></ol><h3 id="1、收集（保存、记录）"><a href="#1、收集（保存、记录）" class="headerlink" title="1、收集（保存、记录）"></a>1、收集（保存、记录）</h3><hr><blockquote><p>不同的学习路径，不同的资源方式</p></blockquote><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><ul><li>[[1.1 RSS源]]或者高价值博客推荐：<strong>Inoreader</strong>、<strong>Feedly</strong>、NewsBlur、Feedbin ， win（irreader）</li><li>简书</li><li>小红书</li><li>掘金</li><li>github</li><li>ChatGPT</li><li>微博</li><li>知乎</li><li>b站</li><li>中国慕课</li><li>搜素引擎</li><li>豆瓣读书</li><li>[[1.4书籍]]</li><li>交谈或者培训课程（与君一席话，胜读十年书。身边的师傅、朋友、同学，甚至领导都会给到很好的意见和启发。交谈或者培训课程,可以将这些记录下来，不断实践。）</li></ul><h4 id="网页知识收集工具"><a href="#网页知识收集工具" class="headerlink" title="网页知识收集工具"></a>网页知识收集工具</h4><p>「印象笔记·剪藏」 +印象笔记·悦读  插件。</p><h4 id="知识储存工具"><a href="#知识储存工具" class="headerlink" title="知识储存工具"></a>知识储存工具</h4><h5 id="服务商存储"><a href="#服务商存储" class="headerlink" title="服务商存储"></a>服务商存储</h5><p> 印象笔记+有道云笔记这个搭配是基于手机端的，原因很简单：我不能在手机上装两个印象笔记，同时我不希望所有信息都在印象笔记中。所以，我采取了双线操作：如果要看文章，直接看印象笔记，如果需要记录思考，开有道云笔记。</p><p>三人行必有我师。保持有一颗求知的心</p><h5 id="自建NAS存储"><a href="#自建NAS存储" class="headerlink" title="自建NAS存储"></a>自建NAS存储</h5><p>参考博客<br><a href="https://zhuanlan.zhihu.com/p/20611079">https://zhuanlan.zhihu.com/p/20611079</a>  入手12T-四盘位RMB 5500左右</p><h3 id="2、吸收（优化，萃取）知识"><a href="#2、吸收（优化，萃取）知识" class="headerlink" title="2、吸收（优化，萃取）知识"></a>2、吸收（优化，萃取）知识</h3><blockquote><p>鉴定知识的正确性和有效性的能力并不是每个人都拥有的，不过，我们很幸运，这种能力是可以培养的。学习[[1.3 批判性思维]]CriticalThinking相关知识可以帮助我们加深对这方面的理解。</p></blockquote><p><em>学习和整合资料的过程就是要进一步把资料读少，在读和学的过程中不断的剔除掉垃圾和无价值的资料。</em></p><font  size= 5>第一步是资料的管理 ，第二步是对资料的泛读排优先级 ，第三步定计划和学习方向</font><h4 id="学习资料推荐"><a href="#学习资料推荐" class="headerlink" title="学习资料推荐"></a>学习资料推荐</h4><p>何为高段位的学习者？——《怎样成为高段位的学习者？》的求知索引<br><a href="https://www.jianshu.com/p/191f5c3e8e11">https://www.jianshu.com/p/191f5c3e8e11</a></p><p>知识的结构与解码—《怎样成为高段位的学习者？》的求知索引<br><a href="https://www.jianshu.com/p/75b38a80ca67">https://www.jianshu.com/p/75b38a80ca67</a></p><p>为什么练习在学习中那么重要？ ——《怎样成为高段位的学习者？》的求知索引<br><a href="https://www.jianshu.com/p/1cd20f560085">https://www.jianshu.com/p/1cd20f560085</a></p><p> 怎么打通知识的任督二脉？ ——《怎样成为高段位的学习者？》的求知索引（完）<br><a href="https://www.jianshu.com/p/42efae9d9150">https://www.jianshu.com/p/42efae9d9150</a></p><p>我学习思维导图的过程（1）<br><a href="https://www.jianshu.com/p/2dfbe6874de5">https://www.jianshu.com/p/2dfbe6874de5</a></p><p>我学习思维导图的过程（2）<br><a href="https://www.jianshu.com/p/fdb6eb5c513b">https://www.jianshu.com/p/fdb6eb5c513b</a></p><p>我学习思维导图的过程（3）<br><a href="https://www.jianshu.com/p/8c2c4c5832ca">https://www.jianshu.com/p/8c2c4c5832ca</a></p><p>我学习思维导图的过程（4）<br><a href="https://www.jianshu.com/p/82cdefd7e28d">https://www.jianshu.com/p/82cdefd7e28d</a></p><h3 id="3、实践-amp-应用-amp-创造知识"><a href="#3、实践-amp-应用-amp-创造知识" class="headerlink" title="3、实践&amp;应用&amp;创造知识"></a>3、实践&amp;应用&amp;创造知识</h3><blockquote><p>任何知识管理工具和系统，如果走不到第三个层次则始终是停留在使用阶段，而无法真正过渡到创造阶段 , (那么就达不到我们学习的目的）。后面要做的就是通过自我知识的学习形成相关的经验，大家通过知识平台的讨论和固化，将我们的经验积累为相关的方法论和模式。方法论会告诉我们遇到河流你需要通过桥过去，搭桥过去，或者说学习游泳技能过去；遇到山你可以爬过去，打个隧道过去，也可以绕过去。你可以根据你自己的情况选择相关的方法。所以有了这些大家共同积累下来的方法论和模式，再给你一张地图的时候，你不一定安装常规的学习路线走，你可以在方法论和模式的指导下创造出更多的行走路线，你要做的是根据自己的技能特点和面临的场景，选择最适合自己的学习路线。</p></blockquote><h4 id="完善知识结构"><a href="#完善知识结构" class="headerlink" title="完善知识结构"></a>完善知识结构</h4><blockquote><p>就是先找到你最关心的专业和方向，根据这些专业方向完善自我的知识结构和知识地图，然后在日后的工作和实践过程中不断去对知识结构的细节进行完善。</p></blockquote><h4 id="分享消化知识平台"><a href="#分享消化知识平台" class="headerlink" title="分享消化知识平台"></a>分享消化知识平台</h4><blockquote><p>分享知识不只是分享，也完善了你的知识。</p></blockquote><p>1、公众账号；<br>2、简书（重要的是支持Markdown）；<br>3、知乎专栏；<br>4、十五言；<br>5、博客（独立博客）；<br>6、PDF，最好的文件发布格式；<br>7、微博<br>8、朋友圈</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p>加油站的产品观<br><a href="http://jianshu.io/p/e2bfc6171595">http://jianshu.io/p/e2bfc6171595</a></p><p>写一份老板满意的申请<br><a href="http://jianshu.io/p/dda2127ee973">http://jianshu.io/p/dda2127ee973</a></p><p> 基础只靠一样东西：练——浅谈学习和写作<br><a href="http://jianshu.io/p/7bdd7f5ae92d">http://jianshu.io/p/7bdd7f5ae92d</a></p><p>如何在Quora上学英语<br><a href="https://www.jianshu.com/p/a899c510eccb">https://www.jianshu.com/p/a899c510eccb</a></p><p> 餐饮服务应该这么做<br><a href="https://www.jianshu.com/p/e40c37d42ba0">https://www.jianshu.com/p/e40c37d42ba0</a></p><p>餐饮服务应该这么做（二）<br><a href="https://www.jianshu.com/p/4a8e0a49c06e">https://www.jianshu.com/p/4a8e0a49c06e</a></p><p>餐饮服务应该这么做（三）<br><a href="https://www.jianshu.com/p/dc85dad36b44">https://www.jianshu.com/p/dc85dad36b44</a></p><h3 id="心得分享"><a href="#心得分享" class="headerlink" title="心得分享"></a>心得分享</h3><ol><li>每周选一天（比如星期日）只看收集的东西，而不再阅读新的东西</li><li>只收集不看是收集知识的大忌，因为知识永远比你收藏的多，你24小时收集，也一生都收集不完。而且最终形成了<strong>资料收集狂症</strong>，白鸟在林，不如一鸟在手</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;title: 如何整理巩固零碎的知识&lt;br&gt;tags: 学习栈&lt;br&gt;keywords: 学习栈&lt;br&gt;cover: ‘&lt;a href=&quot;https://www.dmoe.cc/random.php&quot;&gt;https://www.dmoe.cc/random.php&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何做副业</title>
    <link href="https://a-little-sweet.github.io/posts/bfd213df.html"/>
    <id>https://a-little-sweet.github.io/posts/bfd213df.html</id>
    <published>2023-04-03T12:25:49.837Z</published>
    <updated>2023-04-03T13:13:12.530Z</updated>
    
    <content type="html"><![CDATA[<p>1、做副业的目的是什么（增加收入）</p><p>2、做副业的目标是什么（月入1万，月入2万……）</p><p>3、每天什么时间做，投入多少时间（空余时间，下班后，1-3小时等）</p><p>4、做什么项目（适合自己的项目）</p><p>5、用什么方法做（适合自己的方法）</p><p>6、每天都做些什么（和项目相关的事）</p><p>7、怎样能快速做出满意的成绩（摸透规则，掌握方法技巧和思路）</p><p>8、怎样保持成绩长期稳定（坚持和专注）</p><p>9、怎样放大操作（以量放大，以法放大）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、做副业的目的是什么（增加收入）&lt;/p&gt;
&lt;p&gt;2、做副业的目标是什么（月入1万，月入2万……）&lt;/p&gt;
&lt;p&gt;3、每天什么时间做，投入多少时间（空余时间，下班后，1-3小时等）&lt;/p&gt;
&lt;p&gt;4、做什么项目（适合自己的项目）&lt;/p&gt;
&lt;p&gt;5、用什么方法做（适合自己的方</summary>
      
    
    
    
    
    <category term="其他文件" scheme="https://a-little-sweet.github.io/tags/%E5%85%B6%E4%BB%96%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>电脑效率</title>
    <link href="https://a-little-sweet.github.io/posts/d28e90b0.html"/>
    <id>https://a-little-sweet.github.io/posts/d28e90b0.html</id>
    <published>2023-04-03T12:24:15.861Z</published>
    <updated>2023-04-03T13:13:12.541Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-uTools"><a href="#1-uTools" class="headerlink" title="1.  uTools"></a>1.  uTools</h3><blockquote><p><strong>uTools</strong> 是一个极简、插件化、跨平台的桌面效率软件，同时支持 Win、Mac 和 Linux 系统。<br>它以插件的形式，将很多实用的常用工具集合起来，让我们可以自由选择安装自己需要的功能，打造一个专属的工具集合。</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/wd0A9LjWKMe0UsPtUQqjl5TglxYcQMwNFdEDkYTI42QD18hUcPCJOCTyUUAJbrQ2zO9bicXhXs5rNMCbmbibd1Ug/640?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt="图片"></p><p><strong>软件特性：</strong>  </p><ul><li><p>插件中心：以插件的形式提供各种实用工具和功能，可以按需安装；</p></li><li><p>多功能输入框：支持文本、图片、文件等输入；</p></li><li><p>自动粘贴：唤出 uTools 时，自动将剪贴板中 5 秒内的内容粘贴进去；</p></li><li><p>全局快捷键：一键唤起小工具，如上传图片、以图搜图、翻译等；</p></li></ul><h3 id="笔记效率"><a href="#笔记效率" class="headerlink" title="笔记效率"></a>笔记效率</h3><p><del>先暂时使用这个随机  <a href="https://cn.piliapp.com/random/lots/">https://cn.piliapp.com/random/lots/</a></del></p><p>实现随机api图片   <a href="https://www.cnblogs.com/hlmy/p/16640635.html">https://www.cnblogs.com/hlmy/p/16640635.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-uTools&quot;&gt;&lt;a href=&quot;#1-uTools&quot; class=&quot;headerlink&quot; title=&quot;1.  uTools&quot;&gt;&lt;/a&gt;1.  uTools&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;uTools&lt;/strong&gt; 是一个极简</summary>
      
    
    
    
    
    <category term="其他文件" scheme="https://a-little-sweet.github.io/tags/%E5%85%B6%E4%BB%96%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a-little-sweet.github.io/posts/0.html"/>
    <id>https://a-little-sweet.github.io/posts/0.html</id>
    <published>2023-04-03T12:24:08.059Z</published>
    <updated>2023-04-03T13:13:12.534Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: 毕业后，你还可以学些什么？<br>tags: 其他文件<br>keywords: IT类<br>cover: ‘<a href="https://imgapi.xl0408.top/index.php">https://imgapi.xl0408.top/index.php</a>‘</p><hr><h3 id="网络资源"><a href="#网络资源" class="headerlink" title="网络资源"></a>网络资源</h3><ul><li><a href="http://www.ted.com/">TED</a>：尖峰创想，启迪心智</li><li><a href="http://itunes.stanford.edu/">斯坦福开放大学</a>：免费读大学，最新的类似于IOS开发与Ruby开发系列课程，你可以免费找到</li><li><a href="http://ocw.mit.edu/courses/">MIT开放课程</a>：世界上最好的理工学院，关于人工智能等议题开启你的好奇心</li><li><a href="http://www.youtube.com/">YouTube</a>:大量的学习视频都集中在这里</li><li><a href="http://stackexchange.com/sites">stackexchange</a>：全世界的热心人士都集中在这里提问与回答问题</li><li><a href="http://edge.org/">edge</a>：牛人与牛人对话</li><li><a href="http://www.plos.org/">PLOS</a>：开源模式在学术界的应用，公共图书馆，你可以免费看到最新的论文；你也可以提交自己的论文</li></ul><h3 id="中文汉化："><a href="#中文汉化：" class="headerlink" title="中文汉化："></a>中文汉化：</h3><ul><li><a href="http://tedtochina.com/">TEDtochina</a>：TED中文社区，不仅仅是翻译。</li><li><a href="http://open.163.com/">网易公开课</a>：有TED及各个国外大学的开放课程的翻译。</li><li><a href="http://www.myoops.org/main.php">MyOOPS开放课程</a>：来自全球顶尖大学的开放式课程，现在由世界各国的数千名义工志工为您翻译成中文。</li><li><a href="http://dongxi.net/">东西网</a>与<a href="http://www.yeeyan.org/">译言</a>：有部分edge翻译材料。</li><li><a href="http://www.youku.com/">优酷</a>:汉化了不少YouTube资源。</li></ul><h3 id="思维"><a href="#思维" class="headerlink" title="思维"></a>思维</h3><p>对思维的深度思考与刻意练习，将拥有较高人生自由度。</p><p>图书</p><p>一般来说，以下推荐的图书组合，以中文图书为主，top10往往是必读，其他的可以泛读与选读。</p><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>中国的作文训练让我们丧失表达欲望。如果不上大学，你可以通过西式的创意写作课程补上这一课。当恢复对写作的热情之后，再从中国传统文化中汲取营养。</p><ul><li><a href="http://book.douban.com/doulist/1269878/">开始写作吧</a>：以西方的创意写作课程图书为主。</li></ul><h3 id="编程图书"><a href="#编程图书" class="headerlink" title="编程图书"></a>编程图书</h3><ul><li><a href="http://book.douban.com/doulist/1244005/">全世界程序员都说好的图书</a>：在<a href="http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read?tab=votes#tab-top">stackoverflow书单</a>基础上整理，多为经典图书。其中1-12本为stack overflow推荐，全世界程序员都说好的图书。</li><li><a href="http://book.douban.com/doulist/1222802/">Ruby与Rails开发基础书单</a>:涵盖了Ruby与Rails3新手所需要的主要技能。Ruby与Rails的组合，能够快速进入Web开发世界。</li><li><a href="http://book.douban.com/doulist/1237672/">与小朋友一起学编程</a>：一些入门的计算机编程读物，面向小朋友写的。所以不用担心自己读不懂。涵盖Python，Ruby与Arduino等。</li></ul><p>网站：</p><ul><li><a href="http://github.com/">github.com</a>：世界上最优秀的程序员集中地带。</li><li><a href="http://stackoverflow.com/">stackoverflow</a>：世界上最热心的程序员集中地带，你的常见问题都可以在这里找到答案。</li></ul><h3 id="创新图书"><a href="#创新图书" class="headerlink" title="创新图书"></a>创新图书</h3><ul><li><a href="http://book.douban.com/doulist/1237682/">成为创新者：诞生伟大设计与产品的新模式</a>：以triz及创新算法为主。</li><li><a href="http://book.douban.com/doulist/1222896/">ReWork系列图书</a>：一些有干货的创业图书。</li><li><a href="http://www.v2ex.com/rework">Rework中文</a>：小而美的创业之旅。</li></ul><p>网站：</p><ul><li><a href="http://paulgraham.com/">paulgraham</a>：一位对创业有独特思考的长者。</li><li><a href="http://news.ycombinator.com/">Hacker News</a>: 技术创业者集中地带。</li><li><a href="http://www.tisiwi.com/123">部分中文资源索引</a></li></ul><h3 id="学习部落"><a href="#学习部落" class="headerlink" title="学习部落"></a>学习部落</h3><p>社交网络如何影响人们的学习和个人发展？不论是线上，还是线下，总有一些人，有一些地方，给我们启迪和帮助，引领我们进步。你和你身边的学友及导师，组成了你的个人学习部落。</p><p>与学友和导师的私下深度交流，助益于心智反省，秘笈传递。你的学习部落通过一次次的“触动-行动-反馈”的循环影响你。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;title: 毕业后，你还可以学些什么？&lt;br&gt;tags: 其他文件&lt;br&gt;keywords: IT类&lt;br&gt;cover: ‘&lt;a href=&quot;https://imgapi.xl0408.top/index.php&quot;&gt;https://imgapi.xl0408.t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>1.4书籍推荐</title>
    <link href="https://a-little-sweet.github.io/posts/9aae53cd.html"/>
    <id>https://a-little-sweet.github.io/posts/9aae53cd.html</id>
    <published>2023-04-03T11:28:26.969Z</published>
    <updated>2023-04-03T13:13:12.593Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>岗位胜任力模型：也叫做核心能力模型，英文是 competency，在组织管理中，胜任素质是指驱动员工作出卓越绩效的一系列综合素质，是员工通过不同方式表现出来的知识、技能/能力、职业素养、自我认知、特质和动机等的素质集合。</p><p>以下给出一套标准的能力定义库共参考（前十二大项）</p></blockquote><ol><li>督导能力（DIRECTING WORK THROUGH OTHERS）</li><li>影响力（INFLUENNCE）</li><li>预期应对能力（INITIATIVE）</li><li>判断能力（JUDGMENT）</li><li>倾听与反应（LISTENING AND RESPONDING）</li><li>组织内活动能力（ORGANIZATIONAL AWARENESS） </li><li>项目管理能力（ORGANIZING WORK/PROJECT MANAGEMENT）</li><li>积极主动性（PERSONAL DRIVE）</li><li>关系网建立（RELATIONSHIP BUILDING）</li><li>自信（SELF—CONFIDENCE）</li><li>展望力（VISIONING）</li><li>团队精神（WORKING WITH OTHERS）</li></ol><p><img src="https://pic1.zhimg.com/80/v2-d0620ec260b858c410910d27f063eccc_720w.webp" alt=""><img src="https://pic4.zhimg.com/80/v2-232860f90166957744578d4313ffd12f_720w.webp" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;岗位胜任力模型：也叫做核心能力模型，英文是 competency，在组织管理中，胜任素质是指驱动员工作出卓越绩效的一系列综合素质，是员工通过不同方式表现出来的知识、技能/能力、职业素养、自我认知、特质和动机等的素质集合。&lt;/p&gt;
&lt;p&gt;以下给出一套</summary>
      
    
    
    
    
    <category term="学习栈" scheme="https://a-little-sweet.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>人体营养均衡</title>
    <link href="https://a-little-sweet.github.io/posts/427016e9.html"/>
    <id>https://a-little-sweet.github.io/posts/427016e9.html</id>
    <published>2023-03-21T11:40:26.797Z</published>
    <updated>2023-04-03T12:55:09.239Z</updated>
    
    <content type="html"><![CDATA[<h3 id="适应人群"><a href="#适应人群" class="headerlink" title="适应人群"></a>适应人群</h3><blockquote><p>适合人群：18-55岁健康人群</p></blockquote><h3 id="每日必须"><a href="#每日必须" class="headerlink" title="每日必须"></a>每日必须</h3><blockquote><ol><li>基础营养:  <font color="#4bacc6">糖类、脂肪、膳食纤维、水分</font></li><li>维生素:   <font color="#4bacc6">A，B1，B2，B3，B5 ，B6, B9 , B12，C，D，E，H，K</font></li><li>矿物质类:    <font color="#4bacc6">Ca，P，K， Mg，Na，Cl，S，Fe，Cu，I，Mn ，Zn，Co，Mo，F，Cr，Se</font>  <pre><code>          ( 钙，磷，钾，镁，钠，氯，硫，铁，铜，碘，锰，锌  钴，钼， 氟，铬，硒 )</code></pre><ol><li>氨基酸类:  <font color="#4bacc6">异亮氨酸，亮氨酸，赖氨酸，蛋氨酸，苯丙氨酸，苏氨酸，色氨酸，缬氨酸</font></li></ol></li></ol></blockquote><h4 id="1-基础营养"><a href="#1-基础营养" class="headerlink" title="1. 基础营养"></a>1. 基础营养</h4><ol><li>蛋白质:每日蛋白质的摄取量应为总热量的 10%。日建议摄取总量是 55~65克。</li><li>糖类：糖类的摄取量随个人热量的需要而定，总热量的 45~55%，不得少于 20%。</li><li>脂肪:每日脂肪的摄取量不宜超过总热量的 25~30%。女性摄取 55~65 克，男性每日不宜超过 90 克。 </li><li>膳食纤维：每日需求量 20~30 克。以每100大卡摄取10 克的膳食纤维为标准，应慢慢增加份量 </li><li>水分：H2O成人每日总需水量为每公斤体重 30~45cc，实际需补充的 随个人需求而调整。 </li></ol><h4 id="2-维生素类"><a href="#2-维生素类" class="headerlink" title="2. 维生素类"></a>2. 维生素类</h4><p>6、维生素 A ：<br>成年男性每天摄取量约 5,000 IU，女性为 4,200 IU。IU(国际单位)。每日应摄取 6~15 毫克的β-胡萝卜素。保持皮肤、头发及牙龈健康、维持视力正 常、使免疫力正常、帮助骨骼生长、促进成长<br>缺乏的危害：骨骼无法正常生长<br>富含维生素 A的食品：肝、牛奶、牛油、鱼肝油、人参、菠菜、 </p><p>7、维生素 B1：<br>成年男性每日摄取量 1.2~1.5 毫克，女性为 1~1.1 毫克<br>缺乏的危害：水肿、麻木<br>富含维生素B1的食品：54V鲜活螺旋藻、糙米、核果类、酵母粉 </p><p>8、维生素 B2：<br>成年男性每日摄取量为 1.2~1.8 毫克，女性为 1~1.5 毫克。能帮助营养素代谢的美容维生素<br>缺乏的危害：角膜炎、口角炎、皮肤炎、眼睛畏光<br>富含维生素B2的食品：奶酪、肉类、肉脏类、绿色蔬菜 </p><p>9、维生素 B3：<br>成年男性每日摄取量为 14~22 毫克，女性为 12~17 毫克，烟碱酸。有助DNA的合成.<br>富含维生素B3的食品：鱼、鸡肉、猪肝、黄绿色蔬菜、豆类、全榖制品、蛋、奶酪 </p><p>10、维生素 B5：<br>成人每日摄取量为 4~7 毫克，女性怀孕及哺乳期可增加到5-9 毫克（泛酸）<br>缺乏的危害：低血糖症、血液及皮肤异常、疲倦、抑郁、失眠、食欲不振，<br>富含维生素B5的食品：胚芽、糙米、麸皮、豌豆、花生、扁豆</p><p>11、维生素 B9：<br>成人每日摄取量为 200 微克。上限是 1 毫克。 帮助DNA合成，预防心脏病发作及癌症。孕妇适量摄取有利胎儿神经细胞的发育，促进乳汁分泌。<br>缺乏的危害：巨球性贫血、舌疮、身体虚弱无力、失眠<br>富含维生素B9的食品：新鲜的绿色蔬菜、、肝、肾、瘦肉、香蕉 </p><p>12、维生素 B12：<br>成人每日摄取量为 3 微克。能预防贫血的红色维生素。促进核酸之合成<br>缺乏的危害：出现贫血、消化不良<br>富含维生素B12的食品：牛肉、奶酪、蛋、牛奶、豆腐、肝脏 </p><p>13、维生素 C：<br>成人每日摄取量为 60~100 毫克。对抗万病源头的病菌及压力，并改善肌肤困扰。<br>缺乏的危害：坏血病、牙质疏松、伤口复原缓慢。<br>富含维生素C的食品：深绿及黄红色蔬菜、水果、奇异果、柠檬 </p><p>14、维生素 D :<br>成人每天摄取量约为 5~7.5 微克。与维生素 A、C、胆碱、钙、磷一同摄取可相辅相成，又称为阳光维他命。<br>缺乏的危害：骨齿不良、骨质疏松症。<br>富含维生素D的食品：鱼肝油、蛋、牛油、鱼类、肝、添加维生素D的鲜奶、(阳光可使皮下胆固醇换成维他命D)</p><p>15、维生素 E ：<br>成年男性每日摄取量为 12 毫克，女性为 10 毫克。保持血管健康、预防癌症，防止细胞氧化、治疗不孕等作用。<br>缺乏的危害：缺乏足够维他命E会引致溶血性贫血；<br>富含维生素E的食品：植物油、全麦谷类、南瓜 </p><p>16、维生素 H：<br>成人每日摄取量为 100~200 毫克。（生物素）帮助脂肪酸的形成<br>缺乏的危害：皮肤炎、食欲不振、恶心、贫血、头皮屑多、容易掉发。<br>富含维生素H的食品：猪肝、沙丁鱼、糙米、果仁、未精制的榖类</p><p>17、维生素 K：<br>成人约 65~80 毫克, 建议成人每公斤体重摄取 1 毫克。 </p><p>18、维生素B6：<br>能帮助女性保持脑部、神经、皮肤正常运作、维持神经系统及大脑正常功能的作用<br>缺乏的危害：恶心、情绪低落、皮肤炎。<br>富含维生素B6的食品：肉类、鱼类、蔬菜类、酵母、麦芽、肝 </p><h4 id="3-矿物质类"><a href="#3-矿物质类" class="headerlink" title="3. 矿物质类"></a>3. 矿物质类</h4><p>19、钙 Ca ：<br>青春期到 25 岁，男性每日应摄取 800 毫克，女性则为700毫克；到 25 岁以上，建议每日摄取量应达 600 毫克。孕妇或授乳中女性，每日所需钙质皆为 1000 毫克。为构成骨骼和牙齿的主要成分.<br>缺乏的危害：导致骨质密度降低、骨质疏松、骨骼变形、骨折。<br>富含钙 Ca的食品：奶类、深绿色蔬菜、豆类、</p><p>20、磷 P：<br>成人每日摄取量为 600 毫克。钙摄取不足时，就会发生骨质流失问题。<br>缺乏的危害：骨骼、发育不良、关节炎、肥胖、神经过敏、疲劳、食欲不振。<br>富含磷的食品：家禽类、鱼类、肉类、干果、牛奶、米糠、胚芽 </p><p>21、钾 K：<br>成人每日摄取量为 2,000 毫克。心跳正常规律、可预防中风。<br>缺乏的危害：高血压、容易中暑、疲劳。（爱喝咖啡、酒及嗜吃甜食者易缺乏。）富含钾的食品：柿干、蔬菜、 </p><p>22、镁 Mg：<br>成年男性每日摄取量为 360 毫克，女性为 315 毫克。为构成骨骼及牙齿之主要成分<br>缺乏的危害：缺乏镁会使神经受到干扰，长期服用利尿药或量饮酒时，容易缺乏镁<br>富含镁的食品：蔬菜、鱼肉、香蕉、五谷类、瘦肉、奶类、豆荚。 </p><p>23、钠 Na：<br>成人每日摄取量为 2~4 克。有助血压、神经、肌肉的正常运作。<br>缺乏的危害：缺乏钠会引致昏睡、低血糖、心悸等症状、血压高。<br>富含钠的食品：奶类、蛋类、肉类奶制品、 </p><p>24、氯 Cl：<br>每日营养素建议摄取量，RDNA &gt; 200 毫克/每日。一般人每日食盐的摄取量应低于 8~10 克。<br>缺乏的危害：钾、钠、氯三元素缺乏任何一种时，可使人生长停滞。<br>富含氯的食品：盐、海藻、麦粉、橄榄、奶类、肉类、 </p><p>25、硫 S：<br>每日营养素建议摄取量，RDNA &gt; 200 毫克/每日。为构成毛发、软骨、胰岛素等之必需成分。<br>缺乏的危害：浮肿、生长发育迟缓、心跳减慢、食欲不振。<br>富含硫的食品：蛋类、奶类、瘦肉类、豆荚类、坚果类 </p><p>26、铁 Fe：<br>成年男性每日摄取量为 10 毫克，女性为 15 毫克。 血液的主要成份，制造血红蛋白。对孩童成长及抵抗疾病亦非常重要，防止贫血<br>缺乏的危害：贫血、疲倦、抵抗力降低、发育不良等。<br>富含铁的食品：肝及内脏类、蛋黄、牛奶、瘦肉、贝类、海藻类、豆类、 </p><p>27、铜 Cu：<br>成人每日摄取量为 1.6~3 毫克。结合铁及血红蛋白，改善贫血。<br>缺乏的危害：会影响骨骼间的缔结组织、贫血。<br>富含铜的食品：肝脏、牡蛎、芝麻、瘦肉、坚果类 </p><p>28、碘 I：<br>成人每日摄取量为 90~140 微克。<br>甲状腺球蛋白的主要成分，降低血中胆固醇值、促进体脂肪燃烧、帮助减肥。<br>缺乏的危害：甲状腺肿大、肥胖、影响儿童发育。<br>富含碘的食品：海藻、海产类、肉类、蛋、奶类、五谷类、绿叶蔬菜 </p><p>29、锰 Mn ：<br>成人每日摄取量为 3.5~4 毫克。<br>缺乏的危害：影响骨骼形成、降低性荷尔蒙的合成及怀孕能力、性功能衰退。<br>富含锰的食品：糠皮、坚果、豆荚类、莴苣、菠萝。 </p><p>30、锌 Zn：<br>成年男性每日摄取量为 15 毫克，女性为 12 毫克。<br>帮助新皮肤生长、细胞再生、强化免疫力。又称为壮阳矿物质，对前列腺的功能、生殖器官的发育有帮助<br>缺乏的危害：发育不全、前列腺异常、妨碍RNA、DAN的生成、性交能力衰退<br>富含锌的食品：海产、牛肉、羊肉、蛋、鱼、未精制谷物类、坚果 </p><p>31、钴 Co ：<br>只需在日常饮食中含有微量便可，人体必须的微量矿物质，<br>缺乏的危害：贫血、恶心、牙龈出血、食欲不振、体重减轻<br>富含钴的食品：绿叶蔬菜、动物肝、肾脏、荞麦</p><p>32、钼 Mo：<br>成人每日摄取量为 25~30 微克。<br>缺乏的危害：不孕症、疲劳、性无能<br>富含钼的食品：大豆、蔬菜、白菜</p><p>33、氟 F：<br>每日摄取 20 毫克以上。构成骨骼和牙齿的重要成份。能够强化牙齿的珐琅质，对预防蛀牙方面很有效。<br>缺乏的危害：贫血、成长发育不良、生殖能力衰弱。使牙齿失去光泽<br>富含氟的食品：杏仁、茶叶、苹果、牛奶、鸡蛋、蜂蜜、麦芽、日常的饮用水、菠菜。 </p><p>34、铬 Cr ：<br>成年男性每日摄取量为 30~35 微克，女性为 20~25 微克。活化胰岛素，号称减肥矿物质。在糖尿病及低血糖患者体内，<br>缺乏的危害：醣类无法顺利代谢、严重可能引起糖尿病、动脉硬化。<br>富含铬的食品：谷类、豆类、肉类、坚果</p><p>35、硒 Se ：<br>成人每日摄取量为 50 微克，摄取上限是 400 微克。<br>独立或与维他命E配合，成为有效的抗氧代剂、保持年轻，帮助治疗女性更年期热潮红，与毛发的生长有关。<br>缺乏的危害：缺乏硒会使人体衰老，严重缺乏甚至会导致心肌毛病如心肌衰竭。<br>富含硒的食品：竹筴鱼、肉类、蔬菜、米糠、南瓜 </p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ol><li><p>一般成人根据体重及活动量来看，女性一天约需要 1500~1800kcal(大卡)，男性约需 2000-2300kcal， </p></li><li><p>胺基酸是构成蛋白质的物质，人体内约有 22 种胺基酸，9 种称为「必需胺基酸」 </p></li><li><p>维生素分水溶性：维生素 B 群及维生素 C；脂溶性：维生素 A、D、E 及 K。水溶性维生素易在烹调过程遭破坏。</p></li><li><p>所谓的国际单位(I.U.)是评估维生素 A、D 两种营养素含量的计量单位</p></li></ol><h4 id="4-氨基酸类"><a href="#4-氨基酸类" class="headerlink" title="4. 氨基酸类"></a>4. 氨基酸类</h4><p>36、异亮氨酸；能维持机体平衡，治疗精神障碍 </p><p>37、亮氨酸；如果缺乏时，会停止生长，体重减轻 </p><p>38、赖氨酸；增强免疫能力，改善发育,促进骨骼生长。</p><p>39、蛋氨酸；提高肌肉活力的功能 。</p><p>40、苯丙氨酸:促进甲状腺素和肾和肾上腺素的合成 </p><p>41、苏氨酸: 人体必需，缺乏时会使人消瘦，甚至死亡 </p><p>42、色氨酸:促进血红蛋白的合成. </p><p>43、缬氨酸；促使神经系统功能正常. </p><p>注：以上氨基酸为体内不可合成又必须的氨基酸，长期缺乏会导致死亡，氨基酸相互作用、缺一不可，缺乏任何一种都会导致其它氨基酸也无法发挥作用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;适应人群&quot;&gt;&lt;a href=&quot;#适应人群&quot; class=&quot;headerlink&quot; title=&quot;适应人群&quot;&gt;&lt;/a&gt;适应人群&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;适合人群：18-55岁健康人群&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;每日必须&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="探索" scheme="https://a-little-sweet.github.io/tags/%E6%8E%A2%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>货源渠道</title>
    <link href="https://a-little-sweet.github.io/posts/3024c976.html"/>
    <id>https://a-little-sweet.github.io/posts/3024c976.html</id>
    <published>2022-12-08T05:37:22.000Z</published>
    <updated>2023-04-03T12:39:01.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="垂直式电商网站"><a href="#垂直式电商网站" class="headerlink" title="垂直式电商网站"></a>垂直式电商网站</h3><blockquote><p>产品统一管理，根据需求进行展示，如出现产品问题可以全部下架，灵活高效，保证客户对产品的评分不低于规定；</p><p>垂直式电商网站:供应商提供低库存风险、低成本、高效率的渠道，进行品牌推广，市场调研；通过对客户行为分析，消费能力水平的评估，为供应商提供数据支持，一起解决库存问题；</p><p>同类产品，商品价格透明，物流简便，品质有保障；过供应商和物流渠道资源整合，专业的垂直电商网站的品质服务和产品保障. </p><p>深挖供应链，注重精细化运营是垂直电商的优势，对供应链的完善和独特的产品服务，达到与综合电商差异化的效果；品牌是一个长年累月的过程，每个环节要不断优化，把事情做到最细，带来更好的用户体验和最大的效益；要非常关注用户的转化率、留存率和粘性，越来越多的自然流量才会避免高成本的怪圈。</p><p><strong>排名前十的垂直电商网站</strong></p><p><strong>1． 阿芙精油</strong><br>阿芙精油是成立于2009年的化妆品电商，每年有几个亿的销售，他坚持少而精的订单数，专注于品牌的建立，把一个小商品做到极致；</p><p><strong>2． 春水堂</strong><br>春水堂是成立于2003年的情趣用口店，他弱化了性的色彩，讲究设计、美感，更像是个玩具，开辟了上千亿的市场；</p><p><strong>3． 酒仙网</strong><br>酒仙网是成立于2009年的酒类电商网站，在每年规模高达上万亿的酒类市场，酒仙网将资源整合到线上渠道，把酒卖的更好；</p><p><strong>4． 裂帛</strong><br>裂帛是成立于2006年的女装电商，创始人将最文艺、最有范的女装与其他品牌区别开来，在2018年的“双11”当中，品牌销售过亿，成为当日销售冠军；</p><p><strong>5． 钻石小鸟</strong><br>钻石小鸟是成立于2002年的珠宝电商，他不仅懂得品牌营销，还有能力把握整个供应链，与国际大牌设计合作，推出有自身特色的钻石产品；</p><p><strong>6． 本来生活</strong><br>本来生活是成立于2018年的生鲜电商，他根据用户的需求点，推出的“禇橙”取得了轰动效应，带动了本来生活的流量；</p><p><strong>7． Roseonly</strong><br>Roseonly是成立于2018年的鲜花电商，出于一种专爱的概念，需要自己把名字和收花人的名字绑定，一辈子只能送给一个人，不能更改，今年营收将达到几千万；</p><p><strong>8． 哇塞网</strong><br>哇塞网是成立于2008年的手工艺品电商，其定位是创意生活服务，是国内最大的手工原创产品、艺术品在线市场，满足了高要求、追求品质生活的人群；</p><p><strong>9． 贡天下</strong><br>贡天下是成立于2018年的特产电商，专注于全天下特产，每个地方开设分馆之后，把当地特产放到线上售卖，成为中国最大的特产网购商城；</p><p><strong>10. 蛋生网</strong><br>蛋生网是成立于2018年的母婴纺织品电商，主打有机棉天然材质的服装，采用向上游供应商定制产品的模式，提高供应链的效率，节约成本，销售已经接近千万。</p></blockquote><h3 id="供货渠道"><a href="#供货渠道" class="headerlink" title="供货渠道"></a>供货渠道</h3><h4 id="衣服批发"><a href="#衣服批发" class="headerlink" title="衣服批发"></a>衣服批发</h4><blockquote><ol><li>织里童装网(童装批发)</li><li>搜款网(女装批发)</li><li>货捕头(女装批发)</li><li>生意网(童装批发)</li><li>四季星座(男装,女装)</li><li>网商园(男装批发)</li><li>酷有拿货网(服装批发)</li><li>衣联网(服装档口)</li><li>批批网(服装批发)</li><li>杭州女装网(女装,男装,童装,鞋批发)</li><li>搜鞋网(鞋子批发)</li><li>53货源网(服装鞋包)</li><li>爱买卖(女鞋批发)</li><li>新款网(女鞋批发)</li><li>开山网(鞋子批发)</li></ol></blockquote><h4 id="化妆品"><a href="#化妆品" class="headerlink" title="化妆品"></a>化妆品</h4><blockquote><ol><li>个秀名妆</li><li>优分销</li></ol></blockquote><h4 id="母婴"><a href="#母婴" class="headerlink" title="母婴"></a>母婴</h4><blockquote><ol><li>挚爱母婴网</li></ol></blockquote><h4 id="珠宝"><a href="#珠宝" class="headerlink" title="珠宝"></a>珠宝</h4><blockquote><ol><li>批发户(珠宝饰品)</li></ol></blockquote><h4 id="食品"><a href="#食品" class="headerlink" title="食品"></a>食品</h4><blockquote><ol><li>58食品网</li></ol></blockquote><h4 id="其他产品"><a href="#其他产品" class="headerlink" title="其他产品"></a>其他产品</h4><blockquote><ol><li>义务小商品城(各类小东西)</li><li>多商网(全品类)</li><li>包牛牛(箱包批发)</li><li>众人店(特产批发)</li><li>北极光(跨境电商各类产品)</li><li>工邦邦(工业用品批发)</li><li>马可波罗网(机械,五金批发)</li><li>货源之家(各类批发)</li><li>工业汇(工业产品批发)</li><li>美乐乐(家具批发)</li></ol></blockquote><p>​                                                                                                                                                                                                                                                                                                                                               </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;垂直式电商网站&quot;&gt;&lt;a href=&quot;#垂直式电商网站&quot; class=&quot;headerlink&quot; title=&quot;垂直式电商网站&quot;&gt;&lt;/a&gt;垂直式电商网站&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;产品统一管理，根据需求进行展示，如出现产品问题可以全部下架，灵活高效，保证</summary>
      
    
    
    
    
    <category term="电商" scheme="https://a-little-sweet.github.io/tags/%E7%94%B5%E5%95%86/"/>
    
  </entry>
  
  <entry>
    <title>10种电商模式</title>
    <link href="https://a-little-sweet.github.io/posts/f35fa098.html"/>
    <id>https://a-little-sweet.github.io/posts/f35fa098.html</id>
    <published>2022-12-07T13:40:32.000Z</published>
    <updated>2022-12-08T07:06:43.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="传统电商"><a href="#传统电商" class="headerlink" title="传统电商"></a>传统电商</h3><blockquote><p>传统电商平台一般有淘宝/天猫,京东,苏宁,唯品会,网易考拉,网易严选,寺库,小米有品,什么值得买</p><p>传统电商通过零售,营销,物流,金融等业务整合,形成供给侧的网络协同效应,从而提高整个组织效应,进一步分摊服务成本</p></blockquote><h3 id="社交电商"><a href="#社交电商" class="headerlink" title="社交电商"></a>社交电商</h3><h4 id="社交内容电商"><a href="#社交内容电商" class="headerlink" title="社交内容电商"></a>社交内容电商</h4><blockquote><p>社交电商是以消费者人际关系为着力点,基于人与人的分享裂变`产生聚合效应,反向降低平台获客成本与服务成本</p></blockquote><div class="table-container"><table><thead><tr><th>类型</th><th>商业模式</th><th>盈利构成</th><th>代表平台</th></tr></thead><tbody><tr><td>闭环型</td><td>通过内容运营在自营平台上<br />实现引流,变现,服务,留存全闭环</td><td>平台入驻费+商家服务费+<br />广告/营销收入+上平销售</td><td>小红书,每日一淘</td></tr><tr><td>导流型</td><td>通过内容运营引流.留存并导向第三方(平台或商家)实现变现</td><td>销售返佣+广告/营销收入</td><td>什么值得买</td></tr></tbody></table></div><h4 id="社交分享电商"><a href="#社交分享电商" class="headerlink" title="社交分享电商"></a>社交分享电商</h4><blockquote><p>通过情感分享/利益激励吸引社会关系链对分享者信任的潜在消费者,导向第三方平台消费变现(<strong>CPS营销推广收入</strong>)</p></blockquote><h4 id="社交零售电商"><a href="#社交零售电商" class="headerlink" title="社交零售电商"></a>社交零售电商</h4><blockquote><p>B2C型:传统零售通过新建社交零售渠道,改良原有零售服务能力(<strong>京喜,苏宁易购</strong>)</p><p>S2B2C型:自带社交的电商基因的平台,从零组件商品供应,物流,售后等零售服务能力,<br>通过小B分销,分享裂变等多种形式引流变现(<strong>云集微店,贝店</strong>)</p><p>LBS型: 通过培育或签约团长进行社群运营,集聚规模订单完成销量(<strong>食享会</strong>)</p></blockquote><h4 id="社交电商服务商"><a href="#社交电商服务商" class="headerlink" title="社交电商服务商"></a>社交电商服务商</h4><blockquote><p>1.工具服务:通过普适型/定制型工具/系统/整体解决方案等产品,为客户的业务模型和交易底层提供技术服务支持(有赞,微盟)</p><p>2.以”中间商”角色承接供应商与社交平台之间的招商/运营深度对接服务,为客户迅速拓展渠道,实现良好成单率(各电商平台代入驻服务商)</p><p>3.咨询服务:针对社交电商领域各种新兴模式,操作工具等制定相关课程,为客户提供培训/顾问咨询服务(各电商培训机构)</p></blockquote><h4 id="生鲜电商"><a href="#生鲜电商" class="headerlink" title="生鲜电商"></a>生鲜电商</h4><blockquote><p>生鲜电商指的是利用互联网在网上销售生鲜类产品,如新鲜水果,蔬菜,生鲜肉类;受疫情影响,生鲜电商强势爆发.该赛道目前竞争依然白热化,<strong>盒马,每日优鲜,叮咚买菜,美团买菜</strong>等平台</p><p>主要盈利模式为前置仓模式,而前置仓模式是指,更靠近消费者的小型仓储单位,一般设置在消费者集中的社区附近, 生鲜产品销售方利用冷链物流(冷藏车)提前将产品配送至前置仓储,等用户下单,再由仓库内员工打包配合最后一公里上门配送,无论是订单响应速度还是配送成本,都比直接配送有很大优势</p></blockquote><h4 id="母婴电商"><a href="#母婴电商" class="headerlink" title="母婴电商"></a>母婴电商</h4><blockquote><p>母婴电商是指以母婴产品及周边服务为主营类目的垂直类电商平台,二胎政策放开,母婴吃到了红利</p><p><strong>1.渠道下沉</strong>: 蜜芽与妇儿医院美中宜和达成战略合作,战略投资亲子娱乐悠游堂,积极涉足下游产业链</p><p><strong>2.跨境业务</strong>: 以保税仓直邮模式获取母婴跨境电商份额(<strong>贝贝,蜜芽</strong>)</p><p><strong>3.闲置交易</strong>:提供二手母婴产品交易平台(<strong>花粉儿</strong>)</p><p><strong>4.母婴社区</strong>: 为母婴话题交流提供平台(<strong>宝宝树</strong>)(<strong>宝宝树母婴平台有潜力巨大的KOC和KOL</strong>)</p></blockquote><h4 id="宠物电商"><a href="#宠物电商" class="headerlink" title="宠物电商"></a>宠物电商</h4><blockquote><p>宠物电商拥有千亿的市场规模,以<strong>e宠商城</strong>与<strong>波奇宠物</strong>为代表的垂直类宠物电商平台蓬勃发展</p><p>目前来看,E宠商城正在全面布局 <strong>UGC</strong>与<strong>PGC</strong>内容导购模块,这将更适应新一代宠物家长的习惯</p><p><strong>解释</strong></p><p>​         <strong>UGC</strong>：用户生产内容。又作UCC。属于口碑营销,平台提供功能，一般用户可以通过平台，发布传播自己的UGC给其他用户看。平台通过给予话语权、平台功能，让一般用户能够自主创造内容，增加平台的活跃度，平台从而越做越大，吸引更多的用户。</p><p>​          <strong>PGC</strong>：专业生产内容。又作PCC。平台拥有了大量用户还不够，还得留住大量用户。从“拉”到“留”，需要大量优质的内容。而仅仅靠UGC是不够的。需要更加专业化、更加公信力、更加有价值的内容。这，就是PGC。</p></blockquote><div class="table-container"><table><thead><tr><th></th><th>E宠商城</th><th>波奇宠物</th></tr></thead><tbody><tr><td>产品定位</td><td>提供有保障的产品和有品质的服务</td><td>打造”社区+电子商务+服务”三位一体的全方位互联网平台</td></tr><tr><td>上线时间</td><td>2009年</td><td>2014年</td></tr><tr><td>slogen</td><td>品质养宠,尽在E宠</td><td>波奇全面关爱宠物生活</td></tr><tr><td>用户群体</td><td>享受简单,品质购物体验的宠物家长</td><td>喜欢社交的宠物家长</td></tr><tr><td>产品优势</td><td>专注宠物用品和宠物服务,提供养宠课堂,视频内容</td><td>宠物爱好者的综合型网站</td></tr></tbody></table></div><h4 id="垂直特卖"><a href="#垂直特卖" class="headerlink" title="垂直特卖"></a>垂直特卖</h4><blockquote><p>打“大牌品质 工厂价格”的C2M反向定制平台——必要。</p><p>必要是全球首家用户直连制造（C2M）的电商平台，采用C2M模式实现用户到工厂的两点直线连接，去除所有中间流通环节，连接顶级设计师、顶级制造商，为用户提供顶级品质，平民价格，个性其专属的商品。根据其价值主张，可以看出，必要商城只为用户提供“低价”、“高品”和“专属”的商品。主要盈利模式为7%的销售扣点，最大程度提高产品性价比。</p></blockquote><h4 id="导购电商"><a href="#导购电商" class="headerlink" title="导购电商"></a>导购电商</h4><blockquote><p>上通过API接口导入第三方平台商品，向下以分销的模式发展会员客户（部分涉及会员分级），盈利模式主要为：①佣金差价；②会员费；③部分自营商品毛利。</p><p>目前行业内做的比较成熟的平台为<strong>花生日记</strong>，当前发展势头比较猛的有<strong>淘小铺</strong>和<strong>芬香</strong>。</p><p>其中，花生日记为综合性的导购平台，淘小铺聚焦阿里系商品（与淘宝强结合），芬香聚焦京东系商品（与京东+微信强结合）。</p><p>友情提示，该模式裂变效果很吓人，请不要轻易测试。</p></blockquote><h4 id="跨境电商"><a href="#跨境电商" class="headerlink" title="跨境电商"></a>跨境电商</h4><blockquote><p>据《2018年度中国跨境电商市场数据监测报告》显示，2018年中国跨境电商交易规模达9万亿元，同比增长11.6%。其中，出口占比达到78.9%，进口比例21.1%。</p><p>目前除头部电商企业外，出口领域做的比较好的有<strong>shopee、Akulaku、Lazada</strong>等，该类型电商的运营模式其实可以完全参考国内主流电商的操盘思路（<strong>店群或精细化运营</strong>），同时结合所在站点的用户习惯；进口领域主要集中在头部电商平台，如<strong>天猫国际、京东国际、网易考拉</strong>等，同时垂直领域<strong>洋码头</strong>做的还不错。</p><p>以洋码头为例，“买手商家制”是其最核心的优势。洋码头主打全球化商品，笼盖83个国家和区域的80万件不同商品，拥有高达6万名的专业买手,他们当中不乏一些网络红人和专业买家。这些人都为洋码头实现全球个性化的消费推荐提供了一个更好的载体,同时也是捍卫商品源头品质，提升海外购物体验的重要后盾。</p></blockquote><h4 id="小程序电商"><a href="#小程序电商" class="headerlink" title="小程序电商"></a>小程序电商</h4><blockquote><p>随着微信之父张小龙正式宣布小程序将于2017年1月9日正式上线以后，基于小程序生态的电商模式层出不穷，头部的PDD、JD等自带流量自不必说，咱们重点探讨“专注微信品效营销”的小电铺。</p><p>该平台自诩“微信生态最大的小程序电商服务平台”，向上接入了1000+品牌的10万+SKU(销售属性)，向下发展了3000+自媒体，拥有10亿+的日PV(展现量PV：该商品被浏览的次数)。</p><p>另外，值得关注的是今年全新上线的“腾讯智慧零售”小程序，作为去中心化流量分发平台+私域流量导流平台，同时具备基于LBS的产品能力，腾讯智慧零售未来的想象空间非常大。</p></blockquote><p>注:<strong>LBS（Location-based service）是一种增值服务，是在确定用户位置的前提下为固定或者移动的用户提供各种与位置相关的服务。</strong>搭建线上门店，依靠平台的LBS推荐机制获取线上流量；发起营销活动，通过LBS精准广告投放进行引流，线上沟通，线下交易；</p><h4 id="尾货分销模式"><a href="#尾货分销模式" class="headerlink" title="尾货分销模式"></a>尾货分销模式</h4><blockquote><p>该模式和第七种导购模式完全不同，尾货分销是指仅面向B端或小B客户，提供品牌商品的分销能力，类似于阿里巴巴。目前做的比较好的有主打“品牌分销商首选”的<strong>爱库存</strong>。</p><p>运营模式为向上招募品牌商家，由品牌商家提供商品（折扣尾货）与物流服务，向下付费招募分销商（仅1级），平台负责指导分销商运营，由分销商负责销售。平台与分销商按一定比例分配商品差价。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;传统电商&quot;&gt;&lt;a href=&quot;#传统电商&quot; class=&quot;headerlink&quot; title=&quot;传统电商&quot;&gt;&lt;/a&gt;传统电商&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;传统电商平台一般有淘宝/天猫,京东,苏宁,唯品会,网易考拉,网易严选,寺库,小米有品,什么值得买&lt;</summary>
      
    
    
    
    
    <category term="电商" scheme="https://a-little-sweet.github.io/tags/%E7%94%B5%E5%95%86/"/>
    
  </entry>
  
  <entry>
    <title>外挂标签引入</title>
    <link href="https://a-little-sweet.github.io/posts/98c6183b.html"/>
    <id>https://a-little-sweet.github.io/posts/98c6183b.html</id>
    <published>2022-11-22T15:13:08.000Z</published>
    <updated>2022-11-23T13:32:48.382Z</updated>
    
    <content type="html"><![CDATA[<h3 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式:&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs, 2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br><span class="line"></span><br><span class="line">带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line">带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line">带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line">带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line">键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line">密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><p><p><p><p></p><h3 id="段落文本"><a href="#段落文本" class="headerlink" title="段落文本"></a>段落文本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式:&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">字体:logo, code</span><br><span class="line">颜色:&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;</span><br><span class="line">大小: small, h4, h3, h2, h1, large, huge, ultra</span><br><span class="line">对齐方向: left, center, right</span><br><span class="line">彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line">超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><p><p><p><p></p><h3 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式:&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;默认情况&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;行内文本样式-text&quot;&gt;&lt;a href=&quot;#行内文本样式-text&quot; class=&quot;headerlink&quot; title=&quot;行内文本样式 text&quot;&gt;&lt;/a&gt;行内文本样式 text&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>随机动漫Api</title>
    <link href="https://a-little-sweet.github.io/posts/d3d28240.html"/>
    <id>https://a-little-sweet.github.io/posts/d3d28240.html</id>
    <published>2022-11-22T14:13:37.000Z</published>
    <updated>2022-11-22T15:08:22.806Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>动漫API</p></div><p><p><br> <a href="https://img.xjh.me/random_img.php?type=bg&amp;return=302">https://img.xjh.me/random_img.php?type=bg&amp;return=302</a></p><p><p><br><a href="https://air.moe/ranimg/api.php">https://air.moe/ranimg/api.php</a></p><p><p><br><a href="https://imgapi.xl0408.top/index.php">https://imgapi.xl0408.top/index.php</a></p><p><p><br><a href="https://www.dmoe.cc/random.php">https://www.dmoe.cc/random.php</a></p><p><p><br><a href="https://api.hanximeng.com/ranimg/api.php">https://api.hanximeng.com/ranimg/api.php</a></p><p><p><br><a href="https://api.btstu.cn/sjbz/?lx=dongman">https://api.btstu.cn/sjbz/?lx=dongman</a></p><p><p><br><a href="https://www.dmoe.cc/random.php">https://www.dmoe.cc/random.php</a></p><p><p><br><a href="https://api.ghser.com/random/api.php">https://api.ghser.com/random/api.php</a></p><p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tip home&quot;&gt;&lt;p&gt;动漫API&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;p&gt;&lt;br&gt; &lt;a href=&quot;https://img.xjh.me/random_img.php?type=bg&amp;amp;return=302&quot;&gt;https://img.xjh.me/r</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>for循环</title>
    <link href="https://a-little-sweet.github.io/posts/3f209729.html"/>
    <id>https://a-little-sweet.github.io/posts/3f209729.html</id>
    <published>2022-11-20T11:00:00.000Z</published>
    <updated>2022-11-22T14:52:08.771Z</updated>
    
    <content type="html"><![CDATA[<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (循环变量初始化1;循环条件2;循环变量迭代3) &#123;</span><br><span class="line"> 代码体4;</span><br><span class="line"> break;//执行到break跳出整个for循环</span><br><span class="line"> continue;//执行到continue跳出这次循环</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">循环顺序  ：执行一次1，2，4，3，2，4，3 ……</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li><p>循环条件是返回的一个布尔值的表达式</p></li><li><p>for(;循环判断条件;)中的初始化和变量迭代可以写到其他地方，但是两边的分号不能省略</p></li><li><p>循环初始值，可以有多条初始化语句，但类型必须一样</p></li><li><p>循环变量迭代，也可以有多条语句，逗号分隔</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i = 2; 将初始变量放在for循环外，可以增大i变量的作用域</span><br><span class="line">for(;i&lt;=5;i++) &#123;</span><br><span class="line">System.out.println(&quot;hello,world&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//求打印所有9的倍数；并将其个数统计，及总和</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line"> //定义变量number用来接收键盘值</span><br><span class="line">Scanner scanner= new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入一个数字&quot;);</span><br><span class="line">int number = scanner.nextInt();</span><br><span class="line">        int s = 0;</span><br><span class="line">int count = 0;</span><br><span class="line">treble = 9; //treble是倍数</span><br><span class="line"></span><br><span class="line">for(int i=1;i&lt;=number;i++) </span><br><span class="line">&#123;</span><br><span class="line">if(i % treble == 0) </span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;i=&quot;+i);</span><br><span class="line">s++;</span><br><span class="line">count+=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;s=&quot;+s);</span><br><span class="line">System.out.println(&quot;count=&quot;+count);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//求出所有队伍对阵打乒乓的各种可能</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line">Scanner scanner=  new Scanner(System.in); </span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入最大值&quot; );</span><br><span class="line">int number = scanner.nextInt();</span><br><span class="line"></span><br><span class="line"> int count=0;</span><br><span class="line">//for (  int i=0; i&lt;(number/2+1); i++)</span><br><span class="line">for (  int i=0; i &lt; number; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">if (i&lt;(number/2+1))</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(i + &quot;+&quot; + (number-i) + &quot;=&quot;+number );</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;一共有&quot; + count + &quot;种可能&quot; );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//九九乘法表</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line"></span><br><span class="line">for( int i=1;i&lt;10;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(int k=1;k&lt;=i;k++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.print(k+&quot;x&quot;+i+&quot;=&quot;+(k*i)+&quot;  &quot;); </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//倒立九九乘法表</span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line"></span><br><span class="line">for( int i=9;i&gt;0;i--)</span><br><span class="line">&#123;</span><br><span class="line">for(int k=1;k&lt;=i;k++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.print(k+&quot;x&quot;+i+&quot;=&quot;+(k*i)+&quot;  &quot;);           </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="while循环控制"><a href="#while循环控制" class="headerlink" title="while循环控制"></a>while循环控制</h3><h4 id="基本语法：-1"><a href="#基本语法：-1" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 循环变量初始化 1  </span><br><span class="line">while  （循环条件2) &#123;</span><br><span class="line">循环体3；</span><br><span class="line">循环变量迭代4；</span><br><span class="line">&#125;</span><br><span class="line">流程：1 &gt; 2 &gt; 3 &gt; 4 &gt; 2 &gt; 3 &gt; 4</span><br></pre></td></tr></table></figure><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//实现1-100，以内被3整除的数</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line">int i =1;</span><br><span class="line">    while(i&lt;=100)</span><br><span class="line">    &#123;</span><br><span class="line">            if(i%3 == 0) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while循环控制"><a href="#do-while循环控制" class="headerlink" title="do-while循环控制"></a>do-while循环控制</h3><h4 id="基本语法：-2"><a href="#基本语法：-2" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 循环变量初始化1</span><br><span class="line"> do&#123;</span><br><span class="line">循环体2；</span><br><span class="line">循环变量迭代3；</span><br><span class="line">&#125;while（循环条件4); </span><br><span class="line">执行顺序 1，2，3，4，2，3，4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多重循环控制"><a href="#多重循环控制" class="headerlink" title="多重循环控制"></a>多重循环控制</h3><ol><li>将一个循环体放入另一个循环中，就形成了嵌套循环。 for，while，do while 均可作为内外循环。</li><li>嵌套循环 就是<strong>将内层循环当成循环体</strong>，只有内层循环条件为false，结束内层循环，结束外层当前的一次循环；当外层条件还是T，则再进入内部循环进行循环，直到内部条件再次false，跳出内部，跳出外部当次循环。</li><li>设置外层循环次数位m次，内层为n次，则内部循环体实际需要执行m*n次</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//统计3个班学生的平均值，各班及格人数</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line">Scanner scanner= new Scanner(System.in);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">double   Sum=0;//三个班级成绩总和</span><br><span class="line">   </span><br><span class="line">for(int m=1;m&lt;=3;m++) &#123; // m 代表班级</span><br><span class="line"></span><br><span class="line">double sum=0; //一个班级成绩总和</span><br><span class="line">int count =0; //计数器</span><br><span class="line"></span><br><span class="line">      for(int i=1;i&lt;6;i++) &#123; // i 代表学生</span><br><span class="line"></span><br><span class="line">System.out.println(m+&quot;班的学生，请输入你的成绩&quot;);</span><br><span class="line">double scores = scanner.nextDouble();//定义一个变量scores用于接收成绩</span><br><span class="line">if(scores &gt;=60) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum+=scores;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(m+&quot;班的平均成绩&quot;+(sum / 5)+&quot; 及格人数是&quot;+count+&quot;\n&quot;);</span><br><span class="line">Sum +=sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;三个班级的平均成绩是&quot;+(Sum / 15));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//打印金字塔</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line">//外循环控制行数，内部两个循环依次打印 空格+*</span><br><span class="line">for( int i=1;i&lt;=6;i++) &#123;  //假设i代表行数</span><br><span class="line">for(int  m=1;m&lt;=6-i;m++) &#123;  //m控制空格数</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">for(int n=1;n&lt;=2*i-1;n++) &#123; //n控制*的个数</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//打印空心金字塔</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line">int  totalLevel=6;//层数，先死后活</span><br><span class="line">//外循环控制行数，内部两个循环依次打印 空格+*</span><br><span class="line">for( int i=1;i&lt;=totalLevel;i++) &#123;  //假设i代表行数</span><br><span class="line">for(int  m=1;m&lt;=totalLevel-i;m++) &#123;  //m控制空格数</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">for(int n=1;n&lt;=2*i-1;n++) &#123; //n控制*的个数</span><br><span class="line">if(( n==1 || n==2*i-1) || i==totalLevel)&#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line"></span><br><span class="line">                     &#125;</span><br><span class="line"> else</span><br><span class="line">System.out.print(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;for循环&quot;&gt;&lt;a href=&quot;#for循环&quot; class=&quot;headerlink&quot; title=&quot;for循环&quot;&gt;&lt;/a&gt;for循环&lt;/h3&gt;&lt;h4 id=&quot;基本语法：&quot;&gt;&lt;a href=&quot;#基本语法：&quot; class=&quot;headerlink&quot; title=&quot;基本语</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>标识符的命名规则规范</title>
    <link href="https://a-little-sweet.github.io/posts/cb2b897.html"/>
    <id>https://a-little-sweet.github.io/posts/cb2b897.html</id>
    <published>2022-11-11T22:41:36.261Z</published>
    <updated>2022-11-22T14:52:32.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标识符的命名规则规范"><a href="#标识符的命名规则规范" class="headerlink" title="标识符的命名规则规范"></a>标识符的命名规则规范</h3><ol><li><p>java 对各种变量，方法，类命名时使用的字符称为标识符</p></li><li><p>凡事自己可以起名字的地方都是标识符</p></li></ol><h4 id="标识符的命名规则"><a href="#标识符的命名规则" class="headerlink" title="标识符的命名规则"></a>标识符的命名规则</h4><ol><li>由26个英文字母大小写， 0-9  ，_或$组成</li><li>数字不能开头</li><li><strong>不可以使用关键字（stastic）和保留字（goto），但可以包含他们。</strong></li><li><strong>java中严格区分大小写</strong>，长度无限制</li><li>标识符不能有空格</li></ol><h4 id="标识符的命名规范"><a href="#标识符的命名规范" class="headerlink" title="标识符的命名规范"></a>标识符的命名规范</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://pic.diydoutu.com/bq/1994.gif" alt="斧头帮帮主琛哥：这个就叫专业GIF动图-斧头帮帮主,功夫,Kung Fu Hustle,周星驰,香港电影"></h4><ol><li><p>包名 ： 所有单词小写     puda.fike.loke包</p></li><li><p>类名/接口名：大驼峰法，所有首字母大写          StudentResult</p></li><li><p>变量名/方法名 ： 驼峰法（小驼峰），第一个单词小写，第二个大写，彼此类推。studentResult</p></li><li><p>常量名 ：所有字母都大写。每个单词用下划线拼接  Student_Result</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;标识符的命名规则规范&quot;&gt;&lt;a href=&quot;#标识符的命名规则规范&quot; class=&quot;headerlink&quot; title=&quot;标识符的命名规则规范&quot;&gt;&lt;/a&gt;标识符的命名规则规范&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;java 对各种变量，方法，类命名时使用的字符称为标识符&lt;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>switch分支结构</title>
    <link href="https://a-little-sweet.github.io/posts/254834b.html"/>
    <id>https://a-little-sweet.github.io/posts/254834b.html</id>
    <published>2022-11-11T22:41:36.259Z</published>
    <updated>2022-11-22T14:52:27.222Z</updated>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220123155741868.png" alt="image-20220123155741868"></p><h3 id="switch分支结构"><a href="#switch分支结构" class="headerlink" title="switch分支结构"></a>switch分支结构</h3><p><img src="C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220123163555813.png" alt="image-20220123163555813"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">格式</span><br><span class="line"></span><br><span class="line">switch(表达式)</span><br><span class="line">&#123;</span><br><span class="line">case 常量1:   //当表达式的值等于常量1，就执行语句块1</span><br><span class="line">语句块1；</span><br><span class="line">break;      //表示退出switch结构，若没有break，则穿透到语句块2，并执行下去，直到break退出</span><br><span class="line">case 常量2:</span><br><span class="line">语句块2；</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">…………</span><br><span class="line">case 常量n:</span><br><span class="line">语句块n;</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">default:  //如果上面都没匹配上，则执行default</span><br><span class="line">default 语句块;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p>表达式数据类型，应和case后的<strong>数据类型一样</strong>，</p><p>或者可以<strong>自动转换</strong>可以相互比较类型的，比如输入的是字符，而常量是int</p></li><li><p>switch（表达式）中的表达式的返回值必须是：（byte,short,int,char,String，enum[枚举]）</p></li><li><p>case 子句中的值<strong>必须是常量</strong>，而不能是变量</p></li><li><p><strong>default 子句是可选的</strong>，当没有匹配的case时，执行default</p></li><li><p>break语句是用来帮助一个case分支跳出switch语句，<strong>如果没写break，则会穿透执行</strong>下一个case中的语句块，一直执行下去，直到出现break/执行完default语句也自动跳出</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">switch(a)//首先表达式满足 byte,short,int,char,enum[枚举]，String六个其中之一</span><br><span class="line">&#123;</span><br><span class="line">    case 50 :   //也是可以的，字符a会自动转换为97</span><br><span class="line">System.out.println(&quot;&quot;);</span><br><span class="line">break;</span><br><span class="line">case &#x27;d&#x27;+1 : //也行，结果还是常量，且数据类型和switch中的一致</span><br><span class="line">System.out.println(&quot;&quot;);</span><br><span class="line">break;</span><br><span class="line">default  :  //可以没有</span><br><span class="line">                System.out.println(&quot;&quot;);</span><br></pre></td></tr></table></figure><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//接收一个字符（a-g），分别代表抽奖礼品</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Scanner scanner= <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个字符【a-g】&quot;</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">letter</span> <span class="operator">=</span>  scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(letter)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;中了一等奖&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;中了二等奖&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;中了三等奖&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line"> System.out.println(<span class="string">&quot;纪念奖&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//使用switch 打印月份的季节</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class text</span><br><span class="line">&#123;</span><br><span class="line">public static void main (String[] args)</span><br><span class="line">&#123;</span><br><span class="line">Scanner scanner= new Scanner(System.in);</span><br><span class="line">int mounth = scanner.nextInt();</span><br><span class="line"></span><br><span class="line"> switch (mounth)</span><br><span class="line"> &#123;</span><br><span class="line">case 3:</span><br><span class="line">case 4:</span><br><span class="line">case 5:</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">              break;</span><br><span class="line"> </span><br><span class="line"> case 12:</span><br><span class="line"> case 1:</span><br><span class="line"> case 2:</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">              break;</span><br><span class="line"> </span><br><span class="line"> case 6:</span><br><span class="line"> case 7:</span><br><span class="line">case 8:</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">              break;</span><br><span class="line">  </span><br><span class="line"> case 9:</span><br><span class="line">case 10:  </span><br><span class="line">case 11:</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">              break;</span><br><span class="line">  </span><br><span class="line">  default :</span><br><span class="line">  System.out.println(&quot;你输入的有误&quot;);</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220123155741868.png&quot; alt=&quot;image-20220123155741868&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>super关键字</title>
    <link href="https://a-little-sweet.github.io/posts/f6ea766.html"/>
    <id>https://a-little-sweet.github.io/posts/f6ea766.html</id>
    <published>2022-11-11T22:41:36.247Z</published>
    <updated>2022-11-22T14:52:23.443Z</updated>
    
    <content type="html"><![CDATA[<h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>概念: super代表父类的引用,用于访问父类的属性,方法,构造器</p><h3 id="使用super的好处"><a href="#使用super的好处" class="headerlink" title="使用super的好处"></a>使用super的好处</h3><ol><li><p>调用父类构造器的好处,分工明确,<strong>父类属性由父类初始化,子类的属性由子类初始化</strong></p></li><li><p>当子类中有和父类的方法/属性重名时,为了访问父类的成员,必须通过super,如果没有重名,super,this直接访是一样的效果</p></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>子类调用属性和方法,一般从子类,父类,Object依次找属性和方法</li><li>super 的访问不限于直接父类,super访问遵循就近原则</li><li>如果本类有属性/方法,则直接调用本类,若没有,则找父类,依次找下去,但中间不能有private卡住,否则的话,不能直接调用,只能<strong>间接调用</strong></li></ol><h3 id="super和this的区别"><a href="#super和this的区别" class="headerlink" title="super和this的区别"></a>super和this的区别</h3><div class="table-container"><table><thead><tr><th style="text-align:left">区别点</th><th>this</th><th>super</th></tr></thead><tbody><tr><td style="text-align:left">访问属性</td><td>先访问本类中的属性,如果没有则从父类中继续查找</td><td>直接访问父类中的属性,如果没有则从父类的父类中继续查找</td></tr><tr><td style="text-align:left">调用方法</td><td>先访问本类中的方法,如果没有则从父类的父类中继续查找</td><td>直接访问父类中的方法,如果没有则从父类的父类中继续查找</td></tr><tr><td style="text-align:left">调用构造器</td><td><code>this(形参列表);</code>调用本类构造器,只能在构造器中调用,而且必须是首行</td><td><code>super(形参列表);</code>调用父类构造器,只能在构造器中调用,而且必须是首行,this&amp;super不能同时</td></tr><tr><td style="text-align:left">特殊含义</td><td>表示当前对象</td><td>子类中访问父类对象</td></tr></tbody></table></div><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol><li>访问父类的属性,但不能访问父类的prive属性 <code>super.属性名</code></li><li>访问父类的方法,不能访问父类的private方法<code>super.方法名</code></li><li>访问父类的构造器,super(参数列表),只能放在构造器的第一句</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//子类</span><br><span class="line">package com.hspedu;</span><br><span class="line"></span><br><span class="line">public class Test extends A &#123;</span><br><span class="line">public int n1;//不同类可以同名属性和方法,就算是子类父类也不影响,不过调用时得特别指定</span><br><span class="line">public int n2;</span><br><span class="line">    public void showInfo() &#123;</span><br><span class="line">        //使用super访问父类属性</span><br><span class="line">        System.out.println(super.n1+super.n2+super.n3);</span><br><span class="line">    &#125;</span><br><span class="line">    public void ok() &#123;</span><br><span class="line">        //使用super访问父类方法</span><br><span class="line">        super.root1();</span><br><span class="line">        super.root2();</span><br><span class="line">        super.root3();</span><br><span class="line">    &#125;</span><br><span class="line">    //调用父类的talk()方法的方式[子类中也未包含同名同参数的talk方法]&amp;&amp; 调用属性也是同理</span><br><span class="line">    talk();//如果本类有,则直接调用本类,若没有,则找父类,依次找下去,但中间不能有private卡住,否则的话,不能直接调用,只能间接调用</span><br><span class="line">    this.talk();//等价于talk();</span><br><span class="line">    super.talk();//区别于this.talk(),talk(),super是直接从父类开始找,后者从子类开始找</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    public  Test()&#123;</span><br><span class="line">        //使用子类构造器访问父类构造器</span><br><span class="line">        super();//如果调用默认的,可以不写,父类的构造器都会被子类的构造器所调用</span><br><span class="line">        super(&quot;SiDun.Lei&quot;);</span><br><span class="line">        super(&quot;Jack&quot;,23);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//父类</span><br><span class="line">package com.hspedu;</span><br><span class="line"></span><br><span class="line">public class A &#123;</span><br><span class="line">    public int n1;</span><br><span class="line">    int n2;</span><br><span class="line">    protected int n3;</span><br><span class="line">    private int n4;</span><br><span class="line"></span><br><span class="line">    public A() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public A(String name ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public A(String name,int salary ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public  void talk() &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    public  void  root1() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    void  root2() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    protected  void  root3() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    private  void  root4() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;super关键字&quot;&gt;&lt;a href=&quot;#super关键字&quot; class=&quot;headerlink&quot; title=&quot;super关键字&quot;&gt;&lt;/a&gt;super关键字&lt;/h3&gt;&lt;p&gt;概念: super代表父类的引用,用于访问父类的属性,方法,构造器&lt;/p&gt;
&lt;h3 id=&quot;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java的多态</title>
    <link href="https://a-little-sweet.github.io/posts/215392d1.html"/>
    <id>https://a-little-sweet.github.io/posts/215392d1.html</id>
    <published>2022-11-11T22:41:36.233Z</published>
    <updated>2022-11-22T14:52:19.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java的多态"><a href="#java的多态" class="headerlink" title="java的多态"></a>java的多态</h3><h3 id="引入的原因"><a href="#引入的原因" class="headerlink" title="引入的原因"></a>引入的原因</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Master master = new Master(&quot;tim&quot;);</span><br><span class="line">        Dg dog = new Dog(&quot;金毛&quot;);</span><br><span class="line">        Cat cat = new Cat(&quot;蓝猫&quot;);</span><br><span class="line">        Fish fish = new Fish(&quot;小鱼干&quot;);</span><br><span class="line">        Bone bone = new Bone(&quot;鸡锁骨&quot;);</span><br><span class="line">        master.feed(dog,bone);</span><br><span class="line">        master.feed(cat,fish);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public  void  feed(Dog dog,Bone bone) &#123;</span><br><span class="line">       System.out                                                                                                                    println(name+&quot;给&quot;+dog.getName()+&quot;喂&quot;+bone.getName());</span><br><span class="line">   &#125;</span><br><span class="line">   public  void  feed(Cat cat,Fish fish) &#123;</span><br><span class="line">       System.out.println(name+&quot;给&quot;+cat.getName()+&quot;喂&quot;+fish.getName());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>随着多个动物,食物的增加,对于代码整体而言,<strong>代码复用性不高,不利于代码维护</strong>,所以引入<strong>多态</strong></p><p><p><p><p></p><h3 id="多态-羊皮狼"><a href="#多态-羊皮狼" class="headerlink" title="多态(羊皮狼)"></a>多态(羊皮狼)</h3><p>方法或对象具有多种形态,是面对对象的第三特征,多态是<strong>建立在封装和继承基础之上的</strong></p><p>(1)方法的多态</p><p>​         重载和重写就体现多态</p><p>(2)对象的多态(核心)</p><ol><li>一个对象的编译类型和运行类型可以不一致</li></ol><p><code>Animal animal = new Dog();</code></p><ol><li>编译类型在定义对象时,就确定了不能改变</li><li>运行类型是可以变化的</li><li>编译类型看定义时 <strong>等号的最左边</strong>, 运行类型看  <strong>等号的最右边</strong></li></ol><blockquote><p><code>Animal animal = new Dog();</code><br><code>animal</code>  只是对象引用, new Dog() 才是对象</p><p>对象的多态: 可以让<strong>一个父类的引用</strong> 指向 <strong>一个子类的对象</strong></p><p><code>animal</code>的编译类型是<code>Animal</code>,运动类型是<code>Dog</code></p><p>  <code>animal= new Cat();</code>   <code>animal</code> 的编译类型是<code>Animal</code>,运动类型变成了<code>Cat</code></p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>1.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.Poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line">public class Dog extends Animal&#123;</span><br><span class="line"></span><br><span class="line">    public void cry() &#123;</span><br><span class="line">        System.out.println(&quot;狗:你在狗叫什么...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.Poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line">public class Cat extends Animal&#123;</span><br><span class="line"></span><br><span class="line">    public void cry() &#123;</span><br><span class="line">        System.out.println(&quot;猫:你在猫叫什么&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.Poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line">public class Animal &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Animal animal_1 = new Animal();//编译类型是Animal,运行类型是Animal</span><br><span class="line">        Animal animal_2 = new Dog();//编译类型是Animal,运行类型是Dog</span><br><span class="line">        animal_2.cry();//此时的编译类型是Animal,运行类型是Dog</span><br><span class="line">        animal_2 = new Cat();//此时的编译类型仍然是Animal,但运行类型变成了Cat</span><br><span class="line">        animal_2.cry();//此时的编译类型是Animal,运行类型是Cat</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public  void  cry() &#123;</span><br><span class="line">        System.out.println(&quot;Animal动物在叫....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><p><p><p><p><br>2.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//animal 编译类型是 Animal,可以指向Animal子类的对象</span></span><br><span class="line">    <span class="comment">//food 编译类型是 Food,可以指向Food子类的对象</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Animal animal,Food food)</span> &#123;  System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;给&quot;</span>+animal.getName()+<span class="string">&quot;喂&quot;</span>+food.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Master master = new Master(&quot;Jack&quot;);</span><br><span class="line">        Dog dog  = new Dog(&quot;金毛&quot;);</span><br><span class="line">        Cat cat  = new Cat(&quot;蓝猫&quot;);</span><br><span class="line">        Fish fish = new Fish(&quot;小鱼干&quot;);</span><br><span class="line">        Bone bone = new Bone(&quot;鸡锁骨&quot;);</span><br><span class="line"></span><br><span class="line">        master.feed(dog ,bone);</span><br><span class="line">        master.feed(cat,fish);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态的向上转型"><a href="#多态的向上转型" class="headerlink" title="多态的向上转型"></a>多态的向上转型</h3><ol><li><p>本质:父类的引用指向了子类的对象</p></li><li><p>语法: <code>父类类型 引用名 = new 子类类型();</code></p></li><li><p>特点:编译类型看左边,运行类型看右边</p><p>可以调用父类中的所有成员(需要看访问权限),不能调用子类中特有成员</p><p>最终运行看子类的具体实现效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ss</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">sss</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> <span class="keyword">extends</span>  <span class="title class_">ss</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;动物&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cat</span>  <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;    <span class="comment">//方法重写</span></span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">catMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cat</span>();</span><br><span class="line">       <span class="comment">//animal.catMouse() 不能调用,编译后animal只能调用自己成员</span></span><br><span class="line">        <span class="comment">// 因为在编译阶段,能调用哪些成员,是由编译类型来决定的</span></span><br><span class="line">        animal.eat();<span class="comment">//猫吃鱼</span></span><br><span class="line">        <span class="comment">//编译类型是父类,执行父类的成员,但运行时按照特指的子类执行重写父类的方法,所以子类重写是关键,</span></span><br><span class="line">        <span class="comment">// 而且执行过程中遵循就近原则,先找特指运行的子类,再依次往上找,直到找到为止</span></span><br><span class="line">        animal.sleep();</span><br><span class="line">        animal.run();</span><br><span class="line">        animal.show();</span><br><span class="line">        <span class="comment">//特指的运行子类找不到该方法,就会向编译环境父类Animal找仍未果,再从上级父类直到找到为止</span></span><br><span class="line">        animal.sss(); <span class="comment">//sss</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>   为了让父类指向子类,并且父类引用也可以访问子类的所有成员(除特殊权限)</p><ol><li>语法<code>子类类型</code> 引用名 = (子类类型) 父类引用`;</li><li>只能强转父类的引用,不能强转父类的对象</li><li>要求父类的引用必须指向是当前目标类型的对象</li><li><p>可以调用子类类型中的所有成员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cat</span>();</span><br><span class="line">       <span class="comment">//animal.catMouse() 不能调用,编译后animal只能调用自己成员</span></span><br><span class="line">        <span class="comment">//如果想调用只能使用向下转型</span></span><br><span class="line">        <span class="comment">// 向上转型,访问范围看父类的成员,执行看子类;而向下转型,访问范围看子类的成员,执行看子类</span></span><br><span class="line"></span><br><span class="line">        <span class="type">cat</span> <span class="variable">c_at</span> <span class="operator">=</span> (cat) animal;<span class="comment">//和new的区别是,没有创建新的对象</span></span><br><span class="line">        c_at.catMouse();<span class="comment">//猫抓老鼠</span></span><br><span class="line">        c_at.eat();<span class="comment">//猫吃鱼</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3></li><li><p>属性没有重写之说,<strong>属性的值看编译类型</strong></p></li><li><p><code>`instanceOf</code>比较操作符,用于判断<strong>对象的运行类型</strong>是否为xx类型或者xx类型的子类型 </p></li><li><p>动态绑定机制 </p><p>&gt;<br>&gt;</p><blockquote><p>1.当调用对象方法时,该方法会和该对象的内存地址和运行类型绑定</p><p>2.当调用属性时,没有动态绑定机制,哪里声明哪里使用</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;java的多态&quot;&gt;&lt;a href=&quot;#java的多态&quot; class=&quot;headerlink&quot; title=&quot;java的多态&quot;&gt;&lt;/a&gt;java的多态&lt;/h3&gt;&lt;h3 id=&quot;引入的原因&quot;&gt;&lt;a href=&quot;#引入的原因&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java的包</title>
    <link href="https://a-little-sweet.github.io/posts/31f532fa.html"/>
    <id>https://a-little-sweet.github.io/posts/31f532fa.html</id>
    <published>2022-11-11T22:41:36.225Z</published>
    <updated>2022-11-22T14:52:14.839Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java的包"><a href="#Java的包" class="headerlink" title="Java的包"></a>Java的包</h3><h4 id="包的作用"><a href="#包的作用" class="headerlink" title="包的作用"></a>包的作用</h4><blockquote><ol><li>用于区分相同名字的类</li><li>当类很多时,可以很好的管理类[Java Api]</li><li>控制访问范围</li></ol></blockquote><h3 id="常用的包"><a href="#常用的包" class="headerlink" title="常用的包"></a>常用的包</h3><blockquote><p>java.lang.* //lang包是基本包,默认引入,不需要再引入</p><p>java.util.* //util包,系统提供的工具包,工具类,使用Scanner</p><p>java.net.* //网络包,网络开发</p><p>java.awt.* //是做java的界面开发,Gui</p></blockquote><h3 id="包的命名"><a href="#包的命名" class="headerlink" title="包的命名"></a>包的命名</h3><blockquote><p>命名规则: 只包含数字,字母,下划线,小圆点,但不能是关键字或保留字</p><p>命名规范:一般是小写字母+小圆点 , eg: com.公司名.项目名.业务模块名</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>引入包语法<code>import com.hxs.pkg</code> ,引入包是为了使用该包下的类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.pkg;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays; //引入包util下的Arrays类,用于排序</span><br><span class="line">//import java.util.*;不建议导入包util下所有的类,那样只会影响效率</span><br><span class="line">public class import01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;1, 4, 2, 6, -1, 9, 0&#125;;</span><br><span class="line">        Arrays.sort(arr); //</span><br><span class="line">        for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+&quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><ol><li><p><code>package</code>的作用是<strong>声明当前类所在的包</strong>,需要放在类的最上面,一个类中最多只有一句package</p></li><li><p>import指令放在package与类定义之间,可以有多句且没有顺序要求</p></li></ol></blockquote><p><p><p><p></p><h3 id="包的本质"><a href="#包的本质" class="headerlink" title="包的本质"></a>包的本质</h3><p>实际上包的本质就是<strong>创建不同的文件夹</strong>用来<strong>存放类</strong></p><p><img src="C:\Users\hhh\Desktop\default1.png" alt="default1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package pack1; //mm类在包pack1中 ; package 关键字,表示打包</span><br><span class="line"></span><br><span class="line">import com.xiaoming.dog;//com.xiaoming表示包名,com是一级目录,xiaoming是二级目录,dog是类</span><br><span class="line">//import com.xiaoqiang.dog; 不能同时引相同的类名</span><br><span class="line">    public class mm &#123;</span><br><span class="line">        public static void main(String[] args) &#123;</span><br><span class="line">        dog d = new dog(); //创建com.xiaoming包下的dog类 对象d</span><br><span class="line"></span><br><span class="line">        com.xiaoqiang.dog d1 = new com.xiaoqiang.dog();//如果想引入,创建com.xiaoqiang包下的dog类 对象d1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Java的包&quot;&gt;&lt;a href=&quot;#Java的包&quot; class=&quot;headerlink&quot; title=&quot;Java的包&quot;&gt;&lt;/a&gt;Java的包&lt;/h3&gt;&lt;h4 id=&quot;包的作用&quot;&gt;&lt;a href=&quot;#包的作用&quot; class=&quot;headerlink&quot; title=&quot;包</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>方法传参机制</title>
    <link href="https://a-little-sweet.github.io/posts/a3493d7e.html"/>
    <id>https://a-little-sweet.github.io/posts/a3493d7e.html</id>
    <published>2022-11-11T22:41:36.154Z</published>
    <updated>2022-11-22T14:57:04.482Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法传参机制"><a href="#方法传参机制" class="headerlink" title="方法传参机制"></a>方法传参机制</h3><ol><li><p>成员方法传递的是<strong>值拷贝</strong>，形参的任何改变不影响实参</p></li><li><p>调用方法会产生一个新栈</p></li><li><p>数组属于引用类型，会指向堆空间</p></li><li><p>引用类型（类,数组,接口）传递的不是值拷贝，而传递的是一个地址</p><p>而形参可以影响实参             </p></li><li><p>对象传递的也是地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//测试 A类中的方法传入（B类对象）参数，在A类的方法中改变B类对象，那么对象B是否变化</span><br><span class="line">//j结果   对象B会发生变化</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">    </span><br><span class="line">Person  p =new Person();</span><br><span class="line">p.name = &#x27;jack&#x27;;</span><br><span class="line">p.age = 10;</span><br><span class="line"></span><br><span class="line">B b = new B();</span><br><span class="line">b.mm(p);  //本质是将对象p的地址传给mn方法</span><br><span class="line"> System.out.print(&quot;main中的p.age=&quot;+ p.age) ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> class   Person &#123;</span><br><span class="line"> </span><br><span class="line"> String name;</span><br><span class="line"> int age;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> class B &#123;</span><br><span class="line"> </span><br><span class="line">public  void   mm (Person p) &#123;</span><br><span class="line">p.age  = 10000;</span><br><span class="line">/*思考如果 p=null ,则上述的结果p.age =10 ，</span><br><span class="line">因为这里的B类的mm方法在传入对象p时，新开的mm栈地址就指向堆中p的地址，</span><br><span class="line">而p=null，则将 mm栈地址指向空，这对堆中的p地址没有任何影响</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/*思考如果 p=new Person , p.age  = 10000;则结果p.age =10 ，</span><br><span class="line">因为这里的B类的mm方法在传入对象p时，新开的mm栈地址就指向堆中p的地址，</span><br><span class="line">而p=new Person，将在堆中创建一个新对象p，p.age=10000的赋值也给了新对象，</span><br><span class="line">当执行完此方法时,输出语句仍然在main栈中找到原本对象p的地址，指向堆中p对象中的p.age</span><br><span class="line">而创建的新对象p，没用就销毁了</span><br><span class="line">*/</span><br><span class="line">&#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;方法传参机制&quot;&gt;&lt;a href=&quot;#方法传参机制&quot; class=&quot;headerlink&quot; title=&quot;方法传参机制&quot;&gt;&lt;/a&gt;方法传参机制&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;成员方法传递的是&lt;strong&gt;值拷贝&lt;/strong&gt;，形参的任何改变不影响实参&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
