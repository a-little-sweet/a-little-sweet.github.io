<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奈落のBlog</title>
  
  <subtitle>be yourself, be bette</subtitle>
  <link href="https://a-little-sweet.github.io/atom.xml" rel="self"/>
  
  <link href="https://a-little-sweet.github.io/"/>
  <updated>2023-03-21T12:40:32.914Z</updated>
  <id>https://a-little-sweet.github.io/</id>
  
  <author>
    <name>saber</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://a-little-sweet.github.io/posts/0.html"/>
    <id>https://a-little-sweet.github.io/posts/0.html</id>
    <published>2023-03-21T11:40:26.797Z</published>
    <updated>2023-03-21T12:40:32.914Z</updated>
    
    <content type="html"><![CDATA[<p>title: 人体营养均衡<br>tags:探索<br>cover: ‘<a href="https://api.btstu.cn/sjbz/?lx=dongman">https://api.btstu.cn/sjbz/?lx=dongman</a>‘</p><h3 id="适应人群"><a href="#适应人群" class="headerlink" title="适应人群"></a>适应人群</h3><blockquote><p>适合人群：18-55岁健康人群</p></blockquote><h3 id="每日必须"><a href="#每日必须" class="headerlink" title="每日必须"></a>每日必须</h3><blockquote><ol><li>基础营养:  <font color="#4bacc6">糖类、脂肪、膳食纤维、水分</font></li><li>维生素:   <font color="#4bacc6">A，B1，B2，B3，B5 ，B6, B9 , B12，C，D，E，H，K</font></li><li>矿物质类:    <font color="#4bacc6">Ca，P，K， Mg，Na，Cl，S，Fe，Cu，I，Mn ，Zn，Co，Mo，F，Cr，Se</font>  <pre><code>          ( 钙，磷，钾，镁，钠，氯，硫，铁，铜，碘，锰，锌  钴，钼， 氟，铬，硒 )</code></pre><ol><li>氨基酸类:  <font color="#4bacc6">异亮氨酸，亮氨酸，赖氨酸，蛋氨酸，苯丙氨酸，苏氨酸，色氨酸，缬氨酸</font></li></ol></li></ol></blockquote><h4 id="1-基础营养"><a href="#1-基础营养" class="headerlink" title="1. 基础营养"></a>1. 基础营养</h4><ol><li>蛋白质:每日蛋白质的摄取量应为总热量的 10%。日建议摄取总量是 55~65克。</li><li>糖类：糖类的摄取量随个人热量的需要而定，总热量的 45~55%，不得少于 20%。</li><li>脂肪:每日脂肪的摄取量不宜超过总热量的 25~30%。女性摄取 55~65 克，男性每日不宜超过 90 克。 </li><li>膳食纤维：每日需求量 20~30 克。以每100大卡摄取10 克的膳食纤维为标准，应慢慢增加份量 </li><li>水分：H2O成人每日总需水量为每公斤体重 30~45cc，实际需补充的 随个人需求而调整。 </li></ol><h4 id="2-维生素类"><a href="#2-维生素类" class="headerlink" title="2. 维生素类"></a>2. 维生素类</h4><p>6、维生素 A ：<br>成年男性每天摄取量约 5,000 IU，女性为 4,200 IU。IU(国际单位)。每日应摄取 6~15 毫克的β-胡萝卜素。保持皮肤、头发及牙龈健康、维持视力正 常、使免疫力正常、帮助骨骼生长、促进成长<br>缺乏的危害：骨骼无法正常生长<br>富含维生素 A的食品：肝、牛奶、牛油、鱼肝油、人参、菠菜、 </p><p>7、维生素 B1：<br>成年男性每日摄取量 1.2~1.5 毫克，女性为 1~1.1 毫克<br>缺乏的危害：水肿、麻木<br>富含维生素B1的食品：54V鲜活螺旋藻、糙米、核果类、酵母粉 </p><p>8、维生素 B2：<br>成年男性每日摄取量为 1.2~1.8 毫克，女性为 1~1.5 毫克。能帮助营养素代谢的美容维生素<br>缺乏的危害：角膜炎、口角炎、皮肤炎、眼睛畏光<br>富含维生素B2的食品：奶酪、肉类、肉脏类、绿色蔬菜 </p><p>9、维生素 B3：<br>成年男性每日摄取量为 14~22 毫克，女性为 12~17 毫克，烟碱酸。有助DNA的合成.<br>富含维生素B3的食品：鱼、鸡肉、猪肝、黄绿色蔬菜、豆类、全榖制品、蛋、奶酪 </p><p>10、维生素 B5：<br>成人每日摄取量为 4~7 毫克，女性怀孕及哺乳期可增加到5-9 毫克（泛酸）<br>缺乏的危害：低血糖症、血液及皮肤异常、疲倦、抑郁、失眠、食欲不振，<br>富含维生素B5的食品：胚芽、糙米、麸皮、豌豆、花生、扁豆</p><p>11、维生素 B9：<br>成人每日摄取量为 200 微克。上限是 1 毫克。 帮助DNA合成，预防心脏病发作及癌症。孕妇适量摄取有利胎儿神经细胞的发育，促进乳汁分泌。<br>缺乏的危害：巨球性贫血、舌疮、身体虚弱无力、失眠<br>富含维生素B9的食品：新鲜的绿色蔬菜、、肝、肾、瘦肉、香蕉 </p><p>12、维生素 B12：<br>成人每日摄取量为 3 微克。能预防贫血的红色维生素。促进核酸之合成<br>缺乏的危害：出现贫血、消化不良<br>富含维生素B12的食品：牛肉、奶酪、蛋、牛奶、豆腐、肝脏 </p><p>13、维生素 C：<br>成人每日摄取量为 60~100 毫克。对抗万病源头的病菌及压力，并改善肌肤困扰。<br>缺乏的危害：坏血病、牙质疏松、伤口复原缓慢。<br>富含维生素C的食品：深绿及黄红色蔬菜、水果、奇异果、柠檬 </p><p>14、维生素 D :<br>成人每天摄取量约为 5~7.5 微克。与维生素 A、C、胆碱、钙、磷一同摄取可相辅相成，又称为阳光维他命。<br>缺乏的危害：骨齿不良、骨质疏松症。<br>富含维生素D的食品：鱼肝油、蛋、牛油、鱼类、肝、添加维生素D的鲜奶、(阳光可使皮下胆固醇换成维他命D)</p><p>15、维生素 E ：<br>成年男性每日摄取量为 12 毫克，女性为 10 毫克。保持血管健康、预防癌症，防止细胞氧化、治疗不孕等作用。<br>缺乏的危害：缺乏足够维他命E会引致溶血性贫血；<br>富含维生素E的食品：植物油、全麦谷类、南瓜 </p><p>16、维生素 H：<br>成人每日摄取量为 100~200 毫克。（生物素）帮助脂肪酸的形成<br>缺乏的危害：皮肤炎、食欲不振、恶心、贫血、头皮屑多、容易掉发。<br>富含维生素H的食品：猪肝、沙丁鱼、糙米、果仁、未精制的榖类</p><p>17、维生素 K：<br>成人约 65~80 毫克, 建议成人每公斤体重摄取 1 毫克。 </p><p>18、维生素B6：<br>能帮助女性保持脑部、神经、皮肤正常运作、维持神经系统及大脑正常功能的作用<br>缺乏的危害：恶心、情绪低落、皮肤炎。<br>富含维生素B6的食品：肉类、鱼类、蔬菜类、酵母、麦芽、肝 </p><h4 id="3-矿物质类"><a href="#3-矿物质类" class="headerlink" title="3. 矿物质类"></a>3. 矿物质类</h4><p>19、钙 Ca ：<br>青春期到 25 岁，男性每日应摄取 800 毫克，女性则为700毫克；到 25 岁以上，建议每日摄取量应达 600 毫克。孕妇或授乳中女性，每日所需钙质皆为 1000 毫克。为构成骨骼和牙齿的主要成分.<br>缺乏的危害：导致骨质密度降低、骨质疏松、骨骼变形、骨折。<br>富含钙 Ca的食品：奶类、深绿色蔬菜、豆类、</p><p>20、磷 P：<br>成人每日摄取量为 600 毫克。钙摄取不足时，就会发生骨质流失问题。<br>缺乏的危害：骨骼、发育不良、关节炎、肥胖、神经过敏、疲劳、食欲不振。<br>富含磷的食品：家禽类、鱼类、肉类、干果、牛奶、米糠、胚芽 </p><p>21、钾 K：<br>成人每日摄取量为 2,000 毫克。心跳正常规律、可预防中风。<br>缺乏的危害：高血压、容易中暑、疲劳。（爱喝咖啡、酒及嗜吃甜食者易缺乏。）富含钾的食品：柿干、蔬菜、 </p><p>22、镁 Mg：<br>成年男性每日摄取量为 360 毫克，女性为 315 毫克。为构成骨骼及牙齿之主要成分<br>缺乏的危害：缺乏镁会使神经受到干扰，长期服用利尿药或量饮酒时，容易缺乏镁<br>富含镁的食品：蔬菜、鱼肉、香蕉、五谷类、瘦肉、奶类、豆荚。 </p><p>23、钠 Na：<br>成人每日摄取量为 2~4 克。有助血压、神经、肌肉的正常运作。<br>缺乏的危害：缺乏钠会引致昏睡、低血糖、心悸等症状、血压高。<br>富含钠的食品：奶类、蛋类、肉类奶制品、 </p><p>24、氯 Cl：<br>每日营养素建议摄取量，RDNA &gt; 200 毫克/每日。一般人每日食盐的摄取量应低于 8~10 克。<br>缺乏的危害：钾、钠、氯三元素缺乏任何一种时，可使人生长停滞。<br>富含氯的食品：盐、海藻、麦粉、橄榄、奶类、肉类、 </p><p>25、硫 S：<br>每日营养素建议摄取量，RDNA &gt; 200 毫克/每日。为构成毛发、软骨、胰岛素等之必需成分。<br>缺乏的危害：浮肿、生长发育迟缓、心跳减慢、食欲不振。<br>富含硫的食品：蛋类、奶类、瘦肉类、豆荚类、坚果类 </p><p>26、铁 Fe：<br>成年男性每日摄取量为 10 毫克，女性为 15 毫克。 血液的主要成份，制造血红蛋白。对孩童成长及抵抗疾病亦非常重要，防止贫血<br>缺乏的危害：贫血、疲倦、抵抗力降低、发育不良等。<br>富含铁的食品：肝及内脏类、蛋黄、牛奶、瘦肉、贝类、海藻类、豆类、 </p><p>27、铜 Cu：<br>成人每日摄取量为 1.6~3 毫克。结合铁及血红蛋白，改善贫血。<br>缺乏的危害：会影响骨骼间的缔结组织、贫血。<br>富含铜的食品：肝脏、牡蛎、芝麻、瘦肉、坚果类 </p><p>28、碘 I：<br>成人每日摄取量为 90~140 微克。<br>甲状腺球蛋白的主要成分，降低血中胆固醇值、促进体脂肪燃烧、帮助减肥。<br>缺乏的危害：甲状腺肿大、肥胖、影响儿童发育。<br>富含碘的食品：海藻、海产类、肉类、蛋、奶类、五谷类、绿叶蔬菜 </p><p>29、锰 Mn ：<br>成人每日摄取量为 3.5~4 毫克。<br>缺乏的危害：影响骨骼形成、降低性荷尔蒙的合成及怀孕能力、性功能衰退。<br>富含锰的食品：糠皮、坚果、豆荚类、莴苣、菠萝。 </p><p>30、锌 Zn：<br>成年男性每日摄取量为 15 毫克，女性为 12 毫克。<br>帮助新皮肤生长、细胞再生、强化免疫力。又称为壮阳矿物质，对前列腺的功能、生殖器官的发育有帮助<br>缺乏的危害：发育不全、前列腺异常、妨碍RNA、DAN的生成、性交能力衰退<br>富含锌的食品：海产、牛肉、羊肉、蛋、鱼、未精制谷物类、坚果 </p><p>31、钴 Co ：<br>只需在日常饮食中含有微量便可，人体必须的微量矿物质，<br>缺乏的危害：贫血、恶心、牙龈出血、食欲不振、体重减轻<br>富含钴的食品：绿叶蔬菜、动物肝、肾脏、荞麦</p><p>32、钼 Mo：<br>成人每日摄取量为 25~30 微克。<br>缺乏的危害：不孕症、疲劳、性无能<br>富含钼的食品：大豆、蔬菜、白菜</p><p>33、氟 F：<br>每日摄取 20 毫克以上。构成骨骼和牙齿的重要成份。能够强化牙齿的珐琅质，对预防蛀牙方面很有效。<br>缺乏的危害：贫血、成长发育不良、生殖能力衰弱。使牙齿失去光泽<br>富含氟的食品：杏仁、茶叶、苹果、牛奶、鸡蛋、蜂蜜、麦芽、日常的饮用水、菠菜。 </p><p>34、铬 Cr ：<br>成年男性每日摄取量为 30~35 微克，女性为 20~25 微克。活化胰岛素，号称减肥矿物质。在糖尿病及低血糖患者体内，<br>缺乏的危害：醣类无法顺利代谢、严重可能引起糖尿病、动脉硬化。<br>富含铬的食品：谷类、豆类、肉类、坚果</p><p>35、硒 Se ：<br>成人每日摄取量为 50 微克，摄取上限是 400 微克。<br>独立或与维他命E配合，成为有效的抗氧代剂、保持年轻，帮助治疗女性更年期热潮红，与毛发的生长有关。<br>缺乏的危害：缺乏硒会使人体衰老，严重缺乏甚至会导致心肌毛病如心肌衰竭。<br>富含硒的食品：竹筴鱼、肉类、蔬菜、米糠、南瓜 </p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ol><li><p>一般成人根据体重及活动量来看，女性一天约需要 1500~1800kcal(大卡)，男性约需 2000-2300kcal， </p></li><li><p>胺基酸是构成蛋白质的物质，人体内约有 22 种胺基酸，9 种称为「必需胺基酸」 </p></li><li><p>维生素分水溶性：维生素 B 群及维生素 C；脂溶性：维生素 A、D、E 及 K。水溶性维生素易在烹调过程遭破坏。</p></li><li><p>所谓的国际单位(I.U.)是评估维生素 A、D 两种营养素含量的计量单位</p></li></ol><h4 id="4-氨基酸类"><a href="#4-氨基酸类" class="headerlink" title="4. 氨基酸类"></a>4. 氨基酸类</h4><p>36、异亮氨酸；能维持机体平衡，治疗精神障碍 </p><p>37、亮氨酸；如果缺乏时，会停止生长，体重减轻 </p><p>38、赖氨酸；增强免疫能力，改善发育,促进骨骼生长。</p><p>39、蛋氨酸；提高肌肉活力的功能 。</p><p>40、苯丙氨酸:促进甲状腺素和肾和肾上腺素的合成 </p><p>41、苏氨酸: 人体必需，缺乏时会使人消瘦，甚至死亡 </p><p>42、色氨酸:促进血红蛋白的合成. </p><p>43、缬氨酸；促使神经系统功能正常. </p><p>注：以上氨基酸为体内不可合成又必须的氨基酸，长期缺乏会导致死亡，氨基酸相互作用、缺一不可，缺乏任何一种都会导致其它氨基酸也无法发挥作用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;title: 人体营养均衡&lt;br&gt;tags:探索&lt;br&gt;cover: ‘&lt;a href=&quot;https://api.btstu.cn/sjbz/?lx=dongman&quot;&gt;https://api.btstu.cn/sjbz/?lx=dongman&lt;/a&gt;‘&lt;/p&gt;
&lt;h3 id</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>货源渠道</title>
    <link href="https://a-little-sweet.github.io/posts/3024c976.html"/>
    <id>https://a-little-sweet.github.io/posts/3024c976.html</id>
    <published>2022-12-08T05:37:22.000Z</published>
    <updated>2022-12-08T14:48:45.219Z</updated>
    
    <content type="html"><![CDATA[<h3 id="垂直式电商网站"><a href="#垂直式电商网站" class="headerlink" title="垂直式电商网站"></a>垂直式电商网站</h3><blockquote><p>产品统一管理，根据需求进行展示，如出现产品问题可以全部下架，灵活高效，保证客户对产品的评分不低于规定；</p><p>垂直式电商网站:供应商提供低库存风险、低成本、高效率的渠道，进行品牌推广，市场调研；通过对客户行为分析，消费能力水平的评估，为供应商提供数据支持，一起解决库存问题；</p><p>同类产品，商品价格透明，物流简便，品质有保障；过供应商和物流渠道资源整合，专业的垂直电商网站的品质服务和产品保障. </p><p>深挖供应链，注重精细化运营是垂直电商的优势，对供应链的完善和独特的产品服务，达到与综合电商差异化的效果；品牌是一个长年累月的过程，每个环节要不断优化，把事情做到最细，带来更好的用户体验和最大的效益；要非常关注用户的转化率、留存率和粘性，越来越多的自然流量才会避免高成本的怪圈。</p><p><strong>排名前十的垂直电商网站</strong></p><p><strong>1． 阿芙精油</strong><br>阿芙精油是成立于2009年的化妆品电商，每年有几个亿的销售，他坚持少而精的订单数，专注于品牌的建立，把一个小商品做到极致；</p><p><strong>2． 春水堂</strong><br>春水堂是成立于2003年的情趣用口店，他弱化了性的色彩，讲究设计、美感，更像是个玩具，开辟了上千亿的市场；</p><p><strong>3． 酒仙网</strong><br>酒仙网是成立于2009年的酒类电商网站，在每年规模高达上万亿的酒类市场，酒仙网将资源整合到线上渠道，把酒卖的更好；</p><p><strong>4． 裂帛</strong><br>裂帛是成立于2006年的女装电商，创始人将最文艺、最有范的女装与其他品牌区别开来，在2018年的“双11”当中，品牌销售过亿，成为当日销售冠军；</p><p><strong>5． 钻石小鸟</strong><br>钻石小鸟是成立于2002年的珠宝电商，他不仅懂得品牌营销，还有能力把握整个供应链，与国际大牌设计合作，推出有自身特色的钻石产品；</p><p><strong>6． 本来生活</strong><br>本来生活是成立于2018年的生鲜电商，他根据用户的需求点，推出的“禇橙”取得了轰动效应，带动了本来生活的流量；</p><p><strong>7． Roseonly</strong><br>Roseonly是成立于2018年的鲜花电商，出于一种专爱的概念，需要自己把名字和收花人的名字绑定，一辈子只能送给一个人，不能更改，今年营收将达到几千万；</p><p><strong>8． 哇塞网</strong><br>哇塞网是成立于2008年的手工艺品电商，其定位是创意生活服务，是国内最大的手工原创产品、艺术品在线市场，满足了高要求、追求品质生活的人群；</p><p><strong>9． 贡天下</strong><br>贡天下是成立于2018年的特产电商，专注于全天下特产，每个地方开设分馆之后，把当地特产放到线上售卖，成为中国最大的特产网购商城；</p><p><strong>10. 蛋生网</strong><br>蛋生网是成立于2018年的母婴纺织品电商，主打有机棉天然材质的服装，采用向上游供应商定制产品的模式，提高供应链的效率，节约成本，销售已经接近千万。</p></blockquote><h3 id="供货渠道"><a href="#供货渠道" class="headerlink" title="供货渠道"></a>供货渠道</h3><h4 id="衣服批发"><a href="#衣服批发" class="headerlink" title="衣服批发"></a>衣服批发</h4><blockquote><ol><li>织里童装网(童装批发)</li><li>搜款网(女装批发)</li><li>货捕头(女装批发)</li><li>生意网(童装批发)</li><li>四季星座(男装,女装)</li><li>网商园(男装批发)</li><li>酷有拿货网(服装批发)</li><li>衣联网(服装档口)</li><li>批批网(服装批发)</li><li>杭州女装网(女装,男装,童装,鞋批发)</li><li>搜鞋网(鞋子批发)</li><li>53货源网(服装鞋包)</li><li>爱买卖(女鞋批发)</li><li>新款网(女鞋批发)</li><li>开山网(鞋子批发)</li></ol></blockquote><h4 id="化妆品"><a href="#化妆品" class="headerlink" title="化妆品"></a>化妆品</h4><blockquote><ol><li>个秀名妆</li><li>优分销</li></ol></blockquote><h4 id="母婴"><a href="#母婴" class="headerlink" title="母婴"></a>母婴</h4><blockquote><ol><li>挚爱母婴网</li></ol></blockquote><h4 id="珠宝"><a href="#珠宝" class="headerlink" title="珠宝"></a>珠宝</h4><blockquote><ol><li>批发户(珠宝饰品)</li></ol></blockquote><h4 id="食品"><a href="#食品" class="headerlink" title="食品"></a>食品</h4><blockquote><ol><li>58食品网</li></ol></blockquote><h4 id="其他产品"><a href="#其他产品" class="headerlink" title="其他产品"></a>其他产品</h4><blockquote><ol><li>义务小商品城(各类小东西)</li><li>多商网(全品类)</li><li>包牛牛(箱包批发)</li><li>众人店(特产批发)</li><li>北极光(跨境电商各类产品)</li><li>工邦邦(工业用品批发)</li><li>马可波罗网(机械,五金批发)</li><li>货源之家(各类批发)</li><li>工业汇(工业产品批发)</li><li>美乐乐(家具批发)</li></ol></blockquote><p>​                                                                                                                                                                                                                                                                                                                                               </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;垂直式电商网站&quot;&gt;&lt;a href=&quot;#垂直式电商网站&quot; class=&quot;headerlink&quot; title=&quot;垂直式电商网站&quot;&gt;&lt;/a&gt;垂直式电商网站&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;产品统一管理，根据需求进行展示，如出现产品问题可以全部下架，灵活高效，保证</summary>
      
    
    
    
    
    <category term="电商" scheme="https://a-little-sweet.github.io/tags/%E7%94%B5%E5%95%86/"/>
    
  </entry>
  
  <entry>
    <title>10种电商模式</title>
    <link href="https://a-little-sweet.github.io/posts/f35fa098.html"/>
    <id>https://a-little-sweet.github.io/posts/f35fa098.html</id>
    <published>2022-12-07T13:40:32.000Z</published>
    <updated>2022-12-08T07:06:43.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="传统电商"><a href="#传统电商" class="headerlink" title="传统电商"></a>传统电商</h3><blockquote><p>传统电商平台一般有淘宝/天猫,京东,苏宁,唯品会,网易考拉,网易严选,寺库,小米有品,什么值得买</p><p>传统电商通过零售,营销,物流,金融等业务整合,形成供给侧的网络协同效应,从而提高整个组织效应,进一步分摊服务成本</p></blockquote><h3 id="社交电商"><a href="#社交电商" class="headerlink" title="社交电商"></a>社交电商</h3><h4 id="社交内容电商"><a href="#社交内容电商" class="headerlink" title="社交内容电商"></a>社交内容电商</h4><blockquote><p>社交电商是以消费者人际关系为着力点,基于人与人的分享裂变`产生聚合效应,反向降低平台获客成本与服务成本</p></blockquote><div class="table-container"><table><thead><tr><th>类型</th><th>商业模式</th><th>盈利构成</th><th>代表平台</th></tr></thead><tbody><tr><td>闭环型</td><td>通过内容运营在自营平台上<br />实现引流,变现,服务,留存全闭环</td><td>平台入驻费+商家服务费+<br />广告/营销收入+上平销售</td><td>小红书,每日一淘</td></tr><tr><td>导流型</td><td>通过内容运营引流.留存并导向第三方(平台或商家)实现变现</td><td>销售返佣+广告/营销收入</td><td>什么值得买</td></tr></tbody></table></div><h4 id="社交分享电商"><a href="#社交分享电商" class="headerlink" title="社交分享电商"></a>社交分享电商</h4><blockquote><p>通过情感分享/利益激励吸引社会关系链对分享者信任的潜在消费者,导向第三方平台消费变现(<strong>CPS营销推广收入</strong>)</p></blockquote><h4 id="社交零售电商"><a href="#社交零售电商" class="headerlink" title="社交零售电商"></a>社交零售电商</h4><blockquote><p>B2C型:传统零售通过新建社交零售渠道,改良原有零售服务能力(<strong>京喜,苏宁易购</strong>)</p><p>S2B2C型:自带社交的电商基因的平台,从零组件商品供应,物流,售后等零售服务能力,<br>通过小B分销,分享裂变等多种形式引流变现(<strong>云集微店,贝店</strong>)</p><p>LBS型: 通过培育或签约团长进行社群运营,集聚规模订单完成销量(<strong>食享会</strong>)</p></blockquote><h4 id="社交电商服务商"><a href="#社交电商服务商" class="headerlink" title="社交电商服务商"></a>社交电商服务商</h4><blockquote><p>1.工具服务:通过普适型/定制型工具/系统/整体解决方案等产品,为客户的业务模型和交易底层提供技术服务支持(有赞,微盟)</p><p>2.以”中间商”角色承接供应商与社交平台之间的招商/运营深度对接服务,为客户迅速拓展渠道,实现良好成单率(各电商平台代入驻服务商)</p><p>3.咨询服务:针对社交电商领域各种新兴模式,操作工具等制定相关课程,为客户提供培训/顾问咨询服务(各电商培训机构)</p></blockquote><h4 id="生鲜电商"><a href="#生鲜电商" class="headerlink" title="生鲜电商"></a>生鲜电商</h4><blockquote><p>生鲜电商指的是利用互联网在网上销售生鲜类产品,如新鲜水果,蔬菜,生鲜肉类;受疫情影响,生鲜电商强势爆发.该赛道目前竞争依然白热化,<strong>盒马,每日优鲜,叮咚买菜,美团买菜</strong>等平台</p><p>主要盈利模式为前置仓模式,而前置仓模式是指,更靠近消费者的小型仓储单位,一般设置在消费者集中的社区附近, 生鲜产品销售方利用冷链物流(冷藏车)提前将产品配送至前置仓储,等用户下单,再由仓库内员工打包配合最后一公里上门配送,无论是订单响应速度还是配送成本,都比直接配送有很大优势</p></blockquote><h4 id="母婴电商"><a href="#母婴电商" class="headerlink" title="母婴电商"></a>母婴电商</h4><blockquote><p>母婴电商是指以母婴产品及周边服务为主营类目的垂直类电商平台,二胎政策放开,母婴吃到了红利</p><p><strong>1.渠道下沉</strong>: 蜜芽与妇儿医院美中宜和达成战略合作,战略投资亲子娱乐悠游堂,积极涉足下游产业链</p><p><strong>2.跨境业务</strong>: 以保税仓直邮模式获取母婴跨境电商份额(<strong>贝贝,蜜芽</strong>)</p><p><strong>3.闲置交易</strong>:提供二手母婴产品交易平台(<strong>花粉儿</strong>)</p><p><strong>4.母婴社区</strong>: 为母婴话题交流提供平台(<strong>宝宝树</strong>)(<strong>宝宝树母婴平台有潜力巨大的KOC和KOL</strong>)</p></blockquote><h4 id="宠物电商"><a href="#宠物电商" class="headerlink" title="宠物电商"></a>宠物电商</h4><blockquote><p>宠物电商拥有千亿的市场规模,以<strong>e宠商城</strong>与<strong>波奇宠物</strong>为代表的垂直类宠物电商平台蓬勃发展</p><p>目前来看,E宠商城正在全面布局 <strong>UGC</strong>与<strong>PGC</strong>内容导购模块,这将更适应新一代宠物家长的习惯</p><p><strong>解释</strong></p><p>​         <strong>UGC</strong>：用户生产内容。又作UCC。属于口碑营销,平台提供功能，一般用户可以通过平台，发布传播自己的UGC给其他用户看。平台通过给予话语权、平台功能，让一般用户能够自主创造内容，增加平台的活跃度，平台从而越做越大，吸引更多的用户。</p><p>​          <strong>PGC</strong>：专业生产内容。又作PCC。平台拥有了大量用户还不够，还得留住大量用户。从“拉”到“留”，需要大量优质的内容。而仅仅靠UGC是不够的。需要更加专业化、更加公信力、更加有价值的内容。这，就是PGC。</p></blockquote><div class="table-container"><table><thead><tr><th></th><th>E宠商城</th><th>波奇宠物</th></tr></thead><tbody><tr><td>产品定位</td><td>提供有保障的产品和有品质的服务</td><td>打造”社区+电子商务+服务”三位一体的全方位互联网平台</td></tr><tr><td>上线时间</td><td>2009年</td><td>2014年</td></tr><tr><td>slogen</td><td>品质养宠,尽在E宠</td><td>波奇全面关爱宠物生活</td></tr><tr><td>用户群体</td><td>享受简单,品质购物体验的宠物家长</td><td>喜欢社交的宠物家长</td></tr><tr><td>产品优势</td><td>专注宠物用品和宠物服务,提供养宠课堂,视频内容</td><td>宠物爱好者的综合型网站</td></tr></tbody></table></div><h4 id="垂直特卖"><a href="#垂直特卖" class="headerlink" title="垂直特卖"></a>垂直特卖</h4><blockquote><p>打“大牌品质 工厂价格”的C2M反向定制平台——必要。</p><p>必要是全球首家用户直连制造（C2M）的电商平台，采用C2M模式实现用户到工厂的两点直线连接，去除所有中间流通环节，连接顶级设计师、顶级制造商，为用户提供顶级品质，平民价格，个性其专属的商品。根据其价值主张，可以看出，必要商城只为用户提供“低价”、“高品”和“专属”的商品。主要盈利模式为7%的销售扣点，最大程度提高产品性价比。</p></blockquote><h4 id="导购电商"><a href="#导购电商" class="headerlink" title="导购电商"></a>导购电商</h4><blockquote><p>上通过API接口导入第三方平台商品，向下以分销的模式发展会员客户（部分涉及会员分级），盈利模式主要为：①佣金差价；②会员费；③部分自营商品毛利。</p><p>目前行业内做的比较成熟的平台为<strong>花生日记</strong>，当前发展势头比较猛的有<strong>淘小铺</strong>和<strong>芬香</strong>。</p><p>其中，花生日记为综合性的导购平台，淘小铺聚焦阿里系商品（与淘宝强结合），芬香聚焦京东系商品（与京东+微信强结合）。</p><p>友情提示，该模式裂变效果很吓人，请不要轻易测试。</p></blockquote><h4 id="跨境电商"><a href="#跨境电商" class="headerlink" title="跨境电商"></a>跨境电商</h4><blockquote><p>据《2018年度中国跨境电商市场数据监测报告》显示，2018年中国跨境电商交易规模达9万亿元，同比增长11.6%。其中，出口占比达到78.9%，进口比例21.1%。</p><p>目前除头部电商企业外，出口领域做的比较好的有<strong>shopee、Akulaku、Lazada</strong>等，该类型电商的运营模式其实可以完全参考国内主流电商的操盘思路（<strong>店群或精细化运营</strong>），同时结合所在站点的用户习惯；进口领域主要集中在头部电商平台，如<strong>天猫国际、京东国际、网易考拉</strong>等，同时垂直领域<strong>洋码头</strong>做的还不错。</p><p>以洋码头为例，“买手商家制”是其最核心的优势。洋码头主打全球化商品，笼盖83个国家和区域的80万件不同商品，拥有高达6万名的专业买手,他们当中不乏一些网络红人和专业买家。这些人都为洋码头实现全球个性化的消费推荐提供了一个更好的载体,同时也是捍卫商品源头品质，提升海外购物体验的重要后盾。</p></blockquote><h4 id="小程序电商"><a href="#小程序电商" class="headerlink" title="小程序电商"></a>小程序电商</h4><blockquote><p>随着微信之父张小龙正式宣布小程序将于2017年1月9日正式上线以后，基于小程序生态的电商模式层出不穷，头部的PDD、JD等自带流量自不必说，咱们重点探讨“专注微信品效营销”的小电铺。</p><p>该平台自诩“微信生态最大的小程序电商服务平台”，向上接入了1000+品牌的10万+SKU(销售属性)，向下发展了3000+自媒体，拥有10亿+的日PV(展现量PV：该商品被浏览的次数)。</p><p>另外，值得关注的是今年全新上线的“腾讯智慧零售”小程序，作为去中心化流量分发平台+私域流量导流平台，同时具备基于LBS的产品能力，腾讯智慧零售未来的想象空间非常大。</p></blockquote><p>注:<strong>LBS（Location-based service）是一种增值服务，是在确定用户位置的前提下为固定或者移动的用户提供各种与位置相关的服务。</strong>搭建线上门店，依靠平台的LBS推荐机制获取线上流量；发起营销活动，通过LBS精准广告投放进行引流，线上沟通，线下交易；</p><h4 id="尾货分销模式"><a href="#尾货分销模式" class="headerlink" title="尾货分销模式"></a>尾货分销模式</h4><blockquote><p>该模式和第七种导购模式完全不同，尾货分销是指仅面向B端或小B客户，提供品牌商品的分销能力，类似于阿里巴巴。目前做的比较好的有主打“品牌分销商首选”的<strong>爱库存</strong>。</p><p>运营模式为向上招募品牌商家，由品牌商家提供商品（折扣尾货）与物流服务，向下付费招募分销商（仅1级），平台负责指导分销商运营，由分销商负责销售。平台与分销商按一定比例分配商品差价。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;传统电商&quot;&gt;&lt;a href=&quot;#传统电商&quot; class=&quot;headerlink&quot; title=&quot;传统电商&quot;&gt;&lt;/a&gt;传统电商&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;传统电商平台一般有淘宝/天猫,京东,苏宁,唯品会,网易考拉,网易严选,寺库,小米有品,什么值得买&lt;</summary>
      
    
    
    
    
    <category term="电商" scheme="https://a-little-sweet.github.io/tags/%E7%94%B5%E5%95%86/"/>
    
  </entry>
  
  <entry>
    <title>外挂标签引入</title>
    <link href="https://a-little-sweet.github.io/posts/98c6183b.html"/>
    <id>https://a-little-sweet.github.io/posts/98c6183b.html</id>
    <published>2022-11-22T15:13:08.000Z</published>
    <updated>2022-11-23T13:32:48.382Z</updated>
    
    <content type="html"><![CDATA[<h3 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式:&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs, 2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br><span class="line"></span><br><span class="line">带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line">带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line">带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line">带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line">键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line">密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><p><p><p><p></p><h3 id="段落文本"><a href="#段落文本" class="headerlink" title="段落文本"></a>段落文本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式:&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">字体:logo, code</span><br><span class="line">颜色:&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;</span><br><span class="line">大小: small, h4, h3, h2, h1, large, huge, ultra</span><br><span class="line">对齐方向: left, center, right</span><br><span class="line">彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line">超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><p><p><p><p></p><h3 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式:&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;默认情况&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;行内文本样式-text&quot;&gt;&lt;a href=&quot;#行内文本样式-text&quot; class=&quot;headerlink&quot; title=&quot;行内文本样式 text&quot;&gt;&lt;/a&gt;行内文本样式 text&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>随机动漫Api</title>
    <link href="https://a-little-sweet.github.io/posts/d3d28240.html"/>
    <id>https://a-little-sweet.github.io/posts/d3d28240.html</id>
    <published>2022-11-22T14:13:37.000Z</published>
    <updated>2022-11-22T15:08:22.806Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>动漫API</p></div><p><p><br> <a href="https://img.xjh.me/random_img.php?type=bg&amp;return=302">https://img.xjh.me/random_img.php?type=bg&amp;return=302</a></p><p><p><br><a href="https://air.moe/ranimg/api.php">https://air.moe/ranimg/api.php</a></p><p><p><br><a href="https://imgapi.xl0408.top/index.php">https://imgapi.xl0408.top/index.php</a></p><p><p><br><a href="https://www.dmoe.cc/random.php">https://www.dmoe.cc/random.php</a></p><p><p><br><a href="https://api.hanximeng.com/ranimg/api.php">https://api.hanximeng.com/ranimg/api.php</a></p><p><p><br><a href="https://api.btstu.cn/sjbz/?lx=dongman">https://api.btstu.cn/sjbz/?lx=dongman</a></p><p><p><br><a href="https://www.dmoe.cc/random.php">https://www.dmoe.cc/random.php</a></p><p><p><br><a href="https://api.ghser.com/random/api.php">https://api.ghser.com/random/api.php</a></p><p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tip home&quot;&gt;&lt;p&gt;动漫API&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;p&gt;&lt;br&gt; &lt;a href=&quot;https://img.xjh.me/random_img.php?type=bg&amp;amp;return=302&quot;&gt;https://img.xjh.me/r</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>for循环</title>
    <link href="https://a-little-sweet.github.io/posts/3f209729.html"/>
    <id>https://a-little-sweet.github.io/posts/3f209729.html</id>
    <published>2022-11-20T11:00:00.000Z</published>
    <updated>2022-11-22T14:52:08.771Z</updated>
    
    <content type="html"><![CDATA[<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (循环变量初始化1;循环条件2;循环变量迭代3) &#123;</span><br><span class="line"> 代码体4;</span><br><span class="line"> break;//执行到break跳出整个for循环</span><br><span class="line"> continue;//执行到continue跳出这次循环</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">循环顺序  ：执行一次1，2，4，3，2，4，3 ……</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li><p>循环条件是返回的一个布尔值的表达式</p></li><li><p>for(;循环判断条件;)中的初始化和变量迭代可以写到其他地方，但是两边的分号不能省略</p></li><li><p>循环初始值，可以有多条初始化语句，但类型必须一样</p></li><li><p>循环变量迭代，也可以有多条语句，逗号分隔</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i = 2; 将初始变量放在for循环外，可以增大i变量的作用域</span><br><span class="line">for(;i&lt;=5;i++) &#123;</span><br><span class="line">System.out.println(&quot;hello,world&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//求打印所有9的倍数；并将其个数统计，及总和</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line"> //定义变量number用来接收键盘值</span><br><span class="line">Scanner scanner= new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入一个数字&quot;);</span><br><span class="line">int number = scanner.nextInt();</span><br><span class="line">        int s = 0;</span><br><span class="line">int count = 0;</span><br><span class="line">treble = 9; //treble是倍数</span><br><span class="line"></span><br><span class="line">for(int i=1;i&lt;=number;i++) </span><br><span class="line">&#123;</span><br><span class="line">if(i % treble == 0) </span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;i=&quot;+i);</span><br><span class="line">s++;</span><br><span class="line">count+=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;s=&quot;+s);</span><br><span class="line">System.out.println(&quot;count=&quot;+count);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//求出所有队伍对阵打乒乓的各种可能</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line">Scanner scanner=  new Scanner(System.in); </span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入最大值&quot; );</span><br><span class="line">int number = scanner.nextInt();</span><br><span class="line"></span><br><span class="line"> int count=0;</span><br><span class="line">//for (  int i=0; i&lt;(number/2+1); i++)</span><br><span class="line">for (  int i=0; i &lt; number; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">if (i&lt;(number/2+1))</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(i + &quot;+&quot; + (number-i) + &quot;=&quot;+number );</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;一共有&quot; + count + &quot;种可能&quot; );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//九九乘法表</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line"></span><br><span class="line">for( int i=1;i&lt;10;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(int k=1;k&lt;=i;k++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.print(k+&quot;x&quot;+i+&quot;=&quot;+(k*i)+&quot;  &quot;); </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//倒立九九乘法表</span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line"></span><br><span class="line">for( int i=9;i&gt;0;i--)</span><br><span class="line">&#123;</span><br><span class="line">for(int k=1;k&lt;=i;k++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.print(k+&quot;x&quot;+i+&quot;=&quot;+(k*i)+&quot;  &quot;);           </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="while循环控制"><a href="#while循环控制" class="headerlink" title="while循环控制"></a>while循环控制</h3><h4 id="基本语法：-1"><a href="#基本语法：-1" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 循环变量初始化 1  </span><br><span class="line">while  （循环条件2) &#123;</span><br><span class="line">循环体3；</span><br><span class="line">循环变量迭代4；</span><br><span class="line">&#125;</span><br><span class="line">流程：1 &gt; 2 &gt; 3 &gt; 4 &gt; 2 &gt; 3 &gt; 4</span><br></pre></td></tr></table></figure><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//实现1-100，以内被3整除的数</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line">int i =1;</span><br><span class="line">    while(i&lt;=100)</span><br><span class="line">    &#123;</span><br><span class="line">            if(i%3 == 0) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while循环控制"><a href="#do-while循环控制" class="headerlink" title="do-while循环控制"></a>do-while循环控制</h3><h4 id="基本语法：-2"><a href="#基本语法：-2" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 循环变量初始化1</span><br><span class="line"> do&#123;</span><br><span class="line">循环体2；</span><br><span class="line">循环变量迭代3；</span><br><span class="line">&#125;while（循环条件4); </span><br><span class="line">执行顺序 1，2，3，4，2，3，4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多重循环控制"><a href="#多重循环控制" class="headerlink" title="多重循环控制"></a>多重循环控制</h3><ol><li>将一个循环体放入另一个循环中，就形成了嵌套循环。 for，while，do while 均可作为内外循环。</li><li>嵌套循环 就是<strong>将内层循环当成循环体</strong>，只有内层循环条件为false，结束内层循环，结束外层当前的一次循环；当外层条件还是T，则再进入内部循环进行循环，直到内部条件再次false，跳出内部，跳出外部当次循环。</li><li>设置外层循环次数位m次，内层为n次，则内部循环体实际需要执行m*n次</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//统计3个班学生的平均值，各班及格人数</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line">Scanner scanner= new Scanner(System.in);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">double   Sum=0;//三个班级成绩总和</span><br><span class="line">   </span><br><span class="line">for(int m=1;m&lt;=3;m++) &#123; // m 代表班级</span><br><span class="line"></span><br><span class="line">double sum=0; //一个班级成绩总和</span><br><span class="line">int count =0; //计数器</span><br><span class="line"></span><br><span class="line">      for(int i=1;i&lt;6;i++) &#123; // i 代表学生</span><br><span class="line"></span><br><span class="line">System.out.println(m+&quot;班的学生，请输入你的成绩&quot;);</span><br><span class="line">double scores = scanner.nextDouble();//定义一个变量scores用于接收成绩</span><br><span class="line">if(scores &gt;=60) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum+=scores;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(m+&quot;班的平均成绩&quot;+(sum / 5)+&quot; 及格人数是&quot;+count+&quot;\n&quot;);</span><br><span class="line">Sum +=sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;三个班级的平均成绩是&quot;+(Sum / 15));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//打印金字塔</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line">//外循环控制行数，内部两个循环依次打印 空格+*</span><br><span class="line">for( int i=1;i&lt;=6;i++) &#123;  //假设i代表行数</span><br><span class="line">for(int  m=1;m&lt;=6-i;m++) &#123;  //m控制空格数</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">for(int n=1;n&lt;=2*i-1;n++) &#123; //n控制*的个数</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//打印空心金字塔</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line">int  totalLevel=6;//层数，先死后活</span><br><span class="line">//外循环控制行数，内部两个循环依次打印 空格+*</span><br><span class="line">for( int i=1;i&lt;=totalLevel;i++) &#123;  //假设i代表行数</span><br><span class="line">for(int  m=1;m&lt;=totalLevel-i;m++) &#123;  //m控制空格数</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">for(int n=1;n&lt;=2*i-1;n++) &#123; //n控制*的个数</span><br><span class="line">if(( n==1 || n==2*i-1) || i==totalLevel)&#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line"></span><br><span class="line">                     &#125;</span><br><span class="line"> else</span><br><span class="line">System.out.print(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;for循环&quot;&gt;&lt;a href=&quot;#for循环&quot; class=&quot;headerlink&quot; title=&quot;for循环&quot;&gt;&lt;/a&gt;for循环&lt;/h3&gt;&lt;h4 id=&quot;基本语法：&quot;&gt;&lt;a href=&quot;#基本语法：&quot; class=&quot;headerlink&quot; title=&quot;基本语</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>标识符的命名规则规范</title>
    <link href="https://a-little-sweet.github.io/posts/cb2b897.html"/>
    <id>https://a-little-sweet.github.io/posts/cb2b897.html</id>
    <published>2022-11-11T22:41:36.261Z</published>
    <updated>2022-11-22T14:52:32.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标识符的命名规则规范"><a href="#标识符的命名规则规范" class="headerlink" title="标识符的命名规则规范"></a>标识符的命名规则规范</h3><ol><li><p>java 对各种变量，方法，类命名时使用的字符称为标识符</p></li><li><p>凡事自己可以起名字的地方都是标识符</p></li></ol><h4 id="标识符的命名规则"><a href="#标识符的命名规则" class="headerlink" title="标识符的命名规则"></a>标识符的命名规则</h4><ol><li>由26个英文字母大小写， 0-9  ，_或$组成</li><li>数字不能开头</li><li><strong>不可以使用关键字（stastic）和保留字（goto），但可以包含他们。</strong></li><li><strong>java中严格区分大小写</strong>，长度无限制</li><li>标识符不能有空格</li></ol><h4 id="标识符的命名规范"><a href="#标识符的命名规范" class="headerlink" title="标识符的命名规范"></a>标识符的命名规范</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://pic.diydoutu.com/bq/1994.gif" alt="斧头帮帮主琛哥：这个就叫专业GIF动图-斧头帮帮主,功夫,Kung Fu Hustle,周星驰,香港电影"></h4><ol><li><p>包名 ： 所有单词小写     puda.fike.loke包</p></li><li><p>类名/接口名：大驼峰法，所有首字母大写          StudentResult</p></li><li><p>变量名/方法名 ： 驼峰法（小驼峰），第一个单词小写，第二个大写，彼此类推。studentResult</p></li><li><p>常量名 ：所有字母都大写。每个单词用下划线拼接  Student_Result</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;标识符的命名规则规范&quot;&gt;&lt;a href=&quot;#标识符的命名规则规范&quot; class=&quot;headerlink&quot; title=&quot;标识符的命名规则规范&quot;&gt;&lt;/a&gt;标识符的命名规则规范&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;java 对各种变量，方法，类命名时使用的字符称为标识符&lt;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>switch分支结构</title>
    <link href="https://a-little-sweet.github.io/posts/254834b.html"/>
    <id>https://a-little-sweet.github.io/posts/254834b.html</id>
    <published>2022-11-11T22:41:36.259Z</published>
    <updated>2022-11-22T14:52:27.222Z</updated>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220123155741868.png" alt="image-20220123155741868"></p><h3 id="switch分支结构"><a href="#switch分支结构" class="headerlink" title="switch分支结构"></a>switch分支结构</h3><p><img src="C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220123163555813.png" alt="image-20220123163555813"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">格式</span><br><span class="line"></span><br><span class="line">switch(表达式)</span><br><span class="line">&#123;</span><br><span class="line">case 常量1:   //当表达式的值等于常量1，就执行语句块1</span><br><span class="line">语句块1；</span><br><span class="line">break;      //表示退出switch结构，若没有break，则穿透到语句块2，并执行下去，直到break退出</span><br><span class="line">case 常量2:</span><br><span class="line">语句块2；</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">…………</span><br><span class="line">case 常量n:</span><br><span class="line">语句块n;</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">default:  //如果上面都没匹配上，则执行default</span><br><span class="line">default 语句块;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p>表达式数据类型，应和case后的<strong>数据类型一样</strong>，</p><p>或者可以<strong>自动转换</strong>可以相互比较类型的，比如输入的是字符，而常量是int</p></li><li><p>switch（表达式）中的表达式的返回值必须是：（byte,short,int,char,String，enum[枚举]）</p></li><li><p>case 子句中的值<strong>必须是常量</strong>，而不能是变量</p></li><li><p><strong>default 子句是可选的</strong>，当没有匹配的case时，执行default</p></li><li><p>break语句是用来帮助一个case分支跳出switch语句，<strong>如果没写break，则会穿透执行</strong>下一个case中的语句块，一直执行下去，直到出现break/执行完default语句也自动跳出</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">switch(a)//首先表达式满足 byte,short,int,char,enum[枚举]，String六个其中之一</span><br><span class="line">&#123;</span><br><span class="line">    case 50 :   //也是可以的，字符a会自动转换为97</span><br><span class="line">System.out.println(&quot;&quot;);</span><br><span class="line">break;</span><br><span class="line">case &#x27;d&#x27;+1 : //也行，结果还是常量，且数据类型和switch中的一致</span><br><span class="line">System.out.println(&quot;&quot;);</span><br><span class="line">break;</span><br><span class="line">default  :  //可以没有</span><br><span class="line">                System.out.println(&quot;&quot;);</span><br></pre></td></tr></table></figure><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//接收一个字符（a-g），分别代表抽奖礼品</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Scanner scanner= <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个字符【a-g】&quot;</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">letter</span> <span class="operator">=</span>  scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(letter)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;中了一等奖&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;中了二等奖&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;中了三等奖&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line"> System.out.println(<span class="string">&quot;纪念奖&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//使用switch 打印月份的季节</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class text</span><br><span class="line">&#123;</span><br><span class="line">public static void main (String[] args)</span><br><span class="line">&#123;</span><br><span class="line">Scanner scanner= new Scanner(System.in);</span><br><span class="line">int mounth = scanner.nextInt();</span><br><span class="line"></span><br><span class="line"> switch (mounth)</span><br><span class="line"> &#123;</span><br><span class="line">case 3:</span><br><span class="line">case 4:</span><br><span class="line">case 5:</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">              break;</span><br><span class="line"> </span><br><span class="line"> case 12:</span><br><span class="line"> case 1:</span><br><span class="line"> case 2:</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">              break;</span><br><span class="line"> </span><br><span class="line"> case 6:</span><br><span class="line"> case 7:</span><br><span class="line">case 8:</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">              break;</span><br><span class="line">  </span><br><span class="line"> case 9:</span><br><span class="line">case 10:  </span><br><span class="line">case 11:</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">              break;</span><br><span class="line">  </span><br><span class="line">  default :</span><br><span class="line">  System.out.println(&quot;你输入的有误&quot;);</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220123155741868.png&quot; alt=&quot;image-20220123155741868&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>super关键字</title>
    <link href="https://a-little-sweet.github.io/posts/f6ea766.html"/>
    <id>https://a-little-sweet.github.io/posts/f6ea766.html</id>
    <published>2022-11-11T22:41:36.247Z</published>
    <updated>2022-11-22T14:52:23.443Z</updated>
    
    <content type="html"><![CDATA[<h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>概念: super代表父类的引用,用于访问父类的属性,方法,构造器</p><h3 id="使用super的好处"><a href="#使用super的好处" class="headerlink" title="使用super的好处"></a>使用super的好处</h3><ol><li><p>调用父类构造器的好处,分工明确,<strong>父类属性由父类初始化,子类的属性由子类初始化</strong></p></li><li><p>当子类中有和父类的方法/属性重名时,为了访问父类的成员,必须通过super,如果没有重名,super,this直接访是一样的效果</p></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>子类调用属性和方法,一般从子类,父类,Object依次找属性和方法</li><li>super 的访问不限于直接父类,super访问遵循就近原则</li><li>如果本类有属性/方法,则直接调用本类,若没有,则找父类,依次找下去,但中间不能有private卡住,否则的话,不能直接调用,只能<strong>间接调用</strong></li></ol><h3 id="super和this的区别"><a href="#super和this的区别" class="headerlink" title="super和this的区别"></a>super和this的区别</h3><div class="table-container"><table><thead><tr><th style="text-align:left">区别点</th><th>this</th><th>super</th></tr></thead><tbody><tr><td style="text-align:left">访问属性</td><td>先访问本类中的属性,如果没有则从父类中继续查找</td><td>直接访问父类中的属性,如果没有则从父类的父类中继续查找</td></tr><tr><td style="text-align:left">调用方法</td><td>先访问本类中的方法,如果没有则从父类的父类中继续查找</td><td>直接访问父类中的方法,如果没有则从父类的父类中继续查找</td></tr><tr><td style="text-align:left">调用构造器</td><td><code>this(形参列表);</code>调用本类构造器,只能在构造器中调用,而且必须是首行</td><td><code>super(形参列表);</code>调用父类构造器,只能在构造器中调用,而且必须是首行,this&amp;super不能同时</td></tr><tr><td style="text-align:left">特殊含义</td><td>表示当前对象</td><td>子类中访问父类对象</td></tr></tbody></table></div><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol><li>访问父类的属性,但不能访问父类的prive属性 <code>super.属性名</code></li><li>访问父类的方法,不能访问父类的private方法<code>super.方法名</code></li><li>访问父类的构造器,super(参数列表),只能放在构造器的第一句</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//子类</span><br><span class="line">package com.hspedu;</span><br><span class="line"></span><br><span class="line">public class Test extends A &#123;</span><br><span class="line">public int n1;//不同类可以同名属性和方法,就算是子类父类也不影响,不过调用时得特别指定</span><br><span class="line">public int n2;</span><br><span class="line">    public void showInfo() &#123;</span><br><span class="line">        //使用super访问父类属性</span><br><span class="line">        System.out.println(super.n1+super.n2+super.n3);</span><br><span class="line">    &#125;</span><br><span class="line">    public void ok() &#123;</span><br><span class="line">        //使用super访问父类方法</span><br><span class="line">        super.root1();</span><br><span class="line">        super.root2();</span><br><span class="line">        super.root3();</span><br><span class="line">    &#125;</span><br><span class="line">    //调用父类的talk()方法的方式[子类中也未包含同名同参数的talk方法]&amp;&amp; 调用属性也是同理</span><br><span class="line">    talk();//如果本类有,则直接调用本类,若没有,则找父类,依次找下去,但中间不能有private卡住,否则的话,不能直接调用,只能间接调用</span><br><span class="line">    this.talk();//等价于talk();</span><br><span class="line">    super.talk();//区别于this.talk(),talk(),super是直接从父类开始找,后者从子类开始找</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    public  Test()&#123;</span><br><span class="line">        //使用子类构造器访问父类构造器</span><br><span class="line">        super();//如果调用默认的,可以不写,父类的构造器都会被子类的构造器所调用</span><br><span class="line">        super(&quot;SiDun.Lei&quot;);</span><br><span class="line">        super(&quot;Jack&quot;,23);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//父类</span><br><span class="line">package com.hspedu;</span><br><span class="line"></span><br><span class="line">public class A &#123;</span><br><span class="line">    public int n1;</span><br><span class="line">    int n2;</span><br><span class="line">    protected int n3;</span><br><span class="line">    private int n4;</span><br><span class="line"></span><br><span class="line">    public A() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public A(String name ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public A(String name,int salary ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public  void talk() &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    public  void  root1() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    void  root2() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    protected  void  root3() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    private  void  root4() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;super关键字&quot;&gt;&lt;a href=&quot;#super关键字&quot; class=&quot;headerlink&quot; title=&quot;super关键字&quot;&gt;&lt;/a&gt;super关键字&lt;/h3&gt;&lt;p&gt;概念: super代表父类的引用,用于访问父类的属性,方法,构造器&lt;/p&gt;
&lt;h3 id=&quot;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java的多态</title>
    <link href="https://a-little-sweet.github.io/posts/215392d1.html"/>
    <id>https://a-little-sweet.github.io/posts/215392d1.html</id>
    <published>2022-11-11T22:41:36.233Z</published>
    <updated>2022-11-22T14:52:19.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java的多态"><a href="#java的多态" class="headerlink" title="java的多态"></a>java的多态</h3><h3 id="引入的原因"><a href="#引入的原因" class="headerlink" title="引入的原因"></a>引入的原因</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Master master = new Master(&quot;tim&quot;);</span><br><span class="line">        Dg dog = new Dog(&quot;金毛&quot;);</span><br><span class="line">        Cat cat = new Cat(&quot;蓝猫&quot;);</span><br><span class="line">        Fish fish = new Fish(&quot;小鱼干&quot;);</span><br><span class="line">        Bone bone = new Bone(&quot;鸡锁骨&quot;);</span><br><span class="line">        master.feed(dog,bone);</span><br><span class="line">        master.feed(cat,fish);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public  void  feed(Dog dog,Bone bone) &#123;</span><br><span class="line">       System.out                                                                                                                    println(name+&quot;给&quot;+dog.getName()+&quot;喂&quot;+bone.getName());</span><br><span class="line">   &#125;</span><br><span class="line">   public  void  feed(Cat cat,Fish fish) &#123;</span><br><span class="line">       System.out.println(name+&quot;给&quot;+cat.getName()+&quot;喂&quot;+fish.getName());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>随着多个动物,食物的增加,对于代码整体而言,<strong>代码复用性不高,不利于代码维护</strong>,所以引入<strong>多态</strong></p><p><p><p><p></p><h3 id="多态-羊皮狼"><a href="#多态-羊皮狼" class="headerlink" title="多态(羊皮狼)"></a>多态(羊皮狼)</h3><p>方法或对象具有多种形态,是面对对象的第三特征,多态是<strong>建立在封装和继承基础之上的</strong></p><p>(1)方法的多态</p><p>​         重载和重写就体现多态</p><p>(2)对象的多态(核心)</p><ol><li>一个对象的编译类型和运行类型可以不一致</li></ol><p><code>Animal animal = new Dog();</code></p><ol><li>编译类型在定义对象时,就确定了不能改变</li><li>运行类型是可以变化的</li><li>编译类型看定义时 <strong>等号的最左边</strong>, 运行类型看  <strong>等号的最右边</strong></li></ol><blockquote><p><code>Animal animal = new Dog();</code><br><code>animal</code>  只是对象引用, new Dog() 才是对象</p><p>对象的多态: 可以让<strong>一个父类的引用</strong> 指向 <strong>一个子类的对象</strong></p><p><code>animal</code>的编译类型是<code>Animal</code>,运动类型是<code>Dog</code></p><p>  <code>animal= new Cat();</code>   <code>animal</code> 的编译类型是<code>Animal</code>,运动类型变成了<code>Cat</code></p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>1.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.Poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line">public class Dog extends Animal&#123;</span><br><span class="line"></span><br><span class="line">    public void cry() &#123;</span><br><span class="line">        System.out.println(&quot;狗:你在狗叫什么...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.Poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line">public class Cat extends Animal&#123;</span><br><span class="line"></span><br><span class="line">    public void cry() &#123;</span><br><span class="line">        System.out.println(&quot;猫:你在猫叫什么&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.Poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line">public class Animal &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Animal animal_1 = new Animal();//编译类型是Animal,运行类型是Animal</span><br><span class="line">        Animal animal_2 = new Dog();//编译类型是Animal,运行类型是Dog</span><br><span class="line">        animal_2.cry();//此时的编译类型是Animal,运行类型是Dog</span><br><span class="line">        animal_2 = new Cat();//此时的编译类型仍然是Animal,但运行类型变成了Cat</span><br><span class="line">        animal_2.cry();//此时的编译类型是Animal,运行类型是Cat</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public  void  cry() &#123;</span><br><span class="line">        System.out.println(&quot;Animal动物在叫....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><p><p><p><p><br>2.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//animal 编译类型是 Animal,可以指向Animal子类的对象</span></span><br><span class="line">    <span class="comment">//food 编译类型是 Food,可以指向Food子类的对象</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Animal animal,Food food)</span> &#123;  System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;给&quot;</span>+animal.getName()+<span class="string">&quot;喂&quot;</span>+food.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Master master = new Master(&quot;Jack&quot;);</span><br><span class="line">        Dog dog  = new Dog(&quot;金毛&quot;);</span><br><span class="line">        Cat cat  = new Cat(&quot;蓝猫&quot;);</span><br><span class="line">        Fish fish = new Fish(&quot;小鱼干&quot;);</span><br><span class="line">        Bone bone = new Bone(&quot;鸡锁骨&quot;);</span><br><span class="line"></span><br><span class="line">        master.feed(dog ,bone);</span><br><span class="line">        master.feed(cat,fish);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态的向上转型"><a href="#多态的向上转型" class="headerlink" title="多态的向上转型"></a>多态的向上转型</h3><ol><li><p>本质:父类的引用指向了子类的对象</p></li><li><p>语法: <code>父类类型 引用名 = new 子类类型();</code></p></li><li><p>特点:编译类型看左边,运行类型看右边</p><p>可以调用父类中的所有成员(需要看访问权限),不能调用子类中特有成员</p><p>最终运行看子类的具体实现效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ss</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">sss</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> <span class="keyword">extends</span>  <span class="title class_">ss</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;动物&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cat</span>  <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;    <span class="comment">//方法重写</span></span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">catMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cat</span>();</span><br><span class="line">       <span class="comment">//animal.catMouse() 不能调用,编译后animal只能调用自己成员</span></span><br><span class="line">        <span class="comment">// 因为在编译阶段,能调用哪些成员,是由编译类型来决定的</span></span><br><span class="line">        animal.eat();<span class="comment">//猫吃鱼</span></span><br><span class="line">        <span class="comment">//编译类型是父类,执行父类的成员,但运行时按照特指的子类执行重写父类的方法,所以子类重写是关键,</span></span><br><span class="line">        <span class="comment">// 而且执行过程中遵循就近原则,先找特指运行的子类,再依次往上找,直到找到为止</span></span><br><span class="line">        animal.sleep();</span><br><span class="line">        animal.run();</span><br><span class="line">        animal.show();</span><br><span class="line">        <span class="comment">//特指的运行子类找不到该方法,就会向编译环境父类Animal找仍未果,再从上级父类直到找到为止</span></span><br><span class="line">        animal.sss(); <span class="comment">//sss</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>   为了让父类指向子类,并且父类引用也可以访问子类的所有成员(除特殊权限)</p><ol><li>语法<code>子类类型</code> 引用名 = (子类类型) 父类引用`;</li><li>只能强转父类的引用,不能强转父类的对象</li><li>要求父类的引用必须指向是当前目标类型的对象</li><li><p>可以调用子类类型中的所有成员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cat</span>();</span><br><span class="line">       <span class="comment">//animal.catMouse() 不能调用,编译后animal只能调用自己成员</span></span><br><span class="line">        <span class="comment">//如果想调用只能使用向下转型</span></span><br><span class="line">        <span class="comment">// 向上转型,访问范围看父类的成员,执行看子类;而向下转型,访问范围看子类的成员,执行看子类</span></span><br><span class="line"></span><br><span class="line">        <span class="type">cat</span> <span class="variable">c_at</span> <span class="operator">=</span> (cat) animal;<span class="comment">//和new的区别是,没有创建新的对象</span></span><br><span class="line">        c_at.catMouse();<span class="comment">//猫抓老鼠</span></span><br><span class="line">        c_at.eat();<span class="comment">//猫吃鱼</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3></li><li><p>属性没有重写之说,<strong>属性的值看编译类型</strong></p></li><li><p><code>`instanceOf</code>比较操作符,用于判断<strong>对象的运行类型</strong>是否为xx类型或者xx类型的子类型 </p></li><li><p>动态绑定机制 </p><p>&gt;<br>&gt;</p><blockquote><p>1.当调用对象方法时,该方法会和该对象的内存地址和运行类型绑定</p><p>2.当调用属性时,没有动态绑定机制,哪里声明哪里使用</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;java的多态&quot;&gt;&lt;a href=&quot;#java的多态&quot; class=&quot;headerlink&quot; title=&quot;java的多态&quot;&gt;&lt;/a&gt;java的多态&lt;/h3&gt;&lt;h3 id=&quot;引入的原因&quot;&gt;&lt;a href=&quot;#引入的原因&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java的包</title>
    <link href="https://a-little-sweet.github.io/posts/31f532fa.html"/>
    <id>https://a-little-sweet.github.io/posts/31f532fa.html</id>
    <published>2022-11-11T22:41:36.225Z</published>
    <updated>2022-11-22T14:52:14.839Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java的包"><a href="#Java的包" class="headerlink" title="Java的包"></a>Java的包</h3><h4 id="包的作用"><a href="#包的作用" class="headerlink" title="包的作用"></a>包的作用</h4><blockquote><ol><li>用于区分相同名字的类</li><li>当类很多时,可以很好的管理类[Java Api]</li><li>控制访问范围</li></ol></blockquote><h3 id="常用的包"><a href="#常用的包" class="headerlink" title="常用的包"></a>常用的包</h3><blockquote><p>java.lang.* //lang包是基本包,默认引入,不需要再引入</p><p>java.util.* //util包,系统提供的工具包,工具类,使用Scanner</p><p>java.net.* //网络包,网络开发</p><p>java.awt.* //是做java的界面开发,Gui</p></blockquote><h3 id="包的命名"><a href="#包的命名" class="headerlink" title="包的命名"></a>包的命名</h3><blockquote><p>命名规则: 只包含数字,字母,下划线,小圆点,但不能是关键字或保留字</p><p>命名规范:一般是小写字母+小圆点 , eg: com.公司名.项目名.业务模块名</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>引入包语法<code>import com.hxs.pkg</code> ,引入包是为了使用该包下的类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.pkg;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays; //引入包util下的Arrays类,用于排序</span><br><span class="line">//import java.util.*;不建议导入包util下所有的类,那样只会影响效率</span><br><span class="line">public class import01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;1, 4, 2, 6, -1, 9, 0&#125;;</span><br><span class="line">        Arrays.sort(arr); //</span><br><span class="line">        for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+&quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><ol><li><p><code>package</code>的作用是<strong>声明当前类所在的包</strong>,需要放在类的最上面,一个类中最多只有一句package</p></li><li><p>import指令放在package与类定义之间,可以有多句且没有顺序要求</p></li></ol></blockquote><p><p><p><p></p><h3 id="包的本质"><a href="#包的本质" class="headerlink" title="包的本质"></a>包的本质</h3><p>实际上包的本质就是<strong>创建不同的文件夹</strong>用来<strong>存放类</strong></p><p><img src="C:\Users\hhh\Desktop\default1.png" alt="default1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package pack1; //mm类在包pack1中 ; package 关键字,表示打包</span><br><span class="line"></span><br><span class="line">import com.xiaoming.dog;//com.xiaoming表示包名,com是一级目录,xiaoming是二级目录,dog是类</span><br><span class="line">//import com.xiaoqiang.dog; 不能同时引相同的类名</span><br><span class="line">    public class mm &#123;</span><br><span class="line">        public static void main(String[] args) &#123;</span><br><span class="line">        dog d = new dog(); //创建com.xiaoming包下的dog类 对象d</span><br><span class="line"></span><br><span class="line">        com.xiaoqiang.dog d1 = new com.xiaoqiang.dog();//如果想引入,创建com.xiaoqiang包下的dog类 对象d1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Java的包&quot;&gt;&lt;a href=&quot;#Java的包&quot; class=&quot;headerlink&quot; title=&quot;Java的包&quot;&gt;&lt;/a&gt;Java的包&lt;/h3&gt;&lt;h4 id=&quot;包的作用&quot;&gt;&lt;a href=&quot;#包的作用&quot; class=&quot;headerlink&quot; title=&quot;包</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>方法传参机制</title>
    <link href="https://a-little-sweet.github.io/posts/a3493d7e.html"/>
    <id>https://a-little-sweet.github.io/posts/a3493d7e.html</id>
    <published>2022-11-11T22:41:36.154Z</published>
    <updated>2022-11-22T14:57:04.482Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法传参机制"><a href="#方法传参机制" class="headerlink" title="方法传参机制"></a>方法传参机制</h3><ol><li><p>成员方法传递的是<strong>值拷贝</strong>，形参的任何改变不影响实参</p></li><li><p>调用方法会产生一个新栈</p></li><li><p>数组属于引用类型，会指向堆空间</p></li><li><p>引用类型（类,数组,接口）传递的不是值拷贝，而传递的是一个地址</p><p>而形参可以影响实参             </p></li><li><p>对象传递的也是地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//测试 A类中的方法传入（B类对象）参数，在A类的方法中改变B类对象，那么对象B是否变化</span><br><span class="line">//j结果   对象B会发生变化</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">    </span><br><span class="line">Person  p =new Person();</span><br><span class="line">p.name = &#x27;jack&#x27;;</span><br><span class="line">p.age = 10;</span><br><span class="line"></span><br><span class="line">B b = new B();</span><br><span class="line">b.mm(p);  //本质是将对象p的地址传给mn方法</span><br><span class="line"> System.out.print(&quot;main中的p.age=&quot;+ p.age) ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> class   Person &#123;</span><br><span class="line"> </span><br><span class="line"> String name;</span><br><span class="line"> int age;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> class B &#123;</span><br><span class="line"> </span><br><span class="line">public  void   mm (Person p) &#123;</span><br><span class="line">p.age  = 10000;</span><br><span class="line">/*思考如果 p=null ,则上述的结果p.age =10 ，</span><br><span class="line">因为这里的B类的mm方法在传入对象p时，新开的mm栈地址就指向堆中p的地址，</span><br><span class="line">而p=null，则将 mm栈地址指向空，这对堆中的p地址没有任何影响</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/*思考如果 p=new Person , p.age  = 10000;则结果p.age =10 ，</span><br><span class="line">因为这里的B类的mm方法在传入对象p时，新开的mm栈地址就指向堆中p的地址，</span><br><span class="line">而p=new Person，将在堆中创建一个新对象p，p.age=10000的赋值也给了新对象，</span><br><span class="line">当执行完此方法时,输出语句仍然在main栈中找到原本对象p的地址，指向堆中p对象中的p.age</span><br><span class="line">而创建的新对象p，没用就销毁了</span><br><span class="line">*/</span><br><span class="line">&#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;方法传参机制&quot;&gt;&lt;a href=&quot;#方法传参机制&quot; class=&quot;headerlink&quot; title=&quot;方法传参机制&quot;&gt;&lt;/a&gt;方法传参机制&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;成员方法传递的是&lt;strong&gt;值拷贝&lt;/strong&gt;，形参的任何改变不影响实参&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>作用域</title>
    <link href="https://a-little-sweet.github.io/posts/7a108a3c.html"/>
    <id>https://a-little-sweet.github.io/posts/7a108a3c.html</id>
    <published>2022-11-11T22:41:36.144Z</published>
    <updated>2022-11-22T15:08:51.583Z</updated>
    
    <content type="html"><![CDATA[<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ol><li>在java中,主要变量就是成员变量和局部变量</li><li>一般<strong>局部变量</strong>指的是成员方法中定义的变量</li><li>作用域的分为<strong>全局变量</strong>和<strong>局部变量</strong>,全局变量的作用域在整个类体 ;除了<strong>属性之外</strong>的都是局部变量,作用域只能用于某块</li><li><strong>全局变量可以不赋值</strong>,直接使用,有默认值,但<strong>局部变量没有默认值</strong>所以<strong>必须赋值</strong>, 才能使用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Cat&#123;</span><br><span class="line"></span><br><span class="line">int age=10;//全局变量,作用整个类体</span><br><span class="line"></span><br><span class="line">public void cry() &#123;</span><br><span class="line"></span><br><span class="line">//n 和 name 都是局部变量</span><br><span class="line">//n 和 name的作用域都在cry方法中</span><br><span class="line">int n =10;</span><br><span class="line">String name= &quot;jack&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public void  eat() &#123;</span><br><span class="line">System.out.println(&quot;猫的年龄&quot;+age); //此时可以用,age是类中的全局变量</span><br><span class="line">System.out.println(&quot;猫的名字&quot;+name); //不可以访问到,因为name是其他方法的局部变量</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li><strong>属性和局部变量可以重名</strong>,访问时遵循<strong>就近访问</strong></li><li>在同一个作用域中,比如在同一个方法中,定义的局部变量不能重名,比如说类中的变量和方法中的变量可以重名,同类中不同的方法也可以重名</li><li>属性生命周期长,伴随对象的创建而创建,伴随对象死亡而死亡,局部变量生命周期短,伴随它的代码块的执行而创建,伴随它的代码块的结束而死亡,比如方法调用时及结束  </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Cat&#123;</span><br><span class="line"></span><br><span class="line">int age=10;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line">public void cry() &#123;</span><br><span class="line">String name= &quot;jack&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public void  eat() &#123;</span><br><span class="line">String name  = &quot;liLing&quot; </span><br><span class="line">//name=liLing,对于cry和eat不同的作用域方法中,可以重名, 对于类和方法相同的变量,采取就近原则</span><br><span class="line">System.out.println(&quot;猫的年龄&quot;+age); //age=10</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>全局变量/属性可以被本类使用,或者其他类使用(通过对象调用)</li><li>局部变量只能在本类中对应的方法使用</li><li>全局变量/属性可以加修饰符,局部变量不可以加修饰符</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在java中,主要变量就是成员变量和局部变量&lt;/li&gt;
&lt;li&gt;一般&lt;strong&gt;局部变量&lt;/strong&gt;指的是成员</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>运算符优先级</title>
    <link href="https://a-little-sweet.github.io/posts/9393c5c.html"/>
    <id>https://a-little-sweet.github.io/posts/9393c5c.html</id>
    <published>2022-11-11T22:41:36.132Z</published>
    <updated>2022-11-22T15:08:38.032Z</updated>
    
    <content type="html"><![CDATA[<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>注意：只有单目运算符、赋值运算符是从右往左运算的。</p><p>运算等级：  <code>（）&#123;&#125;</code>   &gt;  算数运算符 &gt; 位移运算符 &gt; 比较运算符 &gt; 逻辑运算符 &gt; 三元运算符&gt; 赋值运算符</p><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">. ()   {}   ;  ,</th></tr></thead><tbody><tr><td style="text-align:left">R—&gt;L</td><td style="text-align:left">++  —-  ~  !(data type)</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">*  /  %</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">+  -</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">&gt;&gt;  &lt;&lt;  &gt;&gt;&gt;  位移</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">&lt;    &gt;    &lt;=   &gt;=    instanceof</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">==     !=</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">&amp;</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">^</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">\</td><td></td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">&amp;&amp;</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">\</td><td>\</td><td></td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">？ ：</td></tr><tr><td style="text-align:left">R—&gt;L</td><td style="text-align:left">=  *=  /=  %=</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">+=   -=   &lt;&lt;=  &gt;&gt;=</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">&gt;&gt;&gt;=   &amp;=   ^=    \</td><td>=</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;运算符优先级&quot;&gt;&lt;a href=&quot;#运算符优先级&quot; class=&quot;headerlink&quot; title=&quot;运算符优先级&quot;&gt;&lt;/a&gt;运算符优先级&lt;/h3&gt;&lt;p&gt;注意：只有单目运算符、赋值运算符是从右往左运算的。&lt;/p&gt;
&lt;p&gt;运算等级：  &lt;code&gt;（）&amp;#123;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>this关键字</title>
    <link href="https://a-little-sweet.github.io/posts/75f5b5c3.html"/>
    <id>https://a-little-sweet.github.io/posts/75f5b5c3.html</id>
    <published>2022-11-11T22:41:36.130Z</published>
    <updated>2022-11-22T15:08:40.124Z</updated>
    
    <content type="html"><![CDATA[<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>假如说构造器传入的形参和类的成员属性名字一样,则构造器就失去作用,所以引入this,什么是this?  <strong>java虚拟机给每个对象分配this,代表当前对象</strong></p><p>注意:<strong>哪个对象调用,this就代表哪个对象</strong></p><p>改版前</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person p2 = new Person(&quot;jack&quot;,20);//调用有参构造器,并初始化对象p2</span><br><span class="line">System.out.println(&quot;p2对象的名字&quot;+p2.name+&quot;p2对象的年龄&quot;+p2.age);//因为作用域的就近原则,则p2.name=null默认值,age=100</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class   Person &#123;</span><br><span class="line">int age=100;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public Person(String name, int age)&#123;//因为构造器与类都定义了相同变量的名字,所以调用采取就近原则</span><br><span class="line">name=name; //jack=jack</span><br><span class="line">age=age;//20=20</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改版后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person p = new Person(&quot;jack&quot;,20);//调用有参构造器,并初始化对象p</span><br><span class="line">System.out.println(&quot;p对象的名字&quot;+p.name+&quot;p对象的年龄&quot;+p.age);//p.name=jack,age=20</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class   Person &#123;</span><br><span class="line">int age=100;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public Person(String name, int age)&#123;//因为构造器与类都定义了相同变量的名字,所以调用采取就近原则</span><br><span class="line">this.name = name; //当前对象p的属性name=jack</span><br><span class="line">     this.age = age;//当前对象p的属性age=20</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><ol><li><p>this是一个对象,this可以访问本类的属性和方法,构造器</p></li><li><p>this用于区分当前类的属性和局部变量</p></li><li><p>访问成员方法的语法:` this.方法名(参数列表)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">class T&#123;</span><br><span class="line"></span><br><span class="line">public void  f1() &#123;</span><br><span class="line">System.out.println(&quot;Hello,world&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void  f2() &#123;</span><br><span class="line">//此时调用f1方法有两种 </span><br><span class="line"> f1();</span><br><span class="line"> this.f1();  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>访问构造器语法:<code>this(参数列表)</code>,<strong>注意只能在构造器中使用</strong></p><p>为什么这样写呢,为了<strong>区别</strong>对象this调用方法this.方法()</p><p>而且<strong>构造器调用构造器时,才能使用 this(参数)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">注意使用this从A构造器调用B构造器,this(参数)语句必须在A构造器的第一句话</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">T  t =new T();</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">class T&#123;</span><br><span class="line"></span><br><span class="line">public   T() &#123;  </span><br><span class="line">this(&quot;jack&quot;,18);</span><br><span class="line">System.out.println(&quot;Hello,world&quot;);</span><br><span class="line">//在无参构造器T()中调用 T(String name,int age)的构造器</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public T(String name,int age) &#123;</span><br><span class="line">System.out.println(&quot;public T(String name,int age)的构造器&quot;);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>this不能在类定义的外部使用,只能在类定义的方法中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">T  t =new T();</span><br><span class="line">        t.f1();</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">class T&#123;</span><br><span class="line"></span><br><span class="line">String name =&quot;jack&quot;;</span><br><span class="line">int age = 20;</span><br><span class="line"></span><br><span class="line">public   void  f1() &#123;  </span><br><span class="line">String name=&quot;Tom&quot;;</span><br><span class="line">System.out.println(name+age); //Tom 20</span><br><span class="line">System.out.println(this.name+this.age); // jack 20</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;this&quot;&gt;&lt;a href=&quot;#this&quot; class=&quot;headerlink&quot; title=&quot;this&quot;&gt;&lt;/a&gt;this&lt;/h3&gt;&lt;p&gt;假如说构造器传入的形参和类的成员属性名字一样,则构造器就失去作用,所以引入this,什么是this?  &lt;strong&gt;ja</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>跳转控制break的使用</title>
    <link href="https://a-little-sweet.github.io/posts/f2c69016.html"/>
    <id>https://a-little-sweet.github.io/posts/f2c69016.html</id>
    <published>2022-11-11T22:41:36.126Z</published>
    <updated>2022-11-22T15:09:11.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跳转控制break的使用"><a href="#跳转控制break的使用" class="headerlink" title="跳转控制break的使用"></a>跳转控制break的使用</h1><h3 id="break的使用"><a href="#break的使用" class="headerlink" title="break的使用"></a>break的使用</h3><ol><li><p>break 用于多层嵌套循环中，可以在<strong>循环条件不满足</strong>情况下<strong>退出循环结构</strong></p></li><li><p>break语句用于嵌套时，可以通过<strong>标签</strong>指定要终止是哪一层语句块 </p></li></ol><p>continue和break的区别，continue跳出当次循环，break结束当前循环</p><p>return 用在方法时，表示跳出方法；用在main，表示退出程序</p><h3 id="标签的使用"><a href="#标签的使用" class="headerlink" title="标签的使用"></a>标签的使用</h3><blockquote><p>1.标签命名 遵守规范即可</p><p>2.在实际开发中，尽量不要使用标签</p><p>3.如果没有指定break，默认退出最近的循环体</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">label1:  &#123;  ……</span><br><span class="line">    label2:  &#123;  ……</span><br><span class="line">    label3:  &#123;  ……</span><br><span class="line"> </span><br><span class="line">  break  label2;//break跳出指定标签label2循环</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220217201812174.png" alt="image-20220217201812174"></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//随机一个1-100的数，当随机到71时，说出随机了多少次？</span><br><span class="line">//此处不用导入包，因为类Math和双精度Double一样，都是在java,lang包下                                                                                                                                                 </span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//用for变换每次s的值，直到s=71时，利用break语句跳出for循环</span><br><span class="line"> for(int i = 1; i&lt;=i;i++) &#123;</span><br><span class="line"> </span><br><span class="line">           int s =  ((int) (Math.random() * 100) +1) ; //将随机值付给s</span><br><span class="line"> </span><br><span class="line"> System.out.println( &quot; 第&quot;+i+&quot;值： &quot;+  s);</span><br><span class="line"> </span><br><span class="line">if (s == 71) &#123;</span><br><span class="line"></span><br><span class="line"> System.out.println(&quot;i=&quot; + i);</span><br><span class="line"></span><br><span class="line"> break;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//从1加到100,加到第几个时，总和大于20</span><br><span class="line">                                                                                                                                           </span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line">int sum= 0;</span><br><span class="line"></span><br><span class="line">for(int i =1;;i&lt;=100;i++) &#123;</span><br><span class="line">sum+=i;</span><br><span class="line">if(sum &gt; 20) &#123;</span><br><span class="line">System.out.println(&quot;当加到第&quot;+i+&quot;个的时候，总和大于20&quot;);</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//实现登录验证，只有三次机会，若用户和密码分别是  baby和666 ，则提示登录成功,否则提示还有几次机会</span><br><span class="line"> </span><br><span class="line">//字符串是否相等，用类String下的equals方法来判断</span><br><span class="line">//一般情况下,更倾向于使用 &quot; 林黛玉&quot;.equals(name)) 代替name.equals(&quot; 林黛玉&quot;))；前者可以避免空指针异常</span><br><span class="line"></span><br><span class="line"> import  java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scanner  scanner =  new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">int mm = 3;</span><br><span class="line"></span><br><span class="line">for(int i =1;i&lt;=3;i++) &#123;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(&quot;请输入账号：  &quot;);</span><br><span class="line">String name =  scanner.next(); //定义字符串zh来接收账号</span><br><span class="line">  </span><br><span class="line">System.out.println(&quot;请输入密码：  &quot;);</span><br><span class="line">String pw  =  scanner.next(); //定义字符串pw来接收密码</span><br><span class="line">// 变量nam调用equals方法,若name值为baby，pw也满足则显示登陆成功</span><br><span class="line">if (  &quot;baby&quot;.equals(name) &amp;&amp;   &quot;666&quot;.equals(pw)  )&#123;  </span><br><span class="line">System.out.println(&quot;登录成功&quot;);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">mm--;</span><br><span class="line"></span><br><span class="line">if(mm &gt; 0)&#123;</span><br><span class="line">System.out.println(&quot;请重新输入，你还有&quot;+mm+&quot;次机会&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else </span><br><span class="line">System.out.println(&quot;你的账号已锁定&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;跳转控制break的使用&quot;&gt;&lt;a href=&quot;#跳转控制break的使用&quot; class=&quot;headerlink&quot; title=&quot;跳转控制break的使用&quot;&gt;&lt;/a&gt;跳转控制break的使用&lt;/h1&gt;&lt;h3 id=&quot;break的使用&quot;&gt;&lt;a href=&quot;#break</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>例题</title>
    <link href="https://a-little-sweet.github.io/posts/6d6e514a.html"/>
    <id>https://a-little-sweet.github.io/posts/6d6e514a.html</id>
    <published>2022-11-11T22:41:36.122Z</published>
    <updated>2022-11-22T15:08:57.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//定义方法max,求某个double数组的最大值,并返回</span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">T t = new T();</span><br><span class="line">Double res =  t.max(null);</span><br><span class="line">if( res != null) &#123;</span><br><span class="line"> System.out.println(&quot;n的最大值&quot; +res );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">      class  T&#123;</span><br><span class="line"></span><br><span class="line">public Double max(double... n) &#123;  //Double 是表示返回一个Double的包装类</span><br><span class="line">    if(n!= null &amp;&amp; n.length&gt;0) &#123; //n数组至少有一个元素</span><br><span class="line"></span><br><span class="line"> double  max = n[0];</span><br><span class="line"> for(int i = 1; i &lt; n.length;i++) &#123;</span><br><span class="line">if( max &lt; n[i] ) &#123;</span><br><span class="line">max=n[i];</span><br><span class="line">&#125;</span><br><span class="line">   &#125; </span><br><span class="line">return max;   </span><br><span class="line">             &#125;</span><br><span class="line">else &#123;</span><br><span class="line"> System.out.println(&quot;n的输入为空&quot; );</span><br><span class="line">return null;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;   </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//定义方法find,求从字符串数组中匹配一个人,并返回</span><br><span class="line"> public  class text &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String arr[] = &#123;&quot;aaa&quot;,&quot;bbb&quot;,&quot;jack&quot;,&quot;ddd&quot;,&quot;eee&quot;,&quot;fff&quot;&#125;;</span><br><span class="line">Taxon t = new Taxon();</span><br><span class="line"></span><br><span class="line">  intindex = t.find(&quot;jack&quot;,arr);</span><br><span class="line"> if(index != -1) &#123; //判断返回值是否不等于 -1</span><br><span class="line">  System.out.println(&quot;找到了,是第&quot;+t.find(&quot;jack&quot;,arr)+&quot;位&quot;);</span><br><span class="line"> &#125;else&#123;</span><br><span class="line"> System.out.println(&quot;没找到&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> class  Taxon &#123;</span><br><span class="line">public int find(String s , String arr[]) &#123;</span><br><span class="line">if(arr != null)&#123; //判断数组是否等于空</span><br><span class="line">for(int i=0;i&lt;arr.length;i++) &#123;</span><br><span class="line">if(s == arr[i]) &#123;</span><br><span class="line">return i+1;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">return -1; //如果数组为空,返回index=-1</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">return -1; //如果没有找到,就直接退出</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">//定义方法find,求从字符串数组中匹配一个人,并返回</span><br><span class="line"> public  class text &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> /*</span><br><span class="line"> Taxon t = new Taxon();</span><br><span class="line"> int price = t.updatePrice(200);</span><br><span class="line">System.out.println(price);</span><br><span class="line">*/</span><br><span class="line">Taxon t = new Taxon(&quot;山海经&quot;,200);</span><br><span class="line">t.info();</span><br><span class="line">t.updatePrice();</span><br><span class="line">t.info();</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> /*</span><br><span class="line">class  Taxon &#123;</span><br><span class="line">int price;</span><br><span class="line">public void  updatePrice(int price) &#123;</span><br><span class="line">if(price&gt;150) &#123;</span><br><span class="line">this.price = 150;</span><br><span class="line">&#125;else if(price&gt;100 &amp;&amp; price&lt;=150) &#123;</span><br><span class="line">this.price = 100;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">this.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">class  Taxon &#123;</span><br><span class="line">String name;</span><br><span class="line">int price;</span><br><span class="line">public  Taxon(String name,int price) &#123; //创建一个构造器</span><br><span class="line">this.name = name;</span><br><span class="line">this.price = price;</span><br><span class="line">&#125;</span><br><span class="line">public void  updatePrice() &#123;</span><br><span class="line">//如果方法中,没有price局部变量,this等价于this.price,建议写上</span><br><span class="line">if(this.price&gt;150) &#123;</span><br><span class="line">this.price = 150;</span><br><span class="line">&#125;else if(this.price&gt;100) &#123;</span><br><span class="line">this.price = 100;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public  void info() &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;这本书&gt;&quot;+&quot;名字&quot;+this.name+&quot;|价格&quot;+this.price);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//定义一个数组的复制功能copyArr,输入旧数组,返回一个新数组,元素和旧数组一样</span><br><span class="line"> public  class text &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int oldArr[] = &#123;1,2,3,4,5,6&#125;;</span><br><span class="line">Taxon t =new Taxon();</span><br><span class="line">t.copyArr(oldArr);</span><br><span class="line">t.infor(oldArr);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">class Taxon &#123;</span><br><span class="line"></span><br><span class="line">public int []  copyArr( int oldArr[]) &#123;</span><br><span class="line">int newArr [] = new int [oldArr.length];</span><br><span class="line">for(int i =0; i &lt; oldArr.length; i++) &#123;</span><br><span class="line">newArr[i] = oldArr[i]; </span><br><span class="line">&#125;</span><br><span class="line">return newArr;</span><br><span class="line">&#125;</span><br><span class="line">public void  infor( int  newArr[]) &#123;</span><br><span class="line">for(int i =0; i &lt;  newArr.length; i++) &#123;</span><br><span class="line">System.out.print(newArr[i] +&quot;\t&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//构造器调用</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> class Employee &#123;</span><br><span class="line">String name;</span><br><span class="line">char sex; /</span><br><span class="line"> int age;</span><br><span class="line"> String position; // 职位</span><br><span class="line"> int salary;  // 工资</span><br><span class="line"> </span><br><span class="line"> public Employee(String name,char sex,int age) &#123;</span><br><span class="line"> this.name = name;</span><br><span class="line"> this.sex = sex; </span><br><span class="line"> this.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"> public Employee(String position,int salary) &#123;</span><br><span class="line"> this.position = position;</span><br><span class="line"> this.salary = salary; </span><br><span class="line"> &#125;</span><br><span class="line">public Employee(String name,char sex,int age,String position,int salary) &#123; //复用构造器,可以减少赋值</span><br><span class="line"> this( name, sex, age);</span><br><span class="line"> //this(String position,int salary); 因为构造器直接互相调用,只能在第一句话.</span><br><span class="line"> this.position = position;</span><br><span class="line"> this.salary = salary; </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">打印   </span><br><span class="line"> 1.0      PI*r*r</span><br><span class="line">   |         |</span><br><span class="line"> 5.0      PI*r*r</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">PassObject  p = new PassObject();</span><br><span class="line">Circle c = new Circle(times);</span><br><span class="line">p. printAreas(c,5);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> class Circle &#123;</span><br><span class="line">double radius;//半径</span><br><span class="line"></span><br><span class="line">public  Circle() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//此时的构造器是为了封装属性,不能随意更改</span><br><span class="line">public Circle(radius) &#123;</span><br><span class="line">this.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//返回圆的面积</span><br><span class="line">public   double    findArea() &#123;</span><br><span class="line">return    Math.PI * radius * radius;  //返回面积</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public   double  upRadio(double radius) &#123;</span><br><span class="line">        this.radius = radius;</span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> class  PassObject &#123;</span><br><span class="line"> </span><br><span class="line">public  void printAreas( Circle  c , int times) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(int i = 1; i &lt;= times; i++ ) &#123;</span><br><span class="line">  c.upRadio(i);</span><br><span class="line">System.out.println((double)i+&quot;\t\t\t&quot;+ c.findArea());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">//猜拳游戏</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> Scanner scanner = new Scanner(System.in);  </span><br><span class="line"> Game g = new Game();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(int i = 0;i &lt; 3; i++) &#123;</span><br><span class="line"> System.out.print(&quot;请输入你的第&quot;+(i+1)+&quot;次猜拳[石头0,剪刀1,布2]:\t&quot;); </span><br><span class="line"> g.m = scanner.nextInt();  //接收用户的值</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  g.n = g.computerNum();  //调用 电脑随机数字方法</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> System.out.print(&quot;第&quot;+(i+1)+&quot;局猜拳&quot;+g.m+&quot;  VS  &quot;+ g.n ); </span><br><span class="line">  g.startGame();  //调用 猜拳结果方法</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> System.out.println(&quot;你获胜&quot;+g.count+&quot;局&quot; ); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> class Game &#123;</span><br><span class="line"> int m; //用户</span><br><span class="line"> int  n;  // 机器</span><br><span class="line"> int count; //获胜的次数</span><br><span class="line"></span><br><span class="line"> //电脑随机生成猜拳数字的方法</span><br><span class="line">public  int computerNum() &#123;</span><br><span class="line">  Random r = new Random();</span><br><span class="line"></span><br><span class="line"> return  r.nextInt(3);// 表示随机0-2数字</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//猜拳结果的方法</span><br><span class="line">public  void  startGame() &#123; </span><br><span class="line">  if(m == n) &#123;</span><br><span class="line">  System.out.println(&quot;平局&quot;); </span><br><span class="line">  &#125;</span><br><span class="line">  else if(m ==0 &amp;&amp; n ==1  ) &#123;</span><br><span class="line">   System.out.println(&quot;你赢了&quot;); </span><br><span class="line">   count++;</span><br><span class="line">  &#125;</span><br><span class="line">    else if(m == 1 &amp;&amp; n == 2  ) &#123;</span><br><span class="line">   System.out.println(&quot;你赢了&quot;); </span><br><span class="line">     count++;</span><br><span class="line">  &#125;</span><br><span class="line">    else if(m == 2 &amp;&amp; n == 0  ) &#123;</span><br><span class="line">   System.out.println(&quot;你赢了&quot;); </span><br><span class="line">     count++;</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">   System.out.println(&quot;你输了&quot;); </span><br><span class="line">  &#125;  </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>水仙花数</title>
    <link href="https://a-little-sweet.github.io/posts/5c4a65bc.html"/>
    <id>https://a-little-sweet.github.io/posts/5c4a65bc.html</id>
    <published>2022-11-11T22:41:36.119Z</published>
    <updated>2022-11-22T15:00:24.818Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//求一个数是否是水仙花数,其三位数的各个的立方和刚好是它本身</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line">Scanner scanner =  new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;输入一个三位数&quot;);</span><br><span class="line">  int number = scanner.nextInt();</span><br><span class="line">int a = number/100;</span><br><span class="line">int b = number%100/10;</span><br><span class="line">int c  = number%10;</span><br><span class="line"></span><br><span class="line">if((a*a*a+b*b*b+c*c*c) == number) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;该数是水仙花数&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;该数不是水仙花数&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>三元运算符</title>
    <link href="https://a-little-sweet.github.io/posts/a23c676d.html"/>
    <id>https://a-little-sweet.github.io/posts/a23c676d.html</id>
    <published>2022-11-11T22:41:36.098Z</published>
    <updated>2022-11-22T15:00:14.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p> 条件表达式？表达式1：表达式2；</p><ol><li><p>如果条件表达式为true，运算后的结果是表达式1；</p></li><li><p>如果条件表达式为false，运算符的结果是表达式2；</p></li></ol><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args )</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a &gt; b ?  a++ :  b--;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// b--先取值，后自减 </span></span><br><span class="line">    <span class="comment">//b--,返回b的值给result，然后b-1           </span></span><br><span class="line">System.out.println(result);</span><br><span class="line">     System.out.println(a);<span class="comment">//10</span></span><br><span class="line">      System.out.println(b); <span class="comment">//12</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>三元运算符在小转大时，可以<strong>自动转换</strong>数据类型</p><h3 id="举例1"><a href="#举例1" class="headerlink" title="举例1"></a>举例1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args )</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span>  a&gt;b ? <span class="number">1.4</span> : <span class="number">1.5</span><span class="comment">//不可以，属于数据double型转int型</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span>  a&gt;b ? (<span class="type">int</span>)<span class="number">1.4</span> : (<span class="type">int</span>)<span class="number">1.5</span><span class="comment">//可以</span></span><br><span class="line">   <span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span>  a&gt;b ? <span class="number">1.4</span> : <span class="number">1.5</span> <span class="comment">//可以</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="举例2"><a href="#举例2" class="headerlink" title="举例2"></a>举例2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//求用三元运算符比较三数大小，并输出</span><br><span class="line">public class  text &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String [] args ) &#123;</span><br><span class="line"></span><br><span class="line">    int  a  = 12;</span><br><span class="line">    int  b = 16;</span><br><span class="line">    int  c=  21;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     int max = a&gt;b ? a: b; </span><br><span class="line">     max =  max &gt; c ? max : c;</span><br><span class="line"> System.out.println(max) ;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  int max1 = (a &gt; b ? a : b) &gt; c ?  (a&gt;b ? a: b)  : c</span><br><span class="line">  System.out.println(max1) ;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> int max2 =   a &gt; b ?  (a &gt;c ?  a : c ) : (b &gt; c ? b : c );</span><br><span class="line">  System.out.println(max2) ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;三元运算符&quot;&gt;&lt;a href=&quot;#三元运算符&quot; class=&quot;headerlink&quot; title=&quot;三元运算符&quot;&gt;&lt;/a&gt;三元运算符&lt;/h3&gt;&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="https://a-little-sweet.github.io/posts/a444b428.html"/>
    <id>https://a-little-sweet.github.io/posts/a444b428.html</id>
    <published>2022-11-11T22:41:36.082Z</published>
    <updated>2022-11-22T15:00:00.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>指的是将多个数据一次指定进行顺序排列的过程。</p><p>排序分为四个:  1.内部排序，2.外部排序，3.</p><h3 id="内部排序"><a href="#内部排序" class="headerlink" title="内部排序"></a>内部排序</h3><blockquote><p>指的是将所有数据都加在到内部存储器进行排序。包括(交换式排序法，选择式排序法和插入式排序法）</p></blockquote><h5 id="冒泡排序法："><a href="#冒泡排序法：" class="headerlink" title="冒泡排序法："></a>冒泡排序法：</h5><p> 通过对待排序序列从后向前排序，<strong>下标从大到小</strong> 依次比较相邻的值，值大的从前移到后面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">原:24，69，80，57，13，将最大的数放在最后</span><br><span class="line"></span><br><span class="line">第一轮排序 </span><br><span class="line">第一次比较: 24，69，80，57，13</span><br><span class="line">第二次比较  24，69，80，57，13</span><br><span class="line">第三次比较: 24，69，57，80，13</span><br><span class="line">第四轮比较  24，69，57，13，80</span><br><span class="line"></span><br><span class="line">第二轮排序 </span><br><span class="line">第一次比较: 24，69，57，13，80</span><br><span class="line">第二次比较  24，57，69，13，80</span><br><span class="line">第三次比较: 24，57，13，69，80</span><br><span class="line"></span><br><span class="line">第三轮排序 </span><br><span class="line">第一次比较: 24，57，13，69，80</span><br><span class="line">第二次比较  24，13，57，69，80</span><br><span class="line"></span><br><span class="line">结论：假设有n个数用冒泡排序，执行n-1轮，每轮 n-1 递减一次</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line">public class text &#123;</span><br><span class="line"></span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">int a[] =&#123;24,69,80,57,13&#125;;</span><br><span class="line">for(int j = 0; j&lt;4; j-- ) &#123;       //for(int j = 4; j&gt;0; j-- ) &#123;</span><br><span class="line">for(int i= 0; i&lt; a.length -1;i++ ) &#123;   //for(int i= 0; i&lt; j;i++ ) &#123;</span><br><span class="line"></span><br><span class="line">if(a[i] &gt; a[i+1]) &#123;</span><br><span class="line">int max = a[i+1];</span><br><span class="line">    a[i+1] = a[i];</span><br><span class="line">a[i] = max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(int i=0; i&lt;5;i++) &#123;</span><br><span class="line">System.out.println(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line">public class text &#123;</span><br><span class="line"></span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">int a[] =&#123;24,69,80,57,13,60,78,56,33,98&#125;;</span><br><span class="line">for(int k = 0; k&lt;a.length-1; k++) &#123;</span><br><span class="line">for(int i= 0; i&lt; a.length-1 -k;i++ ) &#123;</span><br><span class="line"></span><br><span class="line">if(a[i] &gt; a[i+1]) &#123;</span><br><span class="line">int max = a[i+1];</span><br><span class="line">    a[i+1] = a[i];</span><br><span class="line">a[i] = max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(int i=0; i&lt;a.length;i++) &#123;</span><br><span class="line">System.out.println(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查找排序"><a href="#查找排序" class="headerlink" title="查找排序"></a>查找排序</h3><p>查找排序分为两个，顺序排序和二分查找</p><h5 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//查找某字符串在数组内的下标，没有报错，退出</span><br><span class="line">import  java.util.Scanner;</span><br><span class="line">public class text &#123;</span><br><span class="line"></span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">Scanner scanner = new Scanner(System.in);</span><br><span class="line">String name[] =&#123;&quot;69&quot;,&quot;80&quot;,&quot;57&quot;,&quot;13&quot;,&quot;26&quot;&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入要查找的工号&quot;);</span><br><span class="line">     String  Name =   scanner.next();</span><br><span class="line">  </span><br><span class="line"> int index = -1;//判断值</span><br><span class="line">for(int i= 0; i&lt; name.length;i++ ) &#123;</span><br><span class="line">if( name[i].equals(Name) )&#123;</span><br><span class="line">System.out.println(&quot;已查到工号是&quot;+(i+1));</span><br><span class="line">index = i;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(index == -1) &#123;</span><br><span class="line">System.out.println(&quot;没有查到该工号&quot;);</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="外部排序法"><a href="#外部排序法" class="headerlink" title="外部排序法"></a>外部排序法</h4><p>&gt;<br>&gt;</p><blockquote><p>数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括(合并排序法，直接合并排序法)</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h1&gt;&lt;p&gt;指的是将多个数据一次指定进行顺序排列的过程。&lt;/p&gt;
&lt;p&gt;排序分为四个:  1.内部排序，2.外部排序，3.&lt;/p&gt;
&lt;h3 id=&quot;内部</summary>
      
    
    
    
    
    <category term="Java" scheme="https://a-little-sweet.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
