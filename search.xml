<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>书籍推荐</title>
      <link href="/posts/82cb469d.html"/>
      <url>/posts/82cb469d.html</url>
      
        <content type="html"><![CDATA[<h3 id="好书推荐"><a href="#好书推荐" class="headerlink" title="好书推荐"></a>好书推荐</h3><blockquote><p>2023.4 .2</p></blockquote><p><a href="https://www.zhihu.com/question/25563234">https://www.zhihu.com/question/25563234</a>  万万没想到：用理工科思维理解世界》</p><h3 id="读书的建议"><a href="#读书的建议" class="headerlink" title="读书的建议"></a>读书的建议</h3><p><a href="http://mindhacks.cn/2008/09/17/learning-habits-part3">http://mindhacks.cn/2008/09/17/learning-habits-part3</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读方法</title>
      <link href="/posts/123fd56.html"/>
      <url>/posts/123fd56.html</url>
      
        <content type="html"><![CDATA[<ol><li><strong>趁着对一件事情有热情的时候，一股脑儿把万事开头那个最难的阶段熬过去</strong>。万事开头难，因为从不了解到了解基本的一些事实，是一个新知识暴涨的阶段，这个时候的困难是最大的。有人熬不过去，觉得困难太大就放弃了。不过，狂热的兴趣可以抵消对困难的感觉，所以趁着对一件事情有热情的时候，开一个好头是很重要的。（当然，这并不是说持之以恒就不重要了）。当然，也许这个是因人而异的，对我来说我会在对一件事情有浓厚兴趣的时候非常专注地学习，把很多 groundworks 做掉。后面就会顺利一些了。</li><li><strong>根据主题来查阅资料，而不是根据资料来查阅主题</strong>。以前读书的时候是一本一本的读，眼里看到的是一本一本的书，现在则是一章、甚至一节一节的读，眼中看到的不是一本一本的书，而是一堆一堆的章节，一个一个的知识主题，按照主题来阅读，你会发现读的时候不再是老老实实地一本书看完看另一本，而是非常频繁地从一本书跳到另一本书，从一处资料跳到另一处资料，从而来获得多个不同的人对同一个主题是如何讲解的。比如最近我发现在看蒙特卡罗算法时就查了十来处资料，其中有三四篇 paper 和六七本书；这是因为即便是经典的书，你也不能指望它对其中每一个主题的介绍都是尽善尽美的，有些书对某个主题（知识点）的介绍比较到位，有些书则对另一些知识点介绍得比较到位。而有时候一篇紧凑的 paper 比一本书上讲得还要好。我硬盘里面的书按主题分类，每个主题下面都有一堆书，当我需要学习某个主题的知识时（譬如贝叶斯学习或者神经网络），我会把里面涉及这个主题的书都翻开来，索引到相关章节，然后挑讲得好的看。那么，如何判断一个资料是好资料还是坏资料呢？</li><li><strong>好资料，坏资料</strong>。好资料的特点：从问题出发；重点介绍方法背后的理念（ rationale ），注重直观解释，而不是方法的技术细节；按照方法被发明的时间流程来介绍（先是遇到了什么什么问题，然后怎样分析，推理，最后发现目前所使用的方法）。坏资料的特点是好资料的反面：上来就讲方法细节，仿佛某方法是从天上掉下来的，他们往往这样写“我们定义… 我们称… 我们进行以下几个步骤… ”。根本不讲为什么要用这个方法，人们最初是因为面对什么问题才想到这个方法的，其间又是怎样才想出了这么个方法的，方法背后的直观思想又是什么。实际上一个方法如果将其最终最简洁的形式直接表达出来往往丢失掉了绝大多数信息，这个丢掉的信息就是问题解决背后的思维过程。至于为什么大多数书做不到这一点，我在<a href="http://blog.csdn.net/pongba/archive/2008/07/07/2622713.aspx">这里</a>试着分析过。</li><li><strong>学习一个东西之前，首先在大脑中积累充分的“疑惑感”</strong>。即弄清面临的问题到底是什么，在浏览方法本身之前，最好先使劲问问自己能想到什么方法。一个公认的事实是，你对问题的疑惑越大，在之前做的自己的思考越多，当看到解答之后印象就越深刻。记得大学里面的课本总是瀑布式地把整个知识结构一览无余地放在面前，读的过程倒是挺爽，连连点头，读完了很快又忘掉了，为什么？因为没有带着疑问去学习。</li><li><strong>有选择地阅读</strong>。很多人觉得我读书速度很快，其实我只是有选择地阅读。这里的选择体现在两个地方，一是选择一本书中感兴趣的章节优先阅读。二是对一本书中技术性较弱或信息密度较低的部分快速地略读。一般来说，除了技术性非常强的书之外，大多数书的信息密度很低，有很多废话。一般来说在阅读的时候应该这样来切分内容：1. 问题是什么？2. 方案是什么？3. 例子是什么？如果是需要解释一个现象的（譬如《黑天鹅》），那么1. 现象是什么？2. 解释是什么？3. 支撑这个解释的理由是什么？4. 例子是什么？一般来说，这一二三四用不了多少字就可以写完了（如果假设只举一到两个精到的例子的话），这样的无废话著作的典型是《合作的进化》；那为什么有些书，明明核心观点就那点东西（顶多加上几个精要的例子罢了）却写得长得要命呢？因为人的思维都有一个“联想”的特点，写着写着就容易旁逸斜出，而且作者自己也往往觉得引申出去挺牛逼，有时候很多与主题无关的废话就掺和进来了；那么，阅读的时候就应该有选择性地滤掉这些不相干的废话；此外还有一种可能性就是大量冗余的例子。一般来说组织得比较好的书会有详细且一目了然的目录和索引，根据目录首先就可以滤掉一部分（比如某个子章节的内容你以前是看过的），然后有时候作者还会举很多冗余的例子，如果你已经觉得印象够深刻了这些例子完全可以不看（一些书就非常厚道地对每个观点只辅以一两个最最经典的例子，譬如《与众不同的心理学——如何正视心理学》，这样的书我最是喜欢）。</li><li><strong>为什么看不懂</strong>？如果看不懂一个知识，一般有如下几个可能的原因：1. 你看得不够使劲。对此古人总结过——书读百遍其义自现。虽然这个规律不是任何时候都成立的，但是从认知科学的角度看是完全可以解释的，我们在阅读的时候，注意力往往会有选择性地关注其中的某一些“点”，而忽略了另一些“点”，于是一遍看下来可能因为某一些忽略导致无法理解整体。或者干脆看的时候就没注意其中一些细节但重要的东西。此外，大脑理解一个东西需要一定的处理时间，人脑的处理速度很慢，神经冲动每秒传输速度不过百米，所以不能指望看到哪懂到哪。最后，我们可能因为思维定势的原因会从某个特定的角度去看一句话而忽略了从不同角度去理解的可能性。对于这类情况，仔仔细细地再多读两遍，多试着去理解两遍，往往会“哦！原来这样。”地恍然大悟。2. 其中涉及到了你不懂的概念。这是技术性的不理解。这种情况就需要 Cross Reference 。如果一句话中用到了你不懂的概念，那就去查，现在很多书都是电子书，直接搜索一下，或者，对于纸书，看一下书后面的索引就行了。奇怪的是很多人看不懂也不分析一下为什么不懂，就直接放弃了。正如解决问题一样，问题卡住解决不了，第一时间要做的就是分析到底为什么解决不了，而不是直接求救。3. 作者讲述的顺序不对，你接着往下看，也许看到后面就明白了前面的了。</li></ol><p><strong>杂项</strong></p><ol><li><p><strong>如何在阅读之前就能获得对一本书质量的大致评估</strong>。在深入阅读之前能够迅速评估一本书的质量可以节省很多时间。基本上有几个线索：1. 看作者。牛作者写的书一般都不错。2. 看目录和简介。一份好的目录和简介能够透露这本书质量的相当一部分信息。目录结构是否清晰，是否直白（而不是装神弄鬼），都是衡量的线索。3. 看 Amazon 上的评价，这里要注意的是，除了看整体打分之外，更要看打分最低的人是怎么说的，因为小众意见往往有可能来自那些真正懂行的人（除了来踢馆的），如果在打分最低的意见里面看不到真正有价值的反驳意见的话就相当肯定书是不错的了。4. 看样章。Amazon 上一般都可以随机浏览一些章节的，表达是否清晰，论证是否严谨，内容是否深刻，基本是几页纸就能看出来的。</p></li><li><p><strong>如何搜寻到好书</strong>。几个线索：1. 同作者的著作。2. Amazon 相关推荐和主题相关的书列（类似豆瓣的豆列）。3. 一本好的著作（或一份好的资料——不管是书还是网页）在参考资料里面重点提到的其他著作。4. 有时对于一个主题，可以搜索到好心人总结的参考资源导引，那是最好不过的。</p></li></ol><p>titls: 万事开头难，以至于万事难开头，可当你开头了，万事也就不难了。兴趣是最好的导师，专注力是最好的动力，有了这些，妈妈再也不用担心我的学习。好读书，读好书，并不是所有的书都是好书，并不是所有的好书都是好的，真正好的只是其中的精华。要学会把书读薄，然后再把书读厚。做什么事情都一样，要掌握方法。方法对了，世界就对了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSS源</title>
      <link href="/posts/15c5646c.html"/>
      <url>/posts/15c5646c.html</url>
      
        <content type="html"><![CDATA[<p>工具不用始终是工具，将目光聚集在内容才是最重要的。订阅RSS源前，建议点开博客链接，浏览最新的三篇文章，看到自己喜欢的再订阅，以免造成无用的信息堆积。</p><h3 id="写文有深度的博客"><a href="#写文有深度的博客" class="headerlink" title="写文有深度的博客"></a>写文有深度的博客</h3><hr><p>好博客发源地： </p><ul><li>财新 <a href="https://blog.caixin.com/">https://blog.caixin.com/</a></li><li>新浪博客 <a href="https://blog.sina.com.cn/">https://blog.sina.com.cn/</a></li></ul><ol><li><a href="http://www.huangjiwei.com/blog/">http://www.huangjiwei.com/blog/</a> 孤岛客</li><li><a href="http://www.zreading.cn/">http://www.zreading.cn/</a>  左岸读书</li><li><a href="https://fangbolin.blog.caixin.com/">https://fangbolin.blog.caixin.com/</a>  南桥先生<blockquote><p>安徽桐城人，现居美国，在美国高校从事课程设计工作，业余从事文学翻译，曾译有《河湾》、《一个唯美主义者的遗言》 、《老谋深算》、《万灵节》、《布鲁克林有棵树》、《两个世界之间：赛珍珠传》、《另类的英雄：萨特传》 、《地之国》</p></blockquote></li><li><a href="https://wangpei.net/">https://wangpei.net/</a> 白版报  </li><li><a href="https://blog.sina.com.cn/u/1408084550">https://blog.sina.com.cn/u/1408084550</a>   萧秋水的博客</li><li><a href="https://www.yangzhiping.com/">https://www.yangzhiping.com/</a> 阳志平的网志</li><li><a href="https://www.changhai.org/index.php">https://www.changhai.org/index.php</a> 卢仓海的博客</li><li><a href="https://blog.sina.com.cn/u/1228571733">https://blog.sina.com.cn/u/1228571733</a> 人月神话的BLOG</li><li><a href="https://headsalon.org/">https://headsalon.org/</a>  海德沙龙</li><li><a href="https://www.cnfeat.com/">https://www.cnfeat.com/</a>  陈素封</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><hr><ol><li>安卓pc推荐 inoreader，Feeder(限制订阅150个源，可付费升级)</li><li>配合RSShub谷歌插件和Tampermonkey中的RSS+脚本使用更佳</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 学习栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<hr><p>title: 如何整理巩固零碎的知识<br>tags: 学习栈<br>keywords: 学习栈<br>cover: ‘<a href="https://www.dmoe.cc/random.php">https://www.dmoe.cc/random.php</a>‘</p><hr><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><blockquote><p>你可以在方法论和模式的指导下创造出更多的行走路线，你要做的是根据自己的技能特点和面临的场景，选择最适合自己的学习路线。</p><p>学习也一样，构建自己的知识体系，要知道自己需要学习什么，圈定自己的学习内容，再有计划的向周边拓展，有效的分配自己的学习时间，明确自己的学习方式。”</p></blockquote><h2 id="为什么要学习知识管理"><a href="#为什么要学习知识管理" class="headerlink" title="为什么要学习知识管理"></a>为什么要学习知识管理</h2><hr><blockquote><p>“德鲁克说过，没有人为你负责，除了你自己，而你唯一的资本就是知识。</p></blockquote><p>学知识是一个很漫长的积累过程，幸好的是，我学会了知识管理，并获益良多，我视之为我人生中最重要的技能，而PKM的最终目标仍然是提升自我的核心竞争力，体现知识创造价值，”在我们平时的问题管理，工作，技术研究，学习，时间管理等各个方面都无处不体现知识管理的影子。</p><p>说到底，知识管理就是用于创造价值，并不是所有知识都能够创造价值，但是知识不做管理，想用的时候就找不出来，那学来有何用。<br>个人知识管理帮助你作好归纳和总结，但还无法上升到一个更高的高度．当有了这些量的积累后才谈得上质变，质变的结果就是我们经常需要的创新思维和系统观．</p><h2 id="什么是知识管理"><a href="#什么是知识管理" class="headerlink" title="什么是知识管理"></a>什么是知识管理</h2><hr><blockquote><p>个人知识管理，又名PKM（Personal Knowledge Management）, 是一种个人收集，验证，存储，搜索，提取消化吸收，分享知识，创造的过程。</p></blockquote><h3 id="PKM与PIM的关系"><a href="#PKM与PIM的关系" class="headerlink" title="PKM与PIM的关系"></a>PKM与PIM的关系</h3><hr><p>PIM只采用了个人知识管理过程中收集，存储，搜索的过程。 可以这样说，PIM只是PKM的子集，而这些知识并没有像化学药剂一样产生连锁反应，所以其对收集者带来的帮助也不是特别明显了。而PKM会对知识进行提炼，它是信息的精华部分，是经过归纳总结得来的。</p><h2 id="知识管理带来的好处"><a href="#知识管理带来的好处" class="headerlink" title="知识管理带来的好处"></a>知识管理带来的好处</h2><p>个人品牌最大受益者<br>内在品德修养比外在形象更重要<br>持续学习和终身学习<br>提高个人核心竞争力<br>你需要站在巨人的肩膀上，这样才能够走得更远，看得更高.Google不是让你不思考，而是让你从重复的无价值的活动中解脱出来．真正将思维用在有价值的事情上．</p><h2 id="如何建立学习知识管理"><a href="#如何建立学习知识管理" class="headerlink" title="如何建立学习知识管理"></a>如何建立学习知识管理</h2><hr><blockquote><ol><li>从资料收集开始形成个人知识库</li><li>是根据自我的目标形成知识地图</li><li>是从知识到技能到方法论和模式不断的进行转换和升华。</li></ol></blockquote><p>四个过程</p><ol><li>收集（保存、记录）知识</li><li>吸收（优化，萃取）知识</li><li>实践操作、应用知识、创造价值</li><li>分享知识、研究探讨。</li></ol><h3 id="1、收集（保存、记录）"><a href="#1、收集（保存、记录）" class="headerlink" title="1、收集（保存、记录）"></a>1、收集（保存、记录）</h3><hr><blockquote><p>不同的学习路径，不同的资源方式</p></blockquote><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><ul><li>[[1.1 RSS源]]或者高价值博客推荐：<strong>Inoreader</strong>、<strong>Feedly</strong>、NewsBlur、Feedbin ， win（irreader）</li><li>简书</li><li>小红书</li><li>掘金</li><li>github</li><li>ChatGPT</li><li>微博</li><li>知乎</li><li>b站</li><li>中国慕课</li><li>搜素引擎</li><li>豆瓣读书</li><li>[[1.4书籍]]</li><li>交谈或者培训课程（与君一席话，胜读十年书。身边的师傅、朋友、同学，甚至领导都会给到很好的意见和启发。交谈或者培训课程,可以将这些记录下来，不断实践。）</li></ul><h4 id="网页知识收集工具"><a href="#网页知识收集工具" class="headerlink" title="网页知识收集工具"></a>网页知识收集工具</h4><p>「印象笔记·剪藏」 +印象笔记·悦读  插件。</p><h4 id="知识储存工具"><a href="#知识储存工具" class="headerlink" title="知识储存工具"></a>知识储存工具</h4><h5 id="服务商存储"><a href="#服务商存储" class="headerlink" title="服务商存储"></a>服务商存储</h5><p> 印象笔记+有道云笔记这个搭配是基于手机端的，原因很简单：我不能在手机上装两个印象笔记，同时我不希望所有信息都在印象笔记中。所以，我采取了双线操作：如果要看文章，直接看印象笔记，如果需要记录思考，开有道云笔记。</p><p>三人行必有我师。保持有一颗求知的心</p><h5 id="自建NAS存储"><a href="#自建NAS存储" class="headerlink" title="自建NAS存储"></a>自建NAS存储</h5><p>参考博客<br><a href="https://zhuanlan.zhihu.com/p/20611079">https://zhuanlan.zhihu.com/p/20611079</a>  入手12T-四盘位RMB 5500左右</p><h3 id="2、吸收（优化，萃取）知识"><a href="#2、吸收（优化，萃取）知识" class="headerlink" title="2、吸收（优化，萃取）知识"></a>2、吸收（优化，萃取）知识</h3><blockquote><p>鉴定知识的正确性和有效性的能力并不是每个人都拥有的，不过，我们很幸运，这种能力是可以培养的。学习[[1.3 批判性思维]]CriticalThinking相关知识可以帮助我们加深对这方面的理解。</p></blockquote><p><em>学习和整合资料的过程就是要进一步把资料读少，在读和学的过程中不断的剔除掉垃圾和无价值的资料。</em></p><font  size= 5>第一步是资料的管理 ，第二步是对资料的泛读排优先级 ，第三步定计划和学习方向</font><h4 id="学习资料推荐"><a href="#学习资料推荐" class="headerlink" title="学习资料推荐"></a>学习资料推荐</h4><p>何为高段位的学习者？——《怎样成为高段位的学习者？》的求知索引<br><a href="https://www.jianshu.com/p/191f5c3e8e11">https://www.jianshu.com/p/191f5c3e8e11</a></p><p>知识的结构与解码—《怎样成为高段位的学习者？》的求知索引<br><a href="https://www.jianshu.com/p/75b38a80ca67">https://www.jianshu.com/p/75b38a80ca67</a></p><p>为什么练习在学习中那么重要？ ——《怎样成为高段位的学习者？》的求知索引<br><a href="https://www.jianshu.com/p/1cd20f560085">https://www.jianshu.com/p/1cd20f560085</a></p><p> 怎么打通知识的任督二脉？ ——《怎样成为高段位的学习者？》的求知索引（完）<br><a href="https://www.jianshu.com/p/42efae9d9150">https://www.jianshu.com/p/42efae9d9150</a></p><p>我学习思维导图的过程（1）<br><a href="https://www.jianshu.com/p/2dfbe6874de5">https://www.jianshu.com/p/2dfbe6874de5</a></p><p>我学习思维导图的过程（2）<br><a href="https://www.jianshu.com/p/fdb6eb5c513b">https://www.jianshu.com/p/fdb6eb5c513b</a></p><p>我学习思维导图的过程（3）<br><a href="https://www.jianshu.com/p/8c2c4c5832ca">https://www.jianshu.com/p/8c2c4c5832ca</a></p><p>我学习思维导图的过程（4）<br><a href="https://www.jianshu.com/p/82cdefd7e28d">https://www.jianshu.com/p/82cdefd7e28d</a></p><h3 id="3、实践-amp-应用-amp-创造知识"><a href="#3、实践-amp-应用-amp-创造知识" class="headerlink" title="3、实践&amp;应用&amp;创造知识"></a>3、实践&amp;应用&amp;创造知识</h3><blockquote><p>任何知识管理工具和系统，如果走不到第三个层次则始终是停留在使用阶段，而无法真正过渡到创造阶段 , (那么就达不到我们学习的目的）。后面要做的就是通过自我知识的学习形成相关的经验，大家通过知识平台的讨论和固化，将我们的经验积累为相关的方法论和模式。方法论会告诉我们遇到河流你需要通过桥过去，搭桥过去，或者说学习游泳技能过去；遇到山你可以爬过去，打个隧道过去，也可以绕过去。你可以根据你自己的情况选择相关的方法。所以有了这些大家共同积累下来的方法论和模式，再给你一张地图的时候，你不一定安装常规的学习路线走，你可以在方法论和模式的指导下创造出更多的行走路线，你要做的是根据自己的技能特点和面临的场景，选择最适合自己的学习路线。</p></blockquote><h4 id="完善知识结构"><a href="#完善知识结构" class="headerlink" title="完善知识结构"></a>完善知识结构</h4><blockquote><p>就是先找到你最关心的专业和方向，根据这些专业方向完善自我的知识结构和知识地图，然后在日后的工作和实践过程中不断去对知识结构的细节进行完善。</p></blockquote><h4 id="分享消化知识平台"><a href="#分享消化知识平台" class="headerlink" title="分享消化知识平台"></a>分享消化知识平台</h4><blockquote><p>分享知识不只是分享，也完善了你的知识。</p></blockquote><p>1、公众账号；<br>2、简书（重要的是支持Markdown）；<br>3、知乎专栏；<br>4、十五言；<br>5、博客（独立博客）；<br>6、PDF，最好的文件发布格式；<br>7、微博<br>8、朋友圈</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p>加油站的产品观<br><a href="http://jianshu.io/p/e2bfc6171595">http://jianshu.io/p/e2bfc6171595</a></p><p>写一份老板满意的申请<br><a href="http://jianshu.io/p/dda2127ee973">http://jianshu.io/p/dda2127ee973</a></p><p> 基础只靠一样东西：练——浅谈学习和写作<br><a href="http://jianshu.io/p/7bdd7f5ae92d">http://jianshu.io/p/7bdd7f5ae92d</a></p><p>如何在Quora上学英语<br><a href="https://www.jianshu.com/p/a899c510eccb">https://www.jianshu.com/p/a899c510eccb</a></p><p> 餐饮服务应该这么做<br><a href="https://www.jianshu.com/p/e40c37d42ba0">https://www.jianshu.com/p/e40c37d42ba0</a></p><p>餐饮服务应该这么做（二）<br><a href="https://www.jianshu.com/p/4a8e0a49c06e">https://www.jianshu.com/p/4a8e0a49c06e</a></p><p>餐饮服务应该这么做（三）<br><a href="https://www.jianshu.com/p/dc85dad36b44">https://www.jianshu.com/p/dc85dad36b44</a></p><h3 id="心得分享"><a href="#心得分享" class="headerlink" title="心得分享"></a>心得分享</h3><ol><li>每周选一天（比如星期日）只看收集的东西，而不再阅读新的东西</li><li>只收集不看是收集知识的大忌，因为知识永远比你收藏的多，你24小时收集，也一生都收集不完。而且最终形成了<strong>资料收集狂症</strong>，白鸟在林，不如一鸟在手</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何做副业</title>
      <link href="/posts/bfd213df.html"/>
      <url>/posts/bfd213df.html</url>
      
        <content type="html"><![CDATA[<p>1、做副业的目的是什么（增加收入）</p><p>2、做副业的目标是什么（月入1万，月入2万……）</p><p>3、每天什么时间做，投入多少时间（空余时间，下班后，1-3小时等）</p><p>4、做什么项目（适合自己的项目）</p><p>5、用什么方法做（适合自己的方法）</p><p>6、每天都做些什么（和项目相关的事）</p><p>7、怎样能快速做出满意的成绩（摸透规则，掌握方法技巧和思路）</p><p>8、怎样保持成绩长期稳定（坚持和专注）</p><p>9、怎样放大操作（以量放大，以法放大）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑效率</title>
      <link href="/posts/d28e90b0.html"/>
      <url>/posts/d28e90b0.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-uTools"><a href="#1-uTools" class="headerlink" title="1.  uTools"></a>1.  uTools</h3><blockquote><p><strong>uTools</strong> 是一个极简、插件化、跨平台的桌面效率软件，同时支持 Win、Mac 和 Linux 系统。<br>它以插件的形式，将很多实用的常用工具集合起来，让我们可以自由选择安装自己需要的功能，打造一个专属的工具集合。</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/wd0A9LjWKMe0UsPtUQqjl5TglxYcQMwNFdEDkYTI42QD18hUcPCJOCTyUUAJbrQ2zO9bicXhXs5rNMCbmbibd1Ug/640?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt="图片"></p><p><strong>软件特性：</strong>  </p><ul><li><p>插件中心：以插件的形式提供各种实用工具和功能，可以按需安装；</p></li><li><p>多功能输入框：支持文本、图片、文件等输入；</p></li><li><p>自动粘贴：唤出 uTools 时，自动将剪贴板中 5 秒内的内容粘贴进去；</p></li><li><p>全局快捷键：一键唤起小工具，如上传图片、以图搜图、翻译等；</p></li></ul><h3 id="笔记效率"><a href="#笔记效率" class="headerlink" title="笔记效率"></a>笔记效率</h3><p><del>先暂时使用这个随机  <a href="https://cn.piliapp.com/random/lots/">https://cn.piliapp.com/random/lots/</a></del></p><p>实现随机api图片   <a href="https://www.cnblogs.com/hlmy/p/16640635.html">https://www.cnblogs.com/hlmy/p/16640635.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<hr><p>title: 毕业后，你还可以学些什么？<br>tags: 其他文件<br>keywords: IT类<br>cover: ‘<a href="https://imgapi.xl0408.top/index.php">https://imgapi.xl0408.top/index.php</a>‘</p><hr><h3 id="网络资源"><a href="#网络资源" class="headerlink" title="网络资源"></a>网络资源</h3><ul><li><a href="http://www.ted.com/">TED</a>：尖峰创想，启迪心智</li><li><a href="http://itunes.stanford.edu/">斯坦福开放大学</a>：免费读大学，最新的类似于IOS开发与Ruby开发系列课程，你可以免费找到</li><li><a href="http://ocw.mit.edu/courses/">MIT开放课程</a>：世界上最好的理工学院，关于人工智能等议题开启你的好奇心</li><li><a href="http://www.youtube.com/">YouTube</a>:大量的学习视频都集中在这里</li><li><a href="http://stackexchange.com/sites">stackexchange</a>：全世界的热心人士都集中在这里提问与回答问题</li><li><a href="http://edge.org/">edge</a>：牛人与牛人对话</li><li><a href="http://www.plos.org/">PLOS</a>：开源模式在学术界的应用，公共图书馆，你可以免费看到最新的论文；你也可以提交自己的论文</li></ul><h3 id="中文汉化："><a href="#中文汉化：" class="headerlink" title="中文汉化："></a>中文汉化：</h3><ul><li><a href="http://tedtochina.com/">TEDtochina</a>：TED中文社区，不仅仅是翻译。</li><li><a href="http://open.163.com/">网易公开课</a>：有TED及各个国外大学的开放课程的翻译。</li><li><a href="http://www.myoops.org/main.php">MyOOPS开放课程</a>：来自全球顶尖大学的开放式课程，现在由世界各国的数千名义工志工为您翻译成中文。</li><li><a href="http://dongxi.net/">东西网</a>与<a href="http://www.yeeyan.org/">译言</a>：有部分edge翻译材料。</li><li><a href="http://www.youku.com/">优酷</a>:汉化了不少YouTube资源。</li></ul><h3 id="思维"><a href="#思维" class="headerlink" title="思维"></a>思维</h3><p>对思维的深度思考与刻意练习，将拥有较高人生自由度。</p><p>图书</p><p>一般来说，以下推荐的图书组合，以中文图书为主，top10往往是必读，其他的可以泛读与选读。</p><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>中国的作文训练让我们丧失表达欲望。如果不上大学，你可以通过西式的创意写作课程补上这一课。当恢复对写作的热情之后，再从中国传统文化中汲取营养。</p><ul><li><a href="http://book.douban.com/doulist/1269878/">开始写作吧</a>：以西方的创意写作课程图书为主。</li></ul><h3 id="编程图书"><a href="#编程图书" class="headerlink" title="编程图书"></a>编程图书</h3><ul><li><a href="http://book.douban.com/doulist/1244005/">全世界程序员都说好的图书</a>：在<a href="http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read?tab=votes#tab-top">stackoverflow书单</a>基础上整理，多为经典图书。其中1-12本为stack overflow推荐，全世界程序员都说好的图书。</li><li><a href="http://book.douban.com/doulist/1222802/">Ruby与Rails开发基础书单</a>:涵盖了Ruby与Rails3新手所需要的主要技能。Ruby与Rails的组合，能够快速进入Web开发世界。</li><li><a href="http://book.douban.com/doulist/1237672/">与小朋友一起学编程</a>：一些入门的计算机编程读物，面向小朋友写的。所以不用担心自己读不懂。涵盖Python，Ruby与Arduino等。</li></ul><p>网站：</p><ul><li><a href="http://github.com/">github.com</a>：世界上最优秀的程序员集中地带。</li><li><a href="http://stackoverflow.com/">stackoverflow</a>：世界上最热心的程序员集中地带，你的常见问题都可以在这里找到答案。</li></ul><h3 id="创新图书"><a href="#创新图书" class="headerlink" title="创新图书"></a>创新图书</h3><ul><li><a href="http://book.douban.com/doulist/1237682/">成为创新者：诞生伟大设计与产品的新模式</a>：以triz及创新算法为主。</li><li><a href="http://book.douban.com/doulist/1222896/">ReWork系列图书</a>：一些有干货的创业图书。</li><li><a href="http://www.v2ex.com/rework">Rework中文</a>：小而美的创业之旅。</li></ul><p>网站：</p><ul><li><a href="http://paulgraham.com/">paulgraham</a>：一位对创业有独特思考的长者。</li><li><a href="http://news.ycombinator.com/">Hacker News</a>: 技术创业者集中地带。</li><li><a href="http://www.tisiwi.com/123">部分中文资源索引</a></li></ul><h3 id="学习部落"><a href="#学习部落" class="headerlink" title="学习部落"></a>学习部落</h3><p>社交网络如何影响人们的学习和个人发展？不论是线上，还是线下，总有一些人，有一些地方，给我们启迪和帮助，引领我们进步。你和你身边的学友及导师，组成了你的个人学习部落。</p><p>与学友和导师的私下深度交流，助益于心智反省，秘笈传递。你的学习部落通过一次次的“触动-行动-反馈”的循环影响你。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1.4书籍推荐</title>
      <link href="/posts/9aae53cd.html"/>
      <url>/posts/9aae53cd.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>岗位胜任力模型：也叫做核心能力模型，英文是 competency，在组织管理中，胜任素质是指驱动员工作出卓越绩效的一系列综合素质，是员工通过不同方式表现出来的知识、技能/能力、职业素养、自我认知、特质和动机等的素质集合。</p><p>以下给出一套标准的能力定义库共参考（前十二大项）</p></blockquote><ol><li>督导能力（DIRECTING WORK THROUGH OTHERS）</li><li>影响力（INFLUENNCE）</li><li>预期应对能力（INITIATIVE）</li><li>判断能力（JUDGMENT）</li><li>倾听与反应（LISTENING AND RESPONDING）</li><li>组织内活动能力（ORGANIZATIONAL AWARENESS） </li><li>项目管理能力（ORGANIZING WORK/PROJECT MANAGEMENT）</li><li>积极主动性（PERSONAL DRIVE）</li><li>关系网建立（RELATIONSHIP BUILDING）</li><li>自信（SELF—CONFIDENCE）</li><li>展望力（VISIONING）</li><li>团队精神（WORKING WITH OTHERS）</li></ol><p><img src="https://pic1.zhimg.com/80/v2-d0620ec260b858c410910d27f063eccc_720w.webp" alt=""><img src="https://pic4.zhimg.com/80/v2-232860f90166957744578d4313ffd12f_720w.webp" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人体营养均衡</title>
      <link href="/posts/427016e9.html"/>
      <url>/posts/427016e9.html</url>
      
        <content type="html"><![CDATA[<h3 id="适应人群"><a href="#适应人群" class="headerlink" title="适应人群"></a>适应人群</h3><blockquote><p>适合人群：18-55岁健康人群</p></blockquote><h3 id="每日必须"><a href="#每日必须" class="headerlink" title="每日必须"></a>每日必须</h3><blockquote><ol><li>基础营养:  <font color="#4bacc6">糖类、脂肪、膳食纤维、水分</font></li><li>维生素:   <font color="#4bacc6">A，B1，B2，B3，B5 ，B6, B9 , B12，C，D，E，H，K</font></li><li>矿物质类:    <font color="#4bacc6">Ca，P，K， Mg，Na，Cl，S，Fe，Cu，I，Mn ，Zn，Co，Mo，F，Cr，Se</font>  <pre><code>          ( 钙，磷，钾，镁，钠，氯，硫，铁，铜，碘，锰，锌  钴，钼， 氟，铬，硒 )</code></pre><ol><li>氨基酸类:  <font color="#4bacc6">异亮氨酸，亮氨酸，赖氨酸，蛋氨酸，苯丙氨酸，苏氨酸，色氨酸，缬氨酸</font></li></ol></li></ol></blockquote><h4 id="1-基础营养"><a href="#1-基础营养" class="headerlink" title="1. 基础营养"></a>1. 基础营养</h4><ol><li>蛋白质:每日蛋白质的摄取量应为总热量的 10%。日建议摄取总量是 55~65克。</li><li>糖类：糖类的摄取量随个人热量的需要而定，总热量的 45~55%，不得少于 20%。</li><li>脂肪:每日脂肪的摄取量不宜超过总热量的 25~30%。女性摄取 55~65 克，男性每日不宜超过 90 克。 </li><li>膳食纤维：每日需求量 20~30 克。以每100大卡摄取10 克的膳食纤维为标准，应慢慢增加份量 </li><li>水分：H2O成人每日总需水量为每公斤体重 30~45cc，实际需补充的 随个人需求而调整。 </li></ol><h4 id="2-维生素类"><a href="#2-维生素类" class="headerlink" title="2. 维生素类"></a>2. 维生素类</h4><p>6、维生素 A ：<br>成年男性每天摄取量约 5,000 IU，女性为 4,200 IU。IU(国际单位)。每日应摄取 6~15 毫克的β-胡萝卜素。保持皮肤、头发及牙龈健康、维持视力正 常、使免疫力正常、帮助骨骼生长、促进成长<br>缺乏的危害：骨骼无法正常生长<br>富含维生素 A的食品：肝、牛奶、牛油、鱼肝油、人参、菠菜、 </p><p>7、维生素 B1：<br>成年男性每日摄取量 1.2~1.5 毫克，女性为 1~1.1 毫克<br>缺乏的危害：水肿、麻木<br>富含维生素B1的食品：54V鲜活螺旋藻、糙米、核果类、酵母粉 </p><p>8、维生素 B2：<br>成年男性每日摄取量为 1.2~1.8 毫克，女性为 1~1.5 毫克。能帮助营养素代谢的美容维生素<br>缺乏的危害：角膜炎、口角炎、皮肤炎、眼睛畏光<br>富含维生素B2的食品：奶酪、肉类、肉脏类、绿色蔬菜 </p><p>9、维生素 B3：<br>成年男性每日摄取量为 14~22 毫克，女性为 12~17 毫克，烟碱酸。有助DNA的合成.<br>富含维生素B3的食品：鱼、鸡肉、猪肝、黄绿色蔬菜、豆类、全榖制品、蛋、奶酪 </p><p>10、维生素 B5：<br>成人每日摄取量为 4~7 毫克，女性怀孕及哺乳期可增加到5-9 毫克（泛酸）<br>缺乏的危害：低血糖症、血液及皮肤异常、疲倦、抑郁、失眠、食欲不振，<br>富含维生素B5的食品：胚芽、糙米、麸皮、豌豆、花生、扁豆</p><p>11、维生素 B9：<br>成人每日摄取量为 200 微克。上限是 1 毫克。 帮助DNA合成，预防心脏病发作及癌症。孕妇适量摄取有利胎儿神经细胞的发育，促进乳汁分泌。<br>缺乏的危害：巨球性贫血、舌疮、身体虚弱无力、失眠<br>富含维生素B9的食品：新鲜的绿色蔬菜、、肝、肾、瘦肉、香蕉 </p><p>12、维生素 B12：<br>成人每日摄取量为 3 微克。能预防贫血的红色维生素。促进核酸之合成<br>缺乏的危害：出现贫血、消化不良<br>富含维生素B12的食品：牛肉、奶酪、蛋、牛奶、豆腐、肝脏 </p><p>13、维生素 C：<br>成人每日摄取量为 60~100 毫克。对抗万病源头的病菌及压力，并改善肌肤困扰。<br>缺乏的危害：坏血病、牙质疏松、伤口复原缓慢。<br>富含维生素C的食品：深绿及黄红色蔬菜、水果、奇异果、柠檬 </p><p>14、维生素 D :<br>成人每天摄取量约为 5~7.5 微克。与维生素 A、C、胆碱、钙、磷一同摄取可相辅相成，又称为阳光维他命。<br>缺乏的危害：骨齿不良、骨质疏松症。<br>富含维生素D的食品：鱼肝油、蛋、牛油、鱼类、肝、添加维生素D的鲜奶、(阳光可使皮下胆固醇换成维他命D)</p><p>15、维生素 E ：<br>成年男性每日摄取量为 12 毫克，女性为 10 毫克。保持血管健康、预防癌症，防止细胞氧化、治疗不孕等作用。<br>缺乏的危害：缺乏足够维他命E会引致溶血性贫血；<br>富含维生素E的食品：植物油、全麦谷类、南瓜 </p><p>16、维生素 H：<br>成人每日摄取量为 100~200 毫克。（生物素）帮助脂肪酸的形成<br>缺乏的危害：皮肤炎、食欲不振、恶心、贫血、头皮屑多、容易掉发。<br>富含维生素H的食品：猪肝、沙丁鱼、糙米、果仁、未精制的榖类</p><p>17、维生素 K：<br>成人约 65~80 毫克, 建议成人每公斤体重摄取 1 毫克。 </p><p>18、维生素B6：<br>能帮助女性保持脑部、神经、皮肤正常运作、维持神经系统及大脑正常功能的作用<br>缺乏的危害：恶心、情绪低落、皮肤炎。<br>富含维生素B6的食品：肉类、鱼类、蔬菜类、酵母、麦芽、肝 </p><h4 id="3-矿物质类"><a href="#3-矿物质类" class="headerlink" title="3. 矿物质类"></a>3. 矿物质类</h4><p>19、钙 Ca ：<br>青春期到 25 岁，男性每日应摄取 800 毫克，女性则为700毫克；到 25 岁以上，建议每日摄取量应达 600 毫克。孕妇或授乳中女性，每日所需钙质皆为 1000 毫克。为构成骨骼和牙齿的主要成分.<br>缺乏的危害：导致骨质密度降低、骨质疏松、骨骼变形、骨折。<br>富含钙 Ca的食品：奶类、深绿色蔬菜、豆类、</p><p>20、磷 P：<br>成人每日摄取量为 600 毫克。钙摄取不足时，就会发生骨质流失问题。<br>缺乏的危害：骨骼、发育不良、关节炎、肥胖、神经过敏、疲劳、食欲不振。<br>富含磷的食品：家禽类、鱼类、肉类、干果、牛奶、米糠、胚芽 </p><p>21、钾 K：<br>成人每日摄取量为 2,000 毫克。心跳正常规律、可预防中风。<br>缺乏的危害：高血压、容易中暑、疲劳。（爱喝咖啡、酒及嗜吃甜食者易缺乏。）富含钾的食品：柿干、蔬菜、 </p><p>22、镁 Mg：<br>成年男性每日摄取量为 360 毫克，女性为 315 毫克。为构成骨骼及牙齿之主要成分<br>缺乏的危害：缺乏镁会使神经受到干扰，长期服用利尿药或量饮酒时，容易缺乏镁<br>富含镁的食品：蔬菜、鱼肉、香蕉、五谷类、瘦肉、奶类、豆荚。 </p><p>23、钠 Na：<br>成人每日摄取量为 2~4 克。有助血压、神经、肌肉的正常运作。<br>缺乏的危害：缺乏钠会引致昏睡、低血糖、心悸等症状、血压高。<br>富含钠的食品：奶类、蛋类、肉类奶制品、 </p><p>24、氯 Cl：<br>每日营养素建议摄取量，RDNA &gt; 200 毫克/每日。一般人每日食盐的摄取量应低于 8~10 克。<br>缺乏的危害：钾、钠、氯三元素缺乏任何一种时，可使人生长停滞。<br>富含氯的食品：盐、海藻、麦粉、橄榄、奶类、肉类、 </p><p>25、硫 S：<br>每日营养素建议摄取量，RDNA &gt; 200 毫克/每日。为构成毛发、软骨、胰岛素等之必需成分。<br>缺乏的危害：浮肿、生长发育迟缓、心跳减慢、食欲不振。<br>富含硫的食品：蛋类、奶类、瘦肉类、豆荚类、坚果类 </p><p>26、铁 Fe：<br>成年男性每日摄取量为 10 毫克，女性为 15 毫克。 血液的主要成份，制造血红蛋白。对孩童成长及抵抗疾病亦非常重要，防止贫血<br>缺乏的危害：贫血、疲倦、抵抗力降低、发育不良等。<br>富含铁的食品：肝及内脏类、蛋黄、牛奶、瘦肉、贝类、海藻类、豆类、 </p><p>27、铜 Cu：<br>成人每日摄取量为 1.6~3 毫克。结合铁及血红蛋白，改善贫血。<br>缺乏的危害：会影响骨骼间的缔结组织、贫血。<br>富含铜的食品：肝脏、牡蛎、芝麻、瘦肉、坚果类 </p><p>28、碘 I：<br>成人每日摄取量为 90~140 微克。<br>甲状腺球蛋白的主要成分，降低血中胆固醇值、促进体脂肪燃烧、帮助减肥。<br>缺乏的危害：甲状腺肿大、肥胖、影响儿童发育。<br>富含碘的食品：海藻、海产类、肉类、蛋、奶类、五谷类、绿叶蔬菜 </p><p>29、锰 Mn ：<br>成人每日摄取量为 3.5~4 毫克。<br>缺乏的危害：影响骨骼形成、降低性荷尔蒙的合成及怀孕能力、性功能衰退。<br>富含锰的食品：糠皮、坚果、豆荚类、莴苣、菠萝。 </p><p>30、锌 Zn：<br>成年男性每日摄取量为 15 毫克，女性为 12 毫克。<br>帮助新皮肤生长、细胞再生、强化免疫力。又称为壮阳矿物质，对前列腺的功能、生殖器官的发育有帮助<br>缺乏的危害：发育不全、前列腺异常、妨碍RNA、DAN的生成、性交能力衰退<br>富含锌的食品：海产、牛肉、羊肉、蛋、鱼、未精制谷物类、坚果 </p><p>31、钴 Co ：<br>只需在日常饮食中含有微量便可，人体必须的微量矿物质，<br>缺乏的危害：贫血、恶心、牙龈出血、食欲不振、体重减轻<br>富含钴的食品：绿叶蔬菜、动物肝、肾脏、荞麦</p><p>32、钼 Mo：<br>成人每日摄取量为 25~30 微克。<br>缺乏的危害：不孕症、疲劳、性无能<br>富含钼的食品：大豆、蔬菜、白菜</p><p>33、氟 F：<br>每日摄取 20 毫克以上。构成骨骼和牙齿的重要成份。能够强化牙齿的珐琅质，对预防蛀牙方面很有效。<br>缺乏的危害：贫血、成长发育不良、生殖能力衰弱。使牙齿失去光泽<br>富含氟的食品：杏仁、茶叶、苹果、牛奶、鸡蛋、蜂蜜、麦芽、日常的饮用水、菠菜。 </p><p>34、铬 Cr ：<br>成年男性每日摄取量为 30~35 微克，女性为 20~25 微克。活化胰岛素，号称减肥矿物质。在糖尿病及低血糖患者体内，<br>缺乏的危害：醣类无法顺利代谢、严重可能引起糖尿病、动脉硬化。<br>富含铬的食品：谷类、豆类、肉类、坚果</p><p>35、硒 Se ：<br>成人每日摄取量为 50 微克，摄取上限是 400 微克。<br>独立或与维他命E配合，成为有效的抗氧代剂、保持年轻，帮助治疗女性更年期热潮红，与毛发的生长有关。<br>缺乏的危害：缺乏硒会使人体衰老，严重缺乏甚至会导致心肌毛病如心肌衰竭。<br>富含硒的食品：竹筴鱼、肉类、蔬菜、米糠、南瓜 </p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ol><li><p>一般成人根据体重及活动量来看，女性一天约需要 1500~1800kcal(大卡)，男性约需 2000-2300kcal， </p></li><li><p>胺基酸是构成蛋白质的物质，人体内约有 22 种胺基酸，9 种称为「必需胺基酸」 </p></li><li><p>维生素分水溶性：维生素 B 群及维生素 C；脂溶性：维生素 A、D、E 及 K。水溶性维生素易在烹调过程遭破坏。</p></li><li><p>所谓的国际单位(I.U.)是评估维生素 A、D 两种营养素含量的计量单位</p></li></ol><h4 id="4-氨基酸类"><a href="#4-氨基酸类" class="headerlink" title="4. 氨基酸类"></a>4. 氨基酸类</h4><p>36、异亮氨酸；能维持机体平衡，治疗精神障碍 </p><p>37、亮氨酸；如果缺乏时，会停止生长，体重减轻 </p><p>38、赖氨酸；增强免疫能力，改善发育,促进骨骼生长。</p><p>39、蛋氨酸；提高肌肉活力的功能 。</p><p>40、苯丙氨酸:促进甲状腺素和肾和肾上腺素的合成 </p><p>41、苏氨酸: 人体必需，缺乏时会使人消瘦，甚至死亡 </p><p>42、色氨酸:促进血红蛋白的合成. </p><p>43、缬氨酸；促使神经系统功能正常. </p><p>注：以上氨基酸为体内不可合成又必须的氨基酸，长期缺乏会导致死亡，氨基酸相互作用、缺一不可，缺乏任何一种都会导致其它氨基酸也无法发挥作用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>货源渠道</title>
      <link href="/posts/3024c976.html"/>
      <url>/posts/3024c976.html</url>
      
        <content type="html"><![CDATA[<h3 id="垂直式电商网站"><a href="#垂直式电商网站" class="headerlink" title="垂直式电商网站"></a>垂直式电商网站</h3><blockquote><p>产品统一管理，根据需求进行展示，如出现产品问题可以全部下架，灵活高效，保证客户对产品的评分不低于规定；</p><p>垂直式电商网站:供应商提供低库存风险、低成本、高效率的渠道，进行品牌推广，市场调研；通过对客户行为分析，消费能力水平的评估，为供应商提供数据支持，一起解决库存问题；</p><p>同类产品，商品价格透明，物流简便，品质有保障；过供应商和物流渠道资源整合，专业的垂直电商网站的品质服务和产品保障. </p><p>深挖供应链，注重精细化运营是垂直电商的优势，对供应链的完善和独特的产品服务，达到与综合电商差异化的效果；品牌是一个长年累月的过程，每个环节要不断优化，把事情做到最细，带来更好的用户体验和最大的效益；要非常关注用户的转化率、留存率和粘性，越来越多的自然流量才会避免高成本的怪圈。</p><p><strong>排名前十的垂直电商网站</strong></p><p><strong>1． 阿芙精油</strong><br>阿芙精油是成立于2009年的化妆品电商，每年有几个亿的销售，他坚持少而精的订单数，专注于品牌的建立，把一个小商品做到极致；</p><p><strong>2． 春水堂</strong><br>春水堂是成立于2003年的情趣用口店，他弱化了性的色彩，讲究设计、美感，更像是个玩具，开辟了上千亿的市场；</p><p><strong>3． 酒仙网</strong><br>酒仙网是成立于2009年的酒类电商网站，在每年规模高达上万亿的酒类市场，酒仙网将资源整合到线上渠道，把酒卖的更好；</p><p><strong>4． 裂帛</strong><br>裂帛是成立于2006年的女装电商，创始人将最文艺、最有范的女装与其他品牌区别开来，在2018年的“双11”当中，品牌销售过亿，成为当日销售冠军；</p><p><strong>5． 钻石小鸟</strong><br>钻石小鸟是成立于2002年的珠宝电商，他不仅懂得品牌营销，还有能力把握整个供应链，与国际大牌设计合作，推出有自身特色的钻石产品；</p><p><strong>6． 本来生活</strong><br>本来生活是成立于2018年的生鲜电商，他根据用户的需求点，推出的“禇橙”取得了轰动效应，带动了本来生活的流量；</p><p><strong>7． Roseonly</strong><br>Roseonly是成立于2018年的鲜花电商，出于一种专爱的概念，需要自己把名字和收花人的名字绑定，一辈子只能送给一个人，不能更改，今年营收将达到几千万；</p><p><strong>8． 哇塞网</strong><br>哇塞网是成立于2008年的手工艺品电商，其定位是创意生活服务，是国内最大的手工原创产品、艺术品在线市场，满足了高要求、追求品质生活的人群；</p><p><strong>9． 贡天下</strong><br>贡天下是成立于2018年的特产电商，专注于全天下特产，每个地方开设分馆之后，把当地特产放到线上售卖，成为中国最大的特产网购商城；</p><p><strong>10. 蛋生网</strong><br>蛋生网是成立于2018年的母婴纺织品电商，主打有机棉天然材质的服装，采用向上游供应商定制产品的模式，提高供应链的效率，节约成本，销售已经接近千万。</p></blockquote><h3 id="供货渠道"><a href="#供货渠道" class="headerlink" title="供货渠道"></a>供货渠道</h3><h4 id="衣服批发"><a href="#衣服批发" class="headerlink" title="衣服批发"></a>衣服批发</h4><blockquote><ol><li>织里童装网(童装批发)</li><li>搜款网(女装批发)</li><li>货捕头(女装批发)</li><li>生意网(童装批发)</li><li>四季星座(男装,女装)</li><li>网商园(男装批发)</li><li>酷有拿货网(服装批发)</li><li>衣联网(服装档口)</li><li>批批网(服装批发)</li><li>杭州女装网(女装,男装,童装,鞋批发)</li><li>搜鞋网(鞋子批发)</li><li>53货源网(服装鞋包)</li><li>爱买卖(女鞋批发)</li><li>新款网(女鞋批发)</li><li>开山网(鞋子批发)</li></ol></blockquote><h4 id="化妆品"><a href="#化妆品" class="headerlink" title="化妆品"></a>化妆品</h4><blockquote><ol><li>个秀名妆</li><li>优分销</li></ol></blockquote><h4 id="母婴"><a href="#母婴" class="headerlink" title="母婴"></a>母婴</h4><blockquote><ol><li>挚爱母婴网</li></ol></blockquote><h4 id="珠宝"><a href="#珠宝" class="headerlink" title="珠宝"></a>珠宝</h4><blockquote><ol><li>批发户(珠宝饰品)</li></ol></blockquote><h4 id="食品"><a href="#食品" class="headerlink" title="食品"></a>食品</h4><blockquote><ol><li>58食品网</li></ol></blockquote><h4 id="其他产品"><a href="#其他产品" class="headerlink" title="其他产品"></a>其他产品</h4><blockquote><ol><li>义务小商品城(各类小东西)</li><li>多商网(全品类)</li><li>包牛牛(箱包批发)</li><li>众人店(特产批发)</li><li>北极光(跨境电商各类产品)</li><li>工邦邦(工业用品批发)</li><li>马可波罗网(机械,五金批发)</li><li>货源之家(各类批发)</li><li>工业汇(工业产品批发)</li><li>美乐乐(家具批发)</li></ol></blockquote><p>​                                                                                                                                                                                                                                                                                                                                               </p>]]></content>
      
      
      
        <tags>
            
            <tag> 电商 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10种电商模式</title>
      <link href="/posts/f35fa098.html"/>
      <url>/posts/f35fa098.html</url>
      
        <content type="html"><![CDATA[<h3 id="传统电商"><a href="#传统电商" class="headerlink" title="传统电商"></a>传统电商</h3><blockquote><p>传统电商平台一般有淘宝/天猫,京东,苏宁,唯品会,网易考拉,网易严选,寺库,小米有品,什么值得买</p><p>传统电商通过零售,营销,物流,金融等业务整合,形成供给侧的网络协同效应,从而提高整个组织效应,进一步分摊服务成本</p></blockquote><h3 id="社交电商"><a href="#社交电商" class="headerlink" title="社交电商"></a>社交电商</h3><h4 id="社交内容电商"><a href="#社交内容电商" class="headerlink" title="社交内容电商"></a>社交内容电商</h4><blockquote><p>社交电商是以消费者人际关系为着力点,基于人与人的分享裂变`产生聚合效应,反向降低平台获客成本与服务成本</p></blockquote><div class="table-container"><table><thead><tr><th>类型</th><th>商业模式</th><th>盈利构成</th><th>代表平台</th></tr></thead><tbody><tr><td>闭环型</td><td>通过内容运营在自营平台上<br />实现引流,变现,服务,留存全闭环</td><td>平台入驻费+商家服务费+<br />广告/营销收入+上平销售</td><td>小红书,每日一淘</td></tr><tr><td>导流型</td><td>通过内容运营引流.留存并导向第三方(平台或商家)实现变现</td><td>销售返佣+广告/营销收入</td><td>什么值得买</td></tr></tbody></table></div><h4 id="社交分享电商"><a href="#社交分享电商" class="headerlink" title="社交分享电商"></a>社交分享电商</h4><blockquote><p>通过情感分享/利益激励吸引社会关系链对分享者信任的潜在消费者,导向第三方平台消费变现(<strong>CPS营销推广收入</strong>)</p></blockquote><h4 id="社交零售电商"><a href="#社交零售电商" class="headerlink" title="社交零售电商"></a>社交零售电商</h4><blockquote><p>B2C型:传统零售通过新建社交零售渠道,改良原有零售服务能力(<strong>京喜,苏宁易购</strong>)</p><p>S2B2C型:自带社交的电商基因的平台,从零组件商品供应,物流,售后等零售服务能力,<br>通过小B分销,分享裂变等多种形式引流变现(<strong>云集微店,贝店</strong>)</p><p>LBS型: 通过培育或签约团长进行社群运营,集聚规模订单完成销量(<strong>食享会</strong>)</p></blockquote><h4 id="社交电商服务商"><a href="#社交电商服务商" class="headerlink" title="社交电商服务商"></a>社交电商服务商</h4><blockquote><p>1.工具服务:通过普适型/定制型工具/系统/整体解决方案等产品,为客户的业务模型和交易底层提供技术服务支持(有赞,微盟)</p><p>2.以”中间商”角色承接供应商与社交平台之间的招商/运营深度对接服务,为客户迅速拓展渠道,实现良好成单率(各电商平台代入驻服务商)</p><p>3.咨询服务:针对社交电商领域各种新兴模式,操作工具等制定相关课程,为客户提供培训/顾问咨询服务(各电商培训机构)</p></blockquote><h4 id="生鲜电商"><a href="#生鲜电商" class="headerlink" title="生鲜电商"></a>生鲜电商</h4><blockquote><p>生鲜电商指的是利用互联网在网上销售生鲜类产品,如新鲜水果,蔬菜,生鲜肉类;受疫情影响,生鲜电商强势爆发.该赛道目前竞争依然白热化,<strong>盒马,每日优鲜,叮咚买菜,美团买菜</strong>等平台</p><p>主要盈利模式为前置仓模式,而前置仓模式是指,更靠近消费者的小型仓储单位,一般设置在消费者集中的社区附近, 生鲜产品销售方利用冷链物流(冷藏车)提前将产品配送至前置仓储,等用户下单,再由仓库内员工打包配合最后一公里上门配送,无论是订单响应速度还是配送成本,都比直接配送有很大优势</p></blockquote><h4 id="母婴电商"><a href="#母婴电商" class="headerlink" title="母婴电商"></a>母婴电商</h4><blockquote><p>母婴电商是指以母婴产品及周边服务为主营类目的垂直类电商平台,二胎政策放开,母婴吃到了红利</p><p><strong>1.渠道下沉</strong>: 蜜芽与妇儿医院美中宜和达成战略合作,战略投资亲子娱乐悠游堂,积极涉足下游产业链</p><p><strong>2.跨境业务</strong>: 以保税仓直邮模式获取母婴跨境电商份额(<strong>贝贝,蜜芽</strong>)</p><p><strong>3.闲置交易</strong>:提供二手母婴产品交易平台(<strong>花粉儿</strong>)</p><p><strong>4.母婴社区</strong>: 为母婴话题交流提供平台(<strong>宝宝树</strong>)(<strong>宝宝树母婴平台有潜力巨大的KOC和KOL</strong>)</p></blockquote><h4 id="宠物电商"><a href="#宠物电商" class="headerlink" title="宠物电商"></a>宠物电商</h4><blockquote><p>宠物电商拥有千亿的市场规模,以<strong>e宠商城</strong>与<strong>波奇宠物</strong>为代表的垂直类宠物电商平台蓬勃发展</p><p>目前来看,E宠商城正在全面布局 <strong>UGC</strong>与<strong>PGC</strong>内容导购模块,这将更适应新一代宠物家长的习惯</p><p><strong>解释</strong></p><p>​         <strong>UGC</strong>：用户生产内容。又作UCC。属于口碑营销,平台提供功能，一般用户可以通过平台，发布传播自己的UGC给其他用户看。平台通过给予话语权、平台功能，让一般用户能够自主创造内容，增加平台的活跃度，平台从而越做越大，吸引更多的用户。</p><p>​          <strong>PGC</strong>：专业生产内容。又作PCC。平台拥有了大量用户还不够，还得留住大量用户。从“拉”到“留”，需要大量优质的内容。而仅仅靠UGC是不够的。需要更加专业化、更加公信力、更加有价值的内容。这，就是PGC。</p></blockquote><div class="table-container"><table><thead><tr><th></th><th>E宠商城</th><th>波奇宠物</th></tr></thead><tbody><tr><td>产品定位</td><td>提供有保障的产品和有品质的服务</td><td>打造”社区+电子商务+服务”三位一体的全方位互联网平台</td></tr><tr><td>上线时间</td><td>2009年</td><td>2014年</td></tr><tr><td>slogen</td><td>品质养宠,尽在E宠</td><td>波奇全面关爱宠物生活</td></tr><tr><td>用户群体</td><td>享受简单,品质购物体验的宠物家长</td><td>喜欢社交的宠物家长</td></tr><tr><td>产品优势</td><td>专注宠物用品和宠物服务,提供养宠课堂,视频内容</td><td>宠物爱好者的综合型网站</td></tr></tbody></table></div><h4 id="垂直特卖"><a href="#垂直特卖" class="headerlink" title="垂直特卖"></a>垂直特卖</h4><blockquote><p>打“大牌品质 工厂价格”的C2M反向定制平台——必要。</p><p>必要是全球首家用户直连制造（C2M）的电商平台，采用C2M模式实现用户到工厂的两点直线连接，去除所有中间流通环节，连接顶级设计师、顶级制造商，为用户提供顶级品质，平民价格，个性其专属的商品。根据其价值主张，可以看出，必要商城只为用户提供“低价”、“高品”和“专属”的商品。主要盈利模式为7%的销售扣点，最大程度提高产品性价比。</p></blockquote><h4 id="导购电商"><a href="#导购电商" class="headerlink" title="导购电商"></a>导购电商</h4><blockquote><p>上通过API接口导入第三方平台商品，向下以分销的模式发展会员客户（部分涉及会员分级），盈利模式主要为：①佣金差价；②会员费；③部分自营商品毛利。</p><p>目前行业内做的比较成熟的平台为<strong>花生日记</strong>，当前发展势头比较猛的有<strong>淘小铺</strong>和<strong>芬香</strong>。</p><p>其中，花生日记为综合性的导购平台，淘小铺聚焦阿里系商品（与淘宝强结合），芬香聚焦京东系商品（与京东+微信强结合）。</p><p>友情提示，该模式裂变效果很吓人，请不要轻易测试。</p></blockquote><h4 id="跨境电商"><a href="#跨境电商" class="headerlink" title="跨境电商"></a>跨境电商</h4><blockquote><p>据《2018年度中国跨境电商市场数据监测报告》显示，2018年中国跨境电商交易规模达9万亿元，同比增长11.6%。其中，出口占比达到78.9%，进口比例21.1%。</p><p>目前除头部电商企业外，出口领域做的比较好的有<strong>shopee、Akulaku、Lazada</strong>等，该类型电商的运营模式其实可以完全参考国内主流电商的操盘思路（<strong>店群或精细化运营</strong>），同时结合所在站点的用户习惯；进口领域主要集中在头部电商平台，如<strong>天猫国际、京东国际、网易考拉</strong>等，同时垂直领域<strong>洋码头</strong>做的还不错。</p><p>以洋码头为例，“买手商家制”是其最核心的优势。洋码头主打全球化商品，笼盖83个国家和区域的80万件不同商品，拥有高达6万名的专业买手,他们当中不乏一些网络红人和专业买家。这些人都为洋码头实现全球个性化的消费推荐提供了一个更好的载体,同时也是捍卫商品源头品质，提升海外购物体验的重要后盾。</p></blockquote><h4 id="小程序电商"><a href="#小程序电商" class="headerlink" title="小程序电商"></a>小程序电商</h4><blockquote><p>随着微信之父张小龙正式宣布小程序将于2017年1月9日正式上线以后，基于小程序生态的电商模式层出不穷，头部的PDD、JD等自带流量自不必说，咱们重点探讨“专注微信品效营销”的小电铺。</p><p>该平台自诩“微信生态最大的小程序电商服务平台”，向上接入了1000+品牌的10万+SKU(销售属性)，向下发展了3000+自媒体，拥有10亿+的日PV(展现量PV：该商品被浏览的次数)。</p><p>另外，值得关注的是今年全新上线的“腾讯智慧零售”小程序，作为去中心化流量分发平台+私域流量导流平台，同时具备基于LBS的产品能力，腾讯智慧零售未来的想象空间非常大。</p></blockquote><p>注:<strong>LBS（Location-based service）是一种增值服务，是在确定用户位置的前提下为固定或者移动的用户提供各种与位置相关的服务。</strong>搭建线上门店，依靠平台的LBS推荐机制获取线上流量；发起营销活动，通过LBS精准广告投放进行引流，线上沟通，线下交易；</p><h4 id="尾货分销模式"><a href="#尾货分销模式" class="headerlink" title="尾货分销模式"></a>尾货分销模式</h4><blockquote><p>该模式和第七种导购模式完全不同，尾货分销是指仅面向B端或小B客户，提供品牌商品的分销能力，类似于阿里巴巴。目前做的比较好的有主打“品牌分销商首选”的<strong>爱库存</strong>。</p><p>运营模式为向上招募品牌商家，由品牌商家提供商品（折扣尾货）与物流服务，向下付费招募分销商（仅1级），平台负责指导分销商运营，由分销商负责销售。平台与分销商按一定比例分配商品差价。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 电商 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外挂标签引入</title>
      <link href="/posts/98c6183b.html"/>
      <url>/posts/98c6183b.html</url>
      
        <content type="html"><![CDATA[<h3 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式:&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs, 2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br><span class="line"></span><br><span class="line">带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line">带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line">带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line">带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line">键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line">密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><p><p><p><p></p><h3 id="段落文本"><a href="#段落文本" class="headerlink" title="段落文本"></a>段落文本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式:&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">字体:logo, code</span><br><span class="line">颜色:&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;</span><br><span class="line">大小: small, h4, h3, h2, h1, large, huge, ultra</span><br><span class="line">对齐方向: left, center, right</span><br><span class="line">彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line">超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><p><p><p><p></p><h3 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式:&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;默认情况&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>随机动漫Api</title>
      <link href="/posts/d3d28240.html"/>
      <url>/posts/d3d28240.html</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>动漫API</p></div><p><p><br> <a href="https://img.xjh.me/random_img.php?type=bg&amp;return=302">https://img.xjh.me/random_img.php?type=bg&amp;return=302</a></p><p><p><br><a href="https://air.moe/ranimg/api.php">https://air.moe/ranimg/api.php</a></p><p><p><br><a href="https://imgapi.xl0408.top/index.php">https://imgapi.xl0408.top/index.php</a></p><p><p><br><a href="https://www.dmoe.cc/random.php">https://www.dmoe.cc/random.php</a></p><p><p><br><a href="https://api.hanximeng.com/ranimg/api.php">https://api.hanximeng.com/ranimg/api.php</a></p><p><p><br><a href="https://api.btstu.cn/sjbz/?lx=dongman">https://api.btstu.cn/sjbz/?lx=dongman</a></p><p><p><br><a href="https://www.dmoe.cc/random.php">https://www.dmoe.cc/random.php</a></p><p><p><br><a href="https://api.ghser.com/random/api.php">https://api.ghser.com/random/api.php</a></p><p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>for循环</title>
      <link href="/posts/3f209729.html"/>
      <url>/posts/3f209729.html</url>
      
        <content type="html"><![CDATA[<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (循环变量初始化1;循环条件2;循环变量迭代3) &#123;</span><br><span class="line"> 代码体4;</span><br><span class="line"> break;//执行到break跳出整个for循环</span><br><span class="line"> continue;//执行到continue跳出这次循环</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">循环顺序  ：执行一次1，2，4，3，2，4，3 ……</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li><p>循环条件是返回的一个布尔值的表达式</p></li><li><p>for(;循环判断条件;)中的初始化和变量迭代可以写到其他地方，但是两边的分号不能省略</p></li><li><p>循环初始值，可以有多条初始化语句，但类型必须一样</p></li><li><p>循环变量迭代，也可以有多条语句，逗号分隔</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i = 2; 将初始变量放在for循环外，可以增大i变量的作用域</span><br><span class="line">for(;i&lt;=5;i++) &#123;</span><br><span class="line">System.out.println(&quot;hello,world&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//求打印所有9的倍数；并将其个数统计，及总和</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line"> //定义变量number用来接收键盘值</span><br><span class="line">Scanner scanner= new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入一个数字&quot;);</span><br><span class="line">int number = scanner.nextInt();</span><br><span class="line">        int s = 0;</span><br><span class="line">int count = 0;</span><br><span class="line">treble = 9; //treble是倍数</span><br><span class="line"></span><br><span class="line">for(int i=1;i&lt;=number;i++) </span><br><span class="line">&#123;</span><br><span class="line">if(i % treble == 0) </span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;i=&quot;+i);</span><br><span class="line">s++;</span><br><span class="line">count+=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;s=&quot;+s);</span><br><span class="line">System.out.println(&quot;count=&quot;+count);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//求出所有队伍对阵打乒乓的各种可能</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line">Scanner scanner=  new Scanner(System.in); </span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入最大值&quot; );</span><br><span class="line">int number = scanner.nextInt();</span><br><span class="line"></span><br><span class="line"> int count=0;</span><br><span class="line">//for (  int i=0; i&lt;(number/2+1); i++)</span><br><span class="line">for (  int i=0; i &lt; number; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">if (i&lt;(number/2+1))</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(i + &quot;+&quot; + (number-i) + &quot;=&quot;+number );</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;一共有&quot; + count + &quot;种可能&quot; );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//九九乘法表</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line"></span><br><span class="line">for( int i=1;i&lt;10;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(int k=1;k&lt;=i;k++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.print(k+&quot;x&quot;+i+&quot;=&quot;+(k*i)+&quot;  &quot;); </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//倒立九九乘法表</span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line"></span><br><span class="line">for( int i=9;i&gt;0;i--)</span><br><span class="line">&#123;</span><br><span class="line">for(int k=1;k&lt;=i;k++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.print(k+&quot;x&quot;+i+&quot;=&quot;+(k*i)+&quot;  &quot;);           </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="while循环控制"><a href="#while循环控制" class="headerlink" title="while循环控制"></a>while循环控制</h3><h4 id="基本语法：-1"><a href="#基本语法：-1" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 循环变量初始化 1  </span><br><span class="line">while  （循环条件2) &#123;</span><br><span class="line">循环体3；</span><br><span class="line">循环变量迭代4；</span><br><span class="line">&#125;</span><br><span class="line">流程：1 &gt; 2 &gt; 3 &gt; 4 &gt; 2 &gt; 3 &gt; 4</span><br></pre></td></tr></table></figure><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//实现1-100，以内被3整除的数</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line">int i =1;</span><br><span class="line">    while(i&lt;=100)</span><br><span class="line">    &#123;</span><br><span class="line">            if(i%3 == 0) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while循环控制"><a href="#do-while循环控制" class="headerlink" title="do-while循环控制"></a>do-while循环控制</h3><h4 id="基本语法：-2"><a href="#基本语法：-2" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 循环变量初始化1</span><br><span class="line"> do&#123;</span><br><span class="line">循环体2；</span><br><span class="line">循环变量迭代3；</span><br><span class="line">&#125;while（循环条件4); </span><br><span class="line">执行顺序 1，2，3，4，2，3，4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多重循环控制"><a href="#多重循环控制" class="headerlink" title="多重循环控制"></a>多重循环控制</h3><ol><li>将一个循环体放入另一个循环中，就形成了嵌套循环。 for，while，do while 均可作为内外循环。</li><li>嵌套循环 就是<strong>将内层循环当成循环体</strong>，只有内层循环条件为false，结束内层循环，结束外层当前的一次循环；当外层条件还是T，则再进入内部循环进行循环，直到内部条件再次false，跳出内部，跳出外部当次循环。</li><li>设置外层循环次数位m次，内层为n次，则内部循环体实际需要执行m*n次</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//统计3个班学生的平均值，各班及格人数</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line">Scanner scanner= new Scanner(System.in);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">double   Sum=0;//三个班级成绩总和</span><br><span class="line">   </span><br><span class="line">for(int m=1;m&lt;=3;m++) &#123; // m 代表班级</span><br><span class="line"></span><br><span class="line">double sum=0; //一个班级成绩总和</span><br><span class="line">int count =0; //计数器</span><br><span class="line"></span><br><span class="line">      for(int i=1;i&lt;6;i++) &#123; // i 代表学生</span><br><span class="line"></span><br><span class="line">System.out.println(m+&quot;班的学生，请输入你的成绩&quot;);</span><br><span class="line">double scores = scanner.nextDouble();//定义一个变量scores用于接收成绩</span><br><span class="line">if(scores &gt;=60) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum+=scores;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(m+&quot;班的平均成绩&quot;+(sum / 5)+&quot; 及格人数是&quot;+count+&quot;\n&quot;);</span><br><span class="line">Sum +=sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;三个班级的平均成绩是&quot;+(Sum / 15));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//打印金字塔</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line">//外循环控制行数，内部两个循环依次打印 空格+*</span><br><span class="line">for( int i=1;i&lt;=6;i++) &#123;  //假设i代表行数</span><br><span class="line">for(int  m=1;m&lt;=6-i;m++) &#123;  //m控制空格数</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">for(int n=1;n&lt;=2*i-1;n++) &#123; //n控制*的个数</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//打印空心金字塔</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line">int  totalLevel=6;//层数，先死后活</span><br><span class="line">//外循环控制行数，内部两个循环依次打印 空格+*</span><br><span class="line">for( int i=1;i&lt;=totalLevel;i++) &#123;  //假设i代表行数</span><br><span class="line">for(int  m=1;m&lt;=totalLevel-i;m++) &#123;  //m控制空格数</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">for(int n=1;n&lt;=2*i-1;n++) &#123; //n控制*的个数</span><br><span class="line">if(( n==1 || n==2*i-1) || i==totalLevel)&#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line"></span><br><span class="line">                     &#125;</span><br><span class="line"> else</span><br><span class="line">System.out.print(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标识符的命名规则规范</title>
      <link href="/posts/cb2b897.html"/>
      <url>/posts/cb2b897.html</url>
      
        <content type="html"><![CDATA[<h3 id="标识符的命名规则规范"><a href="#标识符的命名规则规范" class="headerlink" title="标识符的命名规则规范"></a>标识符的命名规则规范</h3><ol><li><p>java 对各种变量，方法，类命名时使用的字符称为标识符</p></li><li><p>凡事自己可以起名字的地方都是标识符</p></li></ol><h4 id="标识符的命名规则"><a href="#标识符的命名规则" class="headerlink" title="标识符的命名规则"></a>标识符的命名规则</h4><ol><li>由26个英文字母大小写， 0-9  ，_或$组成</li><li>数字不能开头</li><li><strong>不可以使用关键字（stastic）和保留字（goto），但可以包含他们。</strong></li><li><strong>java中严格区分大小写</strong>，长度无限制</li><li>标识符不能有空格</li></ol><h4 id="标识符的命名规范"><a href="#标识符的命名规范" class="headerlink" title="标识符的命名规范"></a>标识符的命名规范</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://pic.diydoutu.com/bq/1994.gif" alt="斧头帮帮主琛哥：这个就叫专业GIF动图-斧头帮帮主,功夫,Kung Fu Hustle,周星驰,香港电影"></h4><ol><li><p>包名 ： 所有单词小写     puda.fike.loke包</p></li><li><p>类名/接口名：大驼峰法，所有首字母大写          StudentResult</p></li><li><p>变量名/方法名 ： 驼峰法（小驼峰），第一个单词小写，第二个大写，彼此类推。studentResult</p></li><li><p>常量名 ：所有字母都大写。每个单词用下划线拼接  Student_Result</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>switch分支结构</title>
      <link href="/posts/254834b.html"/>
      <url>/posts/254834b.html</url>
      
        <content type="html"><![CDATA[<p><img src="C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220123155741868.png" alt="image-20220123155741868"></p><h3 id="switch分支结构"><a href="#switch分支结构" class="headerlink" title="switch分支结构"></a>switch分支结构</h3><p><img src="C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220123163555813.png" alt="image-20220123163555813"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">格式</span><br><span class="line"></span><br><span class="line">switch(表达式)</span><br><span class="line">&#123;</span><br><span class="line">case 常量1:   //当表达式的值等于常量1，就执行语句块1</span><br><span class="line">语句块1；</span><br><span class="line">break;      //表示退出switch结构，若没有break，则穿透到语句块2，并执行下去，直到break退出</span><br><span class="line">case 常量2:</span><br><span class="line">语句块2；</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">…………</span><br><span class="line">case 常量n:</span><br><span class="line">语句块n;</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">default:  //如果上面都没匹配上，则执行default</span><br><span class="line">default 语句块;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p>表达式数据类型，应和case后的<strong>数据类型一样</strong>，</p><p>或者可以<strong>自动转换</strong>可以相互比较类型的，比如输入的是字符，而常量是int</p></li><li><p>switch（表达式）中的表达式的返回值必须是：（byte,short,int,char,String，enum[枚举]）</p></li><li><p>case 子句中的值<strong>必须是常量</strong>，而不能是变量</p></li><li><p><strong>default 子句是可选的</strong>，当没有匹配的case时，执行default</p></li><li><p>break语句是用来帮助一个case分支跳出switch语句，<strong>如果没写break，则会穿透执行</strong>下一个case中的语句块，一直执行下去，直到出现break/执行完default语句也自动跳出</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">switch(a)//首先表达式满足 byte,short,int,char,enum[枚举]，String六个其中之一</span><br><span class="line">&#123;</span><br><span class="line">    case 50 :   //也是可以的，字符a会自动转换为97</span><br><span class="line">System.out.println(&quot;&quot;);</span><br><span class="line">break;</span><br><span class="line">case &#x27;d&#x27;+1 : //也行，结果还是常量，且数据类型和switch中的一致</span><br><span class="line">System.out.println(&quot;&quot;);</span><br><span class="line">break;</span><br><span class="line">default  :  //可以没有</span><br><span class="line">                System.out.println(&quot;&quot;);</span><br></pre></td></tr></table></figure><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//接收一个字符（a-g），分别代表抽奖礼品</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Scanner scanner= <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个字符【a-g】&quot;</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">letter</span> <span class="operator">=</span>  scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(letter)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;中了一等奖&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;中了二等奖&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;中了三等奖&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line"> System.out.println(<span class="string">&quot;纪念奖&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//使用switch 打印月份的季节</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class text</span><br><span class="line">&#123;</span><br><span class="line">public static void main (String[] args)</span><br><span class="line">&#123;</span><br><span class="line">Scanner scanner= new Scanner(System.in);</span><br><span class="line">int mounth = scanner.nextInt();</span><br><span class="line"></span><br><span class="line"> switch (mounth)</span><br><span class="line"> &#123;</span><br><span class="line">case 3:</span><br><span class="line">case 4:</span><br><span class="line">case 5:</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">              break;</span><br><span class="line"> </span><br><span class="line"> case 12:</span><br><span class="line"> case 1:</span><br><span class="line"> case 2:</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">              break;</span><br><span class="line"> </span><br><span class="line"> case 6:</span><br><span class="line"> case 7:</span><br><span class="line">case 8:</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">              break;</span><br><span class="line">  </span><br><span class="line"> case 9:</span><br><span class="line">case 10:  </span><br><span class="line">case 11:</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">              break;</span><br><span class="line">  </span><br><span class="line">  default :</span><br><span class="line">  System.out.println(&quot;你输入的有误&quot;);</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>super关键字</title>
      <link href="/posts/f6ea766.html"/>
      <url>/posts/f6ea766.html</url>
      
        <content type="html"><![CDATA[<h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>概念: super代表父类的引用,用于访问父类的属性,方法,构造器</p><h3 id="使用super的好处"><a href="#使用super的好处" class="headerlink" title="使用super的好处"></a>使用super的好处</h3><ol><li><p>调用父类构造器的好处,分工明确,<strong>父类属性由父类初始化,子类的属性由子类初始化</strong></p></li><li><p>当子类中有和父类的方法/属性重名时,为了访问父类的成员,必须通过super,如果没有重名,super,this直接访是一样的效果</p></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>子类调用属性和方法,一般从子类,父类,Object依次找属性和方法</li><li>super 的访问不限于直接父类,super访问遵循就近原则</li><li>如果本类有属性/方法,则直接调用本类,若没有,则找父类,依次找下去,但中间不能有private卡住,否则的话,不能直接调用,只能<strong>间接调用</strong></li></ol><h3 id="super和this的区别"><a href="#super和this的区别" class="headerlink" title="super和this的区别"></a>super和this的区别</h3><div class="table-container"><table><thead><tr><th style="text-align:left">区别点</th><th>this</th><th>super</th></tr></thead><tbody><tr><td style="text-align:left">访问属性</td><td>先访问本类中的属性,如果没有则从父类中继续查找</td><td>直接访问父类中的属性,如果没有则从父类的父类中继续查找</td></tr><tr><td style="text-align:left">调用方法</td><td>先访问本类中的方法,如果没有则从父类的父类中继续查找</td><td>直接访问父类中的方法,如果没有则从父类的父类中继续查找</td></tr><tr><td style="text-align:left">调用构造器</td><td><code>this(形参列表);</code>调用本类构造器,只能在构造器中调用,而且必须是首行</td><td><code>super(形参列表);</code>调用父类构造器,只能在构造器中调用,而且必须是首行,this&amp;super不能同时</td></tr><tr><td style="text-align:left">特殊含义</td><td>表示当前对象</td><td>子类中访问父类对象</td></tr></tbody></table></div><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol><li>访问父类的属性,但不能访问父类的prive属性 <code>super.属性名</code></li><li>访问父类的方法,不能访问父类的private方法<code>super.方法名</code></li><li>访问父类的构造器,super(参数列表),只能放在构造器的第一句</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//子类</span><br><span class="line">package com.hspedu;</span><br><span class="line"></span><br><span class="line">public class Test extends A &#123;</span><br><span class="line">public int n1;//不同类可以同名属性和方法,就算是子类父类也不影响,不过调用时得特别指定</span><br><span class="line">public int n2;</span><br><span class="line">    public void showInfo() &#123;</span><br><span class="line">        //使用super访问父类属性</span><br><span class="line">        System.out.println(super.n1+super.n2+super.n3);</span><br><span class="line">    &#125;</span><br><span class="line">    public void ok() &#123;</span><br><span class="line">        //使用super访问父类方法</span><br><span class="line">        super.root1();</span><br><span class="line">        super.root2();</span><br><span class="line">        super.root3();</span><br><span class="line">    &#125;</span><br><span class="line">    //调用父类的talk()方法的方式[子类中也未包含同名同参数的talk方法]&amp;&amp; 调用属性也是同理</span><br><span class="line">    talk();//如果本类有,则直接调用本类,若没有,则找父类,依次找下去,但中间不能有private卡住,否则的话,不能直接调用,只能间接调用</span><br><span class="line">    this.talk();//等价于talk();</span><br><span class="line">    super.talk();//区别于this.talk(),talk(),super是直接从父类开始找,后者从子类开始找</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    public  Test()&#123;</span><br><span class="line">        //使用子类构造器访问父类构造器</span><br><span class="line">        super();//如果调用默认的,可以不写,父类的构造器都会被子类的构造器所调用</span><br><span class="line">        super(&quot;SiDun.Lei&quot;);</span><br><span class="line">        super(&quot;Jack&quot;,23);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//父类</span><br><span class="line">package com.hspedu;</span><br><span class="line"></span><br><span class="line">public class A &#123;</span><br><span class="line">    public int n1;</span><br><span class="line">    int n2;</span><br><span class="line">    protected int n3;</span><br><span class="line">    private int n4;</span><br><span class="line"></span><br><span class="line">    public A() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public A(String name ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public A(String name,int salary ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public  void talk() &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    public  void  root1() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    void  root2() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    protected  void  root3() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    private  void  root4() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java的多态</title>
      <link href="/posts/215392d1.html"/>
      <url>/posts/215392d1.html</url>
      
        <content type="html"><![CDATA[<h3 id="java的多态"><a href="#java的多态" class="headerlink" title="java的多态"></a>java的多态</h3><h3 id="引入的原因"><a href="#引入的原因" class="headerlink" title="引入的原因"></a>引入的原因</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Master master = new Master(&quot;tim&quot;);</span><br><span class="line">        Dg dog = new Dog(&quot;金毛&quot;);</span><br><span class="line">        Cat cat = new Cat(&quot;蓝猫&quot;);</span><br><span class="line">        Fish fish = new Fish(&quot;小鱼干&quot;);</span><br><span class="line">        Bone bone = new Bone(&quot;鸡锁骨&quot;);</span><br><span class="line">        master.feed(dog,bone);</span><br><span class="line">        master.feed(cat,fish);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public  void  feed(Dog dog,Bone bone) &#123;</span><br><span class="line">       System.out                                                                                                                    println(name+&quot;给&quot;+dog.getName()+&quot;喂&quot;+bone.getName());</span><br><span class="line">   &#125;</span><br><span class="line">   public  void  feed(Cat cat,Fish fish) &#123;</span><br><span class="line">       System.out.println(name+&quot;给&quot;+cat.getName()+&quot;喂&quot;+fish.getName());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>随着多个动物,食物的增加,对于代码整体而言,<strong>代码复用性不高,不利于代码维护</strong>,所以引入<strong>多态</strong></p><p><p><p><p></p><h3 id="多态-羊皮狼"><a href="#多态-羊皮狼" class="headerlink" title="多态(羊皮狼)"></a>多态(羊皮狼)</h3><p>方法或对象具有多种形态,是面对对象的第三特征,多态是<strong>建立在封装和继承基础之上的</strong></p><p>(1)方法的多态</p><p>​         重载和重写就体现多态</p><p>(2)对象的多态(核心)</p><ol><li>一个对象的编译类型和运行类型可以不一致</li></ol><p><code>Animal animal = new Dog();</code></p><ol><li>编译类型在定义对象时,就确定了不能改变</li><li>运行类型是可以变化的</li><li>编译类型看定义时 <strong>等号的最左边</strong>, 运行类型看  <strong>等号的最右边</strong></li></ol><blockquote><p><code>Animal animal = new Dog();</code><br><code>animal</code>  只是对象引用, new Dog() 才是对象</p><p>对象的多态: 可以让<strong>一个父类的引用</strong> 指向 <strong>一个子类的对象</strong></p><p><code>animal</code>的编译类型是<code>Animal</code>,运动类型是<code>Dog</code></p><p>  <code>animal= new Cat();</code>   <code>animal</code> 的编译类型是<code>Animal</code>,运动类型变成了<code>Cat</code></p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>1.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.Poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line">public class Dog extends Animal&#123;</span><br><span class="line"></span><br><span class="line">    public void cry() &#123;</span><br><span class="line">        System.out.println(&quot;狗:你在狗叫什么...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.Poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line">public class Cat extends Animal&#123;</span><br><span class="line"></span><br><span class="line">    public void cry() &#123;</span><br><span class="line">        System.out.println(&quot;猫:你在猫叫什么&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.Poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line">public class Animal &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Animal animal_1 = new Animal();//编译类型是Animal,运行类型是Animal</span><br><span class="line">        Animal animal_2 = new Dog();//编译类型是Animal,运行类型是Dog</span><br><span class="line">        animal_2.cry();//此时的编译类型是Animal,运行类型是Dog</span><br><span class="line">        animal_2 = new Cat();//此时的编译类型仍然是Animal,但运行类型变成了Cat</span><br><span class="line">        animal_2.cry();//此时的编译类型是Animal,运行类型是Cat</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public  void  cry() &#123;</span><br><span class="line">        System.out.println(&quot;Animal动物在叫....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><p><p><p><p><br>2.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//animal 编译类型是 Animal,可以指向Animal子类的对象</span></span><br><span class="line">    <span class="comment">//food 编译类型是 Food,可以指向Food子类的对象</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Animal animal,Food food)</span> &#123;  System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;给&quot;</span>+animal.getName()+<span class="string">&quot;喂&quot;</span>+food.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Master master = new Master(&quot;Jack&quot;);</span><br><span class="line">        Dog dog  = new Dog(&quot;金毛&quot;);</span><br><span class="line">        Cat cat  = new Cat(&quot;蓝猫&quot;);</span><br><span class="line">        Fish fish = new Fish(&quot;小鱼干&quot;);</span><br><span class="line">        Bone bone = new Bone(&quot;鸡锁骨&quot;);</span><br><span class="line"></span><br><span class="line">        master.feed(dog ,bone);</span><br><span class="line">        master.feed(cat,fish);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态的向上转型"><a href="#多态的向上转型" class="headerlink" title="多态的向上转型"></a>多态的向上转型</h3><ol><li><p>本质:父类的引用指向了子类的对象</p></li><li><p>语法: <code>父类类型 引用名 = new 子类类型();</code></p></li><li><p>特点:编译类型看左边,运行类型看右边</p><p>可以调用父类中的所有成员(需要看访问权限),不能调用子类中特有成员</p><p>最终运行看子类的具体实现效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ss</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">sss</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> <span class="keyword">extends</span>  <span class="title class_">ss</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;动物&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cat</span>  <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;    <span class="comment">//方法重写</span></span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">catMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cat</span>();</span><br><span class="line">       <span class="comment">//animal.catMouse() 不能调用,编译后animal只能调用自己成员</span></span><br><span class="line">        <span class="comment">// 因为在编译阶段,能调用哪些成员,是由编译类型来决定的</span></span><br><span class="line">        animal.eat();<span class="comment">//猫吃鱼</span></span><br><span class="line">        <span class="comment">//编译类型是父类,执行父类的成员,但运行时按照特指的子类执行重写父类的方法,所以子类重写是关键,</span></span><br><span class="line">        <span class="comment">// 而且执行过程中遵循就近原则,先找特指运行的子类,再依次往上找,直到找到为止</span></span><br><span class="line">        animal.sleep();</span><br><span class="line">        animal.run();</span><br><span class="line">        animal.show();</span><br><span class="line">        <span class="comment">//特指的运行子类找不到该方法,就会向编译环境父类Animal找仍未果,再从上级父类直到找到为止</span></span><br><span class="line">        animal.sss(); <span class="comment">//sss</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>   为了让父类指向子类,并且父类引用也可以访问子类的所有成员(除特殊权限)</p><ol><li>语法<code>子类类型</code> 引用名 = (子类类型) 父类引用`;</li><li>只能强转父类的引用,不能强转父类的对象</li><li>要求父类的引用必须指向是当前目标类型的对象</li><li><p>可以调用子类类型中的所有成员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cat</span>();</span><br><span class="line">       <span class="comment">//animal.catMouse() 不能调用,编译后animal只能调用自己成员</span></span><br><span class="line">        <span class="comment">//如果想调用只能使用向下转型</span></span><br><span class="line">        <span class="comment">// 向上转型,访问范围看父类的成员,执行看子类;而向下转型,访问范围看子类的成员,执行看子类</span></span><br><span class="line"></span><br><span class="line">        <span class="type">cat</span> <span class="variable">c_at</span> <span class="operator">=</span> (cat) animal;<span class="comment">//和new的区别是,没有创建新的对象</span></span><br><span class="line">        c_at.catMouse();<span class="comment">//猫抓老鼠</span></span><br><span class="line">        c_at.eat();<span class="comment">//猫吃鱼</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3></li><li><p>属性没有重写之说,<strong>属性的值看编译类型</strong></p></li><li><p><code>`instanceOf</code>比较操作符,用于判断<strong>对象的运行类型</strong>是否为xx类型或者xx类型的子类型 </p></li><li><p>动态绑定机制 </p><p>&gt;<br>&gt;</p><blockquote><p>1.当调用对象方法时,该方法会和该对象的内存地址和运行类型绑定</p><p>2.当调用属性时,没有动态绑定机制,哪里声明哪里使用</p></blockquote></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的包</title>
      <link href="/posts/31f532fa.html"/>
      <url>/posts/31f532fa.html</url>
      
        <content type="html"><![CDATA[<h3 id="Java的包"><a href="#Java的包" class="headerlink" title="Java的包"></a>Java的包</h3><h4 id="包的作用"><a href="#包的作用" class="headerlink" title="包的作用"></a>包的作用</h4><blockquote><ol><li>用于区分相同名字的类</li><li>当类很多时,可以很好的管理类[Java Api]</li><li>控制访问范围</li></ol></blockquote><h3 id="常用的包"><a href="#常用的包" class="headerlink" title="常用的包"></a>常用的包</h3><blockquote><p>java.lang.* //lang包是基本包,默认引入,不需要再引入</p><p>java.util.* //util包,系统提供的工具包,工具类,使用Scanner</p><p>java.net.* //网络包,网络开发</p><p>java.awt.* //是做java的界面开发,Gui</p></blockquote><h3 id="包的命名"><a href="#包的命名" class="headerlink" title="包的命名"></a>包的命名</h3><blockquote><p>命名规则: 只包含数字,字母,下划线,小圆点,但不能是关键字或保留字</p><p>命名规范:一般是小写字母+小圆点 , eg: com.公司名.项目名.业务模块名</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>引入包语法<code>import com.hxs.pkg</code> ,引入包是为了使用该包下的类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.pkg;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays; //引入包util下的Arrays类,用于排序</span><br><span class="line">//import java.util.*;不建议导入包util下所有的类,那样只会影响效率</span><br><span class="line">public class import01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;1, 4, 2, 6, -1, 9, 0&#125;;</span><br><span class="line">        Arrays.sort(arr); //</span><br><span class="line">        for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+&quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><ol><li><p><code>package</code>的作用是<strong>声明当前类所在的包</strong>,需要放在类的最上面,一个类中最多只有一句package</p></li><li><p>import指令放在package与类定义之间,可以有多句且没有顺序要求</p></li></ol></blockquote><p><p><p><p></p><h3 id="包的本质"><a href="#包的本质" class="headerlink" title="包的本质"></a>包的本质</h3><p>实际上包的本质就是<strong>创建不同的文件夹</strong>用来<strong>存放类</strong></p><p><img src="C:\Users\hhh\Desktop\default1.png" alt="default1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package pack1; //mm类在包pack1中 ; package 关键字,表示打包</span><br><span class="line"></span><br><span class="line">import com.xiaoming.dog;//com.xiaoming表示包名,com是一级目录,xiaoming是二级目录,dog是类</span><br><span class="line">//import com.xiaoqiang.dog; 不能同时引相同的类名</span><br><span class="line">    public class mm &#123;</span><br><span class="line">        public static void main(String[] args) &#123;</span><br><span class="line">        dog d = new dog(); //创建com.xiaoming包下的dog类 对象d</span><br><span class="line"></span><br><span class="line">        com.xiaoqiang.dog d1 = new com.xiaoqiang.dog();//如果想引入,创建com.xiaoqiang包下的dog类 对象d1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法传参机制</title>
      <link href="/posts/a3493d7e.html"/>
      <url>/posts/a3493d7e.html</url>
      
        <content type="html"><![CDATA[<h3 id="方法传参机制"><a href="#方法传参机制" class="headerlink" title="方法传参机制"></a>方法传参机制</h3><ol><li><p>成员方法传递的是<strong>值拷贝</strong>，形参的任何改变不影响实参</p></li><li><p>调用方法会产生一个新栈</p></li><li><p>数组属于引用类型，会指向堆空间</p></li><li><p>引用类型（类,数组,接口）传递的不是值拷贝，而传递的是一个地址</p><p>而形参可以影响实参             </p></li><li><p>对象传递的也是地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//测试 A类中的方法传入（B类对象）参数，在A类的方法中改变B类对象，那么对象B是否变化</span><br><span class="line">//j结果   对象B会发生变化</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">    </span><br><span class="line">Person  p =new Person();</span><br><span class="line">p.name = &#x27;jack&#x27;;</span><br><span class="line">p.age = 10;</span><br><span class="line"></span><br><span class="line">B b = new B();</span><br><span class="line">b.mm(p);  //本质是将对象p的地址传给mn方法</span><br><span class="line"> System.out.print(&quot;main中的p.age=&quot;+ p.age) ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> class   Person &#123;</span><br><span class="line"> </span><br><span class="line"> String name;</span><br><span class="line"> int age;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> class B &#123;</span><br><span class="line"> </span><br><span class="line">public  void   mm (Person p) &#123;</span><br><span class="line">p.age  = 10000;</span><br><span class="line">/*思考如果 p=null ,则上述的结果p.age =10 ，</span><br><span class="line">因为这里的B类的mm方法在传入对象p时，新开的mm栈地址就指向堆中p的地址，</span><br><span class="line">而p=null，则将 mm栈地址指向空，这对堆中的p地址没有任何影响</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/*思考如果 p=new Person , p.age  = 10000;则结果p.age =10 ，</span><br><span class="line">因为这里的B类的mm方法在传入对象p时，新开的mm栈地址就指向堆中p的地址，</span><br><span class="line">而p=new Person，将在堆中创建一个新对象p，p.age=10000的赋值也给了新对象，</span><br><span class="line">当执行完此方法时,输出语句仍然在main栈中找到原本对象p的地址，指向堆中p对象中的p.age</span><br><span class="line">而创建的新对象p，没用就销毁了</span><br><span class="line">*/</span><br><span class="line">&#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域</title>
      <link href="/posts/7a108a3c.html"/>
      <url>/posts/7a108a3c.html</url>
      
        <content type="html"><![CDATA[<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ol><li>在java中,主要变量就是成员变量和局部变量</li><li>一般<strong>局部变量</strong>指的是成员方法中定义的变量</li><li>作用域的分为<strong>全局变量</strong>和<strong>局部变量</strong>,全局变量的作用域在整个类体 ;除了<strong>属性之外</strong>的都是局部变量,作用域只能用于某块</li><li><strong>全局变量可以不赋值</strong>,直接使用,有默认值,但<strong>局部变量没有默认值</strong>所以<strong>必须赋值</strong>, 才能使用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Cat&#123;</span><br><span class="line"></span><br><span class="line">int age=10;//全局变量,作用整个类体</span><br><span class="line"></span><br><span class="line">public void cry() &#123;</span><br><span class="line"></span><br><span class="line">//n 和 name 都是局部变量</span><br><span class="line">//n 和 name的作用域都在cry方法中</span><br><span class="line">int n =10;</span><br><span class="line">String name= &quot;jack&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public void  eat() &#123;</span><br><span class="line">System.out.println(&quot;猫的年龄&quot;+age); //此时可以用,age是类中的全局变量</span><br><span class="line">System.out.println(&quot;猫的名字&quot;+name); //不可以访问到,因为name是其他方法的局部变量</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li><strong>属性和局部变量可以重名</strong>,访问时遵循<strong>就近访问</strong></li><li>在同一个作用域中,比如在同一个方法中,定义的局部变量不能重名,比如说类中的变量和方法中的变量可以重名,同类中不同的方法也可以重名</li><li>属性生命周期长,伴随对象的创建而创建,伴随对象死亡而死亡,局部变量生命周期短,伴随它的代码块的执行而创建,伴随它的代码块的结束而死亡,比如方法调用时及结束  </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Cat&#123;</span><br><span class="line"></span><br><span class="line">int age=10;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line">public void cry() &#123;</span><br><span class="line">String name= &quot;jack&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public void  eat() &#123;</span><br><span class="line">String name  = &quot;liLing&quot; </span><br><span class="line">//name=liLing,对于cry和eat不同的作用域方法中,可以重名, 对于类和方法相同的变量,采取就近原则</span><br><span class="line">System.out.println(&quot;猫的年龄&quot;+age); //age=10</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>全局变量/属性可以被本类使用,或者其他类使用(通过对象调用)</li><li>局部变量只能在本类中对应的方法使用</li><li>全局变量/属性可以加修饰符,局部变量不可以加修饰符</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符优先级</title>
      <link href="/posts/9393c5c.html"/>
      <url>/posts/9393c5c.html</url>
      
        <content type="html"><![CDATA[<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>注意：只有单目运算符、赋值运算符是从右往左运算的。</p><p>运算等级：  <code>（）&#123;&#125;</code>   &gt;  算数运算符 &gt; 位移运算符 &gt; 比较运算符 &gt; 逻辑运算符 &gt; 三元运算符&gt; 赋值运算符</p><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">. ()   {}   ;  ,</th></tr></thead><tbody><tr><td style="text-align:left">R—&gt;L</td><td style="text-align:left">++  —-  ~  !(data type)</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">*  /  %</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">+  -</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">&gt;&gt;  &lt;&lt;  &gt;&gt;&gt;  位移</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">&lt;    &gt;    &lt;=   &gt;=    instanceof</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">==     !=</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">&amp;</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">^</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">\</td><td></td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">&amp;&amp;</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">\</td><td>\</td><td></td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">？ ：</td></tr><tr><td style="text-align:left">R—&gt;L</td><td style="text-align:left">=  *=  /=  %=</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">+=   -=   &lt;&lt;=  &gt;&gt;=</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">&gt;&gt;&gt;=   &amp;=   ^=    \</td><td>=</td></tr></tbody></table></div>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this关键字</title>
      <link href="/posts/75f5b5c3.html"/>
      <url>/posts/75f5b5c3.html</url>
      
        <content type="html"><![CDATA[<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>假如说构造器传入的形参和类的成员属性名字一样,则构造器就失去作用,所以引入this,什么是this?  <strong>java虚拟机给每个对象分配this,代表当前对象</strong></p><p>注意:<strong>哪个对象调用,this就代表哪个对象</strong></p><p>改版前</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person p2 = new Person(&quot;jack&quot;,20);//调用有参构造器,并初始化对象p2</span><br><span class="line">System.out.println(&quot;p2对象的名字&quot;+p2.name+&quot;p2对象的年龄&quot;+p2.age);//因为作用域的就近原则,则p2.name=null默认值,age=100</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class   Person &#123;</span><br><span class="line">int age=100;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public Person(String name, int age)&#123;//因为构造器与类都定义了相同变量的名字,所以调用采取就近原则</span><br><span class="line">name=name; //jack=jack</span><br><span class="line">age=age;//20=20</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改版后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person p = new Person(&quot;jack&quot;,20);//调用有参构造器,并初始化对象p</span><br><span class="line">System.out.println(&quot;p对象的名字&quot;+p.name+&quot;p对象的年龄&quot;+p.age);//p.name=jack,age=20</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class   Person &#123;</span><br><span class="line">int age=100;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public Person(String name, int age)&#123;//因为构造器与类都定义了相同变量的名字,所以调用采取就近原则</span><br><span class="line">this.name = name; //当前对象p的属性name=jack</span><br><span class="line">     this.age = age;//当前对象p的属性age=20</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><ol><li><p>this是一个对象,this可以访问本类的属性和方法,构造器</p></li><li><p>this用于区分当前类的属性和局部变量</p></li><li><p>访问成员方法的语法:` this.方法名(参数列表)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">class T&#123;</span><br><span class="line"></span><br><span class="line">public void  f1() &#123;</span><br><span class="line">System.out.println(&quot;Hello,world&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void  f2() &#123;</span><br><span class="line">//此时调用f1方法有两种 </span><br><span class="line"> f1();</span><br><span class="line"> this.f1();  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>访问构造器语法:<code>this(参数列表)</code>,<strong>注意只能在构造器中使用</strong></p><p>为什么这样写呢,为了<strong>区别</strong>对象this调用方法this.方法()</p><p>而且<strong>构造器调用构造器时,才能使用 this(参数)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">注意使用this从A构造器调用B构造器,this(参数)语句必须在A构造器的第一句话</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">T  t =new T();</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">class T&#123;</span><br><span class="line"></span><br><span class="line">public   T() &#123;  </span><br><span class="line">this(&quot;jack&quot;,18);</span><br><span class="line">System.out.println(&quot;Hello,world&quot;);</span><br><span class="line">//在无参构造器T()中调用 T(String name,int age)的构造器</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public T(String name,int age) &#123;</span><br><span class="line">System.out.println(&quot;public T(String name,int age)的构造器&quot;);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>this不能在类定义的外部使用,只能在类定义的方法中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">T  t =new T();</span><br><span class="line">        t.f1();</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">class T&#123;</span><br><span class="line"></span><br><span class="line">String name =&quot;jack&quot;;</span><br><span class="line">int age = 20;</span><br><span class="line"></span><br><span class="line">public   void  f1() &#123;  </span><br><span class="line">String name=&quot;Tom&quot;;</span><br><span class="line">System.out.println(name+age); //Tom 20</span><br><span class="line">System.out.println(this.name+this.age); // jack 20</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳转控制break的使用</title>
      <link href="/posts/f2c69016.html"/>
      <url>/posts/f2c69016.html</url>
      
        <content type="html"><![CDATA[<h1 id="跳转控制break的使用"><a href="#跳转控制break的使用" class="headerlink" title="跳转控制break的使用"></a>跳转控制break的使用</h1><h3 id="break的使用"><a href="#break的使用" class="headerlink" title="break的使用"></a>break的使用</h3><ol><li><p>break 用于多层嵌套循环中，可以在<strong>循环条件不满足</strong>情况下<strong>退出循环结构</strong></p></li><li><p>break语句用于嵌套时，可以通过<strong>标签</strong>指定要终止是哪一层语句块 </p></li></ol><p>continue和break的区别，continue跳出当次循环，break结束当前循环</p><p>return 用在方法时，表示跳出方法；用在main，表示退出程序</p><h3 id="标签的使用"><a href="#标签的使用" class="headerlink" title="标签的使用"></a>标签的使用</h3><blockquote><p>1.标签命名 遵守规范即可</p><p>2.在实际开发中，尽量不要使用标签</p><p>3.如果没有指定break，默认退出最近的循环体</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">label1:  &#123;  ……</span><br><span class="line">    label2:  &#123;  ……</span><br><span class="line">    label3:  &#123;  ……</span><br><span class="line"> </span><br><span class="line">  break  label2;//break跳出指定标签label2循环</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220217201812174.png" alt="image-20220217201812174"></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//随机一个1-100的数，当随机到71时，说出随机了多少次？</span><br><span class="line">//此处不用导入包，因为类Math和双精度Double一样，都是在java,lang包下                                                                                                                                                 </span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//用for变换每次s的值，直到s=71时，利用break语句跳出for循环</span><br><span class="line"> for(int i = 1; i&lt;=i;i++) &#123;</span><br><span class="line"> </span><br><span class="line">           int s =  ((int) (Math.random() * 100) +1) ; //将随机值付给s</span><br><span class="line"> </span><br><span class="line"> System.out.println( &quot; 第&quot;+i+&quot;值： &quot;+  s);</span><br><span class="line"> </span><br><span class="line">if (s == 71) &#123;</span><br><span class="line"></span><br><span class="line"> System.out.println(&quot;i=&quot; + i);</span><br><span class="line"></span><br><span class="line"> break;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//从1加到100,加到第几个时，总和大于20</span><br><span class="line">                                                                                                                                           </span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line">int sum= 0;</span><br><span class="line"></span><br><span class="line">for(int i =1;;i&lt;=100;i++) &#123;</span><br><span class="line">sum+=i;</span><br><span class="line">if(sum &gt; 20) &#123;</span><br><span class="line">System.out.println(&quot;当加到第&quot;+i+&quot;个的时候，总和大于20&quot;);</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//实现登录验证，只有三次机会，若用户和密码分别是  baby和666 ，则提示登录成功,否则提示还有几次机会</span><br><span class="line"> </span><br><span class="line">//字符串是否相等，用类String下的equals方法来判断</span><br><span class="line">//一般情况下,更倾向于使用 &quot; 林黛玉&quot;.equals(name)) 代替name.equals(&quot; 林黛玉&quot;))；前者可以避免空指针异常</span><br><span class="line"></span><br><span class="line"> import  java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scanner  scanner =  new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">int mm = 3;</span><br><span class="line"></span><br><span class="line">for(int i =1;i&lt;=3;i++) &#123;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(&quot;请输入账号：  &quot;);</span><br><span class="line">String name =  scanner.next(); //定义字符串zh来接收账号</span><br><span class="line">  </span><br><span class="line">System.out.println(&quot;请输入密码：  &quot;);</span><br><span class="line">String pw  =  scanner.next(); //定义字符串pw来接收密码</span><br><span class="line">// 变量nam调用equals方法,若name值为baby，pw也满足则显示登陆成功</span><br><span class="line">if (  &quot;baby&quot;.equals(name) &amp;&amp;   &quot;666&quot;.equals(pw)  )&#123;  </span><br><span class="line">System.out.println(&quot;登录成功&quot;);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">mm--;</span><br><span class="line"></span><br><span class="line">if(mm &gt; 0)&#123;</span><br><span class="line">System.out.println(&quot;请重新输入，你还有&quot;+mm+&quot;次机会&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else </span><br><span class="line">System.out.println(&quot;你的账号已锁定&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>例题</title>
      <link href="/posts/6d6e514a.html"/>
      <url>/posts/6d6e514a.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//定义方法max,求某个double数组的最大值,并返回</span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">T t = new T();</span><br><span class="line">Double res =  t.max(null);</span><br><span class="line">if( res != null) &#123;</span><br><span class="line"> System.out.println(&quot;n的最大值&quot; +res );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">      class  T&#123;</span><br><span class="line"></span><br><span class="line">public Double max(double... n) &#123;  //Double 是表示返回一个Double的包装类</span><br><span class="line">    if(n!= null &amp;&amp; n.length&gt;0) &#123; //n数组至少有一个元素</span><br><span class="line"></span><br><span class="line"> double  max = n[0];</span><br><span class="line"> for(int i = 1; i &lt; n.length;i++) &#123;</span><br><span class="line">if( max &lt; n[i] ) &#123;</span><br><span class="line">max=n[i];</span><br><span class="line">&#125;</span><br><span class="line">   &#125; </span><br><span class="line">return max;   </span><br><span class="line">             &#125;</span><br><span class="line">else &#123;</span><br><span class="line"> System.out.println(&quot;n的输入为空&quot; );</span><br><span class="line">return null;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;   </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//定义方法find,求从字符串数组中匹配一个人,并返回</span><br><span class="line"> public  class text &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String arr[] = &#123;&quot;aaa&quot;,&quot;bbb&quot;,&quot;jack&quot;,&quot;ddd&quot;,&quot;eee&quot;,&quot;fff&quot;&#125;;</span><br><span class="line">Taxon t = new Taxon();</span><br><span class="line"></span><br><span class="line">  intindex = t.find(&quot;jack&quot;,arr);</span><br><span class="line"> if(index != -1) &#123; //判断返回值是否不等于 -1</span><br><span class="line">  System.out.println(&quot;找到了,是第&quot;+t.find(&quot;jack&quot;,arr)+&quot;位&quot;);</span><br><span class="line"> &#125;else&#123;</span><br><span class="line"> System.out.println(&quot;没找到&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> class  Taxon &#123;</span><br><span class="line">public int find(String s , String arr[]) &#123;</span><br><span class="line">if(arr != null)&#123; //判断数组是否等于空</span><br><span class="line">for(int i=0;i&lt;arr.length;i++) &#123;</span><br><span class="line">if(s == arr[i]) &#123;</span><br><span class="line">return i+1;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">return -1; //如果数组为空,返回index=-1</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">return -1; //如果没有找到,就直接退出</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">//定义方法find,求从字符串数组中匹配一个人,并返回</span><br><span class="line"> public  class text &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> /*</span><br><span class="line"> Taxon t = new Taxon();</span><br><span class="line"> int price = t.updatePrice(200);</span><br><span class="line">System.out.println(price);</span><br><span class="line">*/</span><br><span class="line">Taxon t = new Taxon(&quot;山海经&quot;,200);</span><br><span class="line">t.info();</span><br><span class="line">t.updatePrice();</span><br><span class="line">t.info();</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> /*</span><br><span class="line">class  Taxon &#123;</span><br><span class="line">int price;</span><br><span class="line">public void  updatePrice(int price) &#123;</span><br><span class="line">if(price&gt;150) &#123;</span><br><span class="line">this.price = 150;</span><br><span class="line">&#125;else if(price&gt;100 &amp;&amp; price&lt;=150) &#123;</span><br><span class="line">this.price = 100;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">this.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">class  Taxon &#123;</span><br><span class="line">String name;</span><br><span class="line">int price;</span><br><span class="line">public  Taxon(String name,int price) &#123; //创建一个构造器</span><br><span class="line">this.name = name;</span><br><span class="line">this.price = price;</span><br><span class="line">&#125;</span><br><span class="line">public void  updatePrice() &#123;</span><br><span class="line">//如果方法中,没有price局部变量,this等价于this.price,建议写上</span><br><span class="line">if(this.price&gt;150) &#123;</span><br><span class="line">this.price = 150;</span><br><span class="line">&#125;else if(this.price&gt;100) &#123;</span><br><span class="line">this.price = 100;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public  void info() &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;这本书&gt;&quot;+&quot;名字&quot;+this.name+&quot;|价格&quot;+this.price);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//定义一个数组的复制功能copyArr,输入旧数组,返回一个新数组,元素和旧数组一样</span><br><span class="line"> public  class text &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int oldArr[] = &#123;1,2,3,4,5,6&#125;;</span><br><span class="line">Taxon t =new Taxon();</span><br><span class="line">t.copyArr(oldArr);</span><br><span class="line">t.infor(oldArr);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">class Taxon &#123;</span><br><span class="line"></span><br><span class="line">public int []  copyArr( int oldArr[]) &#123;</span><br><span class="line">int newArr [] = new int [oldArr.length];</span><br><span class="line">for(int i =0; i &lt; oldArr.length; i++) &#123;</span><br><span class="line">newArr[i] = oldArr[i]; </span><br><span class="line">&#125;</span><br><span class="line">return newArr;</span><br><span class="line">&#125;</span><br><span class="line">public void  infor( int  newArr[]) &#123;</span><br><span class="line">for(int i =0; i &lt;  newArr.length; i++) &#123;</span><br><span class="line">System.out.print(newArr[i] +&quot;\t&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//构造器调用</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> class Employee &#123;</span><br><span class="line">String name;</span><br><span class="line">char sex; /</span><br><span class="line"> int age;</span><br><span class="line"> String position; // 职位</span><br><span class="line"> int salary;  // 工资</span><br><span class="line"> </span><br><span class="line"> public Employee(String name,char sex,int age) &#123;</span><br><span class="line"> this.name = name;</span><br><span class="line"> this.sex = sex; </span><br><span class="line"> this.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"> public Employee(String position,int salary) &#123;</span><br><span class="line"> this.position = position;</span><br><span class="line"> this.salary = salary; </span><br><span class="line"> &#125;</span><br><span class="line">public Employee(String name,char sex,int age,String position,int salary) &#123; //复用构造器,可以减少赋值</span><br><span class="line"> this( name, sex, age);</span><br><span class="line"> //this(String position,int salary); 因为构造器直接互相调用,只能在第一句话.</span><br><span class="line"> this.position = position;</span><br><span class="line"> this.salary = salary; </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">打印   </span><br><span class="line"> 1.0      PI*r*r</span><br><span class="line">   |         |</span><br><span class="line"> 5.0      PI*r*r</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">PassObject  p = new PassObject();</span><br><span class="line">Circle c = new Circle(times);</span><br><span class="line">p. printAreas(c,5);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> class Circle &#123;</span><br><span class="line">double radius;//半径</span><br><span class="line"></span><br><span class="line">public  Circle() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//此时的构造器是为了封装属性,不能随意更改</span><br><span class="line">public Circle(radius) &#123;</span><br><span class="line">this.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//返回圆的面积</span><br><span class="line">public   double    findArea() &#123;</span><br><span class="line">return    Math.PI * radius * radius;  //返回面积</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public   double  upRadio(double radius) &#123;</span><br><span class="line">        this.radius = radius;</span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> class  PassObject &#123;</span><br><span class="line"> </span><br><span class="line">public  void printAreas( Circle  c , int times) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(int i = 1; i &lt;= times; i++ ) &#123;</span><br><span class="line">  c.upRadio(i);</span><br><span class="line">System.out.println((double)i+&quot;\t\t\t&quot;+ c.findArea());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">//猜拳游戏</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> Scanner scanner = new Scanner(System.in);  </span><br><span class="line"> Game g = new Game();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(int i = 0;i &lt; 3; i++) &#123;</span><br><span class="line"> System.out.print(&quot;请输入你的第&quot;+(i+1)+&quot;次猜拳[石头0,剪刀1,布2]:\t&quot;); </span><br><span class="line"> g.m = scanner.nextInt();  //接收用户的值</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  g.n = g.computerNum();  //调用 电脑随机数字方法</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> System.out.print(&quot;第&quot;+(i+1)+&quot;局猜拳&quot;+g.m+&quot;  VS  &quot;+ g.n ); </span><br><span class="line">  g.startGame();  //调用 猜拳结果方法</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> System.out.println(&quot;你获胜&quot;+g.count+&quot;局&quot; ); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> class Game &#123;</span><br><span class="line"> int m; //用户</span><br><span class="line"> int  n;  // 机器</span><br><span class="line"> int count; //获胜的次数</span><br><span class="line"></span><br><span class="line"> //电脑随机生成猜拳数字的方法</span><br><span class="line">public  int computerNum() &#123;</span><br><span class="line">  Random r = new Random();</span><br><span class="line"></span><br><span class="line"> return  r.nextInt(3);// 表示随机0-2数字</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//猜拳结果的方法</span><br><span class="line">public  void  startGame() &#123; </span><br><span class="line">  if(m == n) &#123;</span><br><span class="line">  System.out.println(&quot;平局&quot;); </span><br><span class="line">  &#125;</span><br><span class="line">  else if(m ==0 &amp;&amp; n ==1  ) &#123;</span><br><span class="line">   System.out.println(&quot;你赢了&quot;); </span><br><span class="line">   count++;</span><br><span class="line">  &#125;</span><br><span class="line">    else if(m == 1 &amp;&amp; n == 2  ) &#123;</span><br><span class="line">   System.out.println(&quot;你赢了&quot;); </span><br><span class="line">     count++;</span><br><span class="line">  &#125;</span><br><span class="line">    else if(m == 2 &amp;&amp; n == 0  ) &#123;</span><br><span class="line">   System.out.println(&quot;你赢了&quot;); </span><br><span class="line">     count++;</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">   System.out.println(&quot;你输了&quot;); </span><br><span class="line">  &#125;  </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水仙花数</title>
      <link href="/posts/5c4a65bc.html"/>
      <url>/posts/5c4a65bc.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//求一个数是否是水仙花数,其三位数的各个的立方和刚好是它本身</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line">Scanner scanner =  new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;输入一个三位数&quot;);</span><br><span class="line">  int number = scanner.nextInt();</span><br><span class="line">int a = number/100;</span><br><span class="line">int b = number%100/10;</span><br><span class="line">int c  = number%10;</span><br><span class="line"></span><br><span class="line">if((a*a*a+b*b*b+c*c*c) == number) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;该数是水仙花数&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;该数不是水仙花数&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三元运算符</title>
      <link href="/posts/a23c676d.html"/>
      <url>/posts/a23c676d.html</url>
      
        <content type="html"><![CDATA[<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p> 条件表达式？表达式1：表达式2；</p><ol><li><p>如果条件表达式为true，运算后的结果是表达式1；</p></li><li><p>如果条件表达式为false，运算符的结果是表达式2；</p></li></ol><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args )</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a &gt; b ?  a++ :  b--;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// b--先取值，后自减 </span></span><br><span class="line">    <span class="comment">//b--,返回b的值给result，然后b-1           </span></span><br><span class="line">System.out.println(result);</span><br><span class="line">     System.out.println(a);<span class="comment">//10</span></span><br><span class="line">      System.out.println(b); <span class="comment">//12</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>三元运算符在小转大时，可以<strong>自动转换</strong>数据类型</p><h3 id="举例1"><a href="#举例1" class="headerlink" title="举例1"></a>举例1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args )</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span>  a&gt;b ? <span class="number">1.4</span> : <span class="number">1.5</span><span class="comment">//不可以，属于数据double型转int型</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span>  a&gt;b ? (<span class="type">int</span>)<span class="number">1.4</span> : (<span class="type">int</span>)<span class="number">1.5</span><span class="comment">//可以</span></span><br><span class="line">   <span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span>  a&gt;b ? <span class="number">1.4</span> : <span class="number">1.5</span> <span class="comment">//可以</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="举例2"><a href="#举例2" class="headerlink" title="举例2"></a>举例2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//求用三元运算符比较三数大小，并输出</span><br><span class="line">public class  text &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String [] args ) &#123;</span><br><span class="line"></span><br><span class="line">    int  a  = 12;</span><br><span class="line">    int  b = 16;</span><br><span class="line">    int  c=  21;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     int max = a&gt;b ? a: b; </span><br><span class="line">     max =  max &gt; c ? max : c;</span><br><span class="line"> System.out.println(max) ;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  int max1 = (a &gt; b ? a : b) &gt; c ?  (a&gt;b ? a: b)  : c</span><br><span class="line">  System.out.println(max1) ;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> int max2 =   a &gt; b ?  (a &gt;c ?  a : c ) : (b &gt; c ? b : c );</span><br><span class="line">  System.out.println(max2) ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/posts/a444b428.html"/>
      <url>/posts/a444b428.html</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>指的是将多个数据一次指定进行顺序排列的过程。</p><p>排序分为四个:  1.内部排序，2.外部排序，3.</p><h3 id="内部排序"><a href="#内部排序" class="headerlink" title="内部排序"></a>内部排序</h3><blockquote><p>指的是将所有数据都加在到内部存储器进行排序。包括(交换式排序法，选择式排序法和插入式排序法）</p></blockquote><h5 id="冒泡排序法："><a href="#冒泡排序法：" class="headerlink" title="冒泡排序法："></a>冒泡排序法：</h5><p> 通过对待排序序列从后向前排序，<strong>下标从大到小</strong> 依次比较相邻的值，值大的从前移到后面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">原:24，69，80，57，13，将最大的数放在最后</span><br><span class="line"></span><br><span class="line">第一轮排序 </span><br><span class="line">第一次比较: 24，69，80，57，13</span><br><span class="line">第二次比较  24，69，80，57，13</span><br><span class="line">第三次比较: 24，69，57，80，13</span><br><span class="line">第四轮比较  24，69，57，13，80</span><br><span class="line"></span><br><span class="line">第二轮排序 </span><br><span class="line">第一次比较: 24，69，57，13，80</span><br><span class="line">第二次比较  24，57，69，13，80</span><br><span class="line">第三次比较: 24，57，13，69，80</span><br><span class="line"></span><br><span class="line">第三轮排序 </span><br><span class="line">第一次比较: 24，57，13，69，80</span><br><span class="line">第二次比较  24，13，57，69，80</span><br><span class="line"></span><br><span class="line">结论：假设有n个数用冒泡排序，执行n-1轮，每轮 n-1 递减一次</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line">public class text &#123;</span><br><span class="line"></span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">int a[] =&#123;24,69,80,57,13&#125;;</span><br><span class="line">for(int j = 0; j&lt;4; j-- ) &#123;       //for(int j = 4; j&gt;0; j-- ) &#123;</span><br><span class="line">for(int i= 0; i&lt; a.length -1;i++ ) &#123;   //for(int i= 0; i&lt; j;i++ ) &#123;</span><br><span class="line"></span><br><span class="line">if(a[i] &gt; a[i+1]) &#123;</span><br><span class="line">int max = a[i+1];</span><br><span class="line">    a[i+1] = a[i];</span><br><span class="line">a[i] = max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(int i=0; i&lt;5;i++) &#123;</span><br><span class="line">System.out.println(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line">public class text &#123;</span><br><span class="line"></span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">int a[] =&#123;24,69,80,57,13,60,78,56,33,98&#125;;</span><br><span class="line">for(int k = 0; k&lt;a.length-1; k++) &#123;</span><br><span class="line">for(int i= 0; i&lt; a.length-1 -k;i++ ) &#123;</span><br><span class="line"></span><br><span class="line">if(a[i] &gt; a[i+1]) &#123;</span><br><span class="line">int max = a[i+1];</span><br><span class="line">    a[i+1] = a[i];</span><br><span class="line">a[i] = max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(int i=0; i&lt;a.length;i++) &#123;</span><br><span class="line">System.out.println(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查找排序"><a href="#查找排序" class="headerlink" title="查找排序"></a>查找排序</h3><p>查找排序分为两个，顺序排序和二分查找</p><h5 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//查找某字符串在数组内的下标，没有报错，退出</span><br><span class="line">import  java.util.Scanner;</span><br><span class="line">public class text &#123;</span><br><span class="line"></span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">Scanner scanner = new Scanner(System.in);</span><br><span class="line">String name[] =&#123;&quot;69&quot;,&quot;80&quot;,&quot;57&quot;,&quot;13&quot;,&quot;26&quot;&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入要查找的工号&quot;);</span><br><span class="line">     String  Name =   scanner.next();</span><br><span class="line">  </span><br><span class="line"> int index = -1;//判断值</span><br><span class="line">for(int i= 0; i&lt; name.length;i++ ) &#123;</span><br><span class="line">if( name[i].equals(Name) )&#123;</span><br><span class="line">System.out.println(&quot;已查到工号是&quot;+(i+1));</span><br><span class="line">index = i;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(index == -1) &#123;</span><br><span class="line">System.out.println(&quot;没有查到该工号&quot;);</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="外部排序法"><a href="#外部排序法" class="headerlink" title="外部排序法"></a>外部排序法</h4><p>&gt;<br>&gt;</p><blockquote><p>数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括(合并排序法，直接合并排序法)</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类与对象</title>
      <link href="/posts/3a517f26.html"/>
      <url>/posts/3a517f26.html</url>
      
        <content type="html"><![CDATA[<h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><blockquote><p>将一个程序体的<strong>属性</strong>和<strong>方法</strong>提取出来就形成了<strong>类</strong></p><p> 类是抽象的，代表一类事物，比如人类，猫类，即类是<strong>数据类型</strong></p><p>对象：是一个<strong>具体的实类</strong>，比如人，大熊猫都是哺乳动物，而  人(对象) 是哺乳动物(类) 的 一个例子</p></blockquote><h3 id="底层-198"><a href="#底层-198" class="headerlink" title="底层(198)"></a>底层(198)</h3><p><img src="C:\Users\hhh\Desktop\68f2992c89dc60f3214d64fa95ab971.jpg" alt="68f2992c89dc60f3214d64fa95ab971"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">person p = new person();</span><br><span class="line">p.name = &quot;jack&quot;;</span><br><span class="line">p.age = 10;</span><br><span class="line">person p2 = p1;</span><br><span class="line">p2. age = ?       //result=10</span><br><span class="line"></span><br><span class="line">p2 = null ;      </span><br><span class="line">p2.age =  ?    //报错，空指针异常</span><br><span class="line"></span><br><span class="line">1.先加载 person类信息（属性和方法，只会加载一次）</span><br><span class="line">2.在堆中创建开辟一个空间m地址是L，进行默认赋值 age=0，name=null</span><br><span class="line">3.将地址L赋给p</span><br><span class="line">4.进行指定初始化 ， 空间m中的age = 10 ，并在方法区的常量池中开辟一个空间h地址n，用于存放name </span><br><span class="line"> 而位于堆内的空间m中的name指向地址n</span><br><span class="line"> 5.新建一个对象p2指向堆中的地址L</span><br><span class="line"> 6.栈中的对象p2调用堆中的空间m的地址L内的age变量 得p2.age = 10</span><br><span class="line"> 7. 对象p2指向空地址，和p没有影响</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>引用类型就<strong>相当于一个指针</strong>，不直接存储数值，而是给一个地址，去查询。</li><li>字符串属于<strong>引用类型</strong>，会将数据放在 <strong>方法区中的常量池</strong>中，<strong>地址放在堆中</strong>。</li><li>基本数据类型会在<strong>堆</strong>中直接存储</li><li>即使又创建一个对象，类信息也只会加载一次</li></ol><h3 id="创建对象及使用"><a href="#创建对象及使用" class="headerlink" title="创建对象及使用"></a>创建对象及使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.先声明再创建</span><br><span class="line">Cat cat;</span><br><span class="line">cat =new Cat ( );</span><br><span class="line"></span><br><span class="line">2.直接创建</span><br><span class="line">Cat cat = new Cat( );</span><br></pre></td></tr></table></figure><h3 id="属性-成员变量"><a href="#属性-成员变量" class="headerlink" title="属性(成员变量)"></a>属性(成员变量)</h3><blockquote><p>概念的叫法： 成员变量 = 属性 = field</p><p>属性是类的组成部分，一般是基本数据类型，也可以是引用类型（对象，数组）</p><p>属性可以不赋值，有默认值，规则和数组一样。</p><p>属性的默认值（int 0 ，short 0，byte 0，long 0 ，float 0.0，double 0.0，char \u0000，boolean false ，String null ）</p></blockquote><h4 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符   属性类型  属性名;</span><br><span class="line"></span><br><span class="line">比如:    int age;  int arr [][];</span><br><span class="line"></span><br><span class="line"> 注： 访问修饰符 是用来控制变量**访问的范围**，有四种分别是   公开public，保护protected ，默认，私有private </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h4 id="访问属性名"><a href="#访问属性名" class="headerlink" title="访问属性名"></a>访问属性名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象名.属性名;</span><br><span class="line">cat.name;</span><br><span class="line">cat.age;</span><br></pre></td></tr></table></figure><h3 id="方法-成员方法）"><a href="#方法-成员方法）" class="headerlink" title="方法(成员方法）"></a>方法(成员方法）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式</span><br><span class="line"></span><br><span class="line">权限   有无返回值   成员方法名称（参数，参数......）&#123;</span><br><span class="line">                  结构体              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：类中的方法是用于处理数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line"></span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">//方法使用</span><br><span class="line">  person  p1 =new person(); // 创建一个对象p1</span><br><span class="line">  p1.speak();  //对象p1调用方法speak（）</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class person &#123;     //创建一个类person</span><br><span class="line"></span><br><span class="line">//属性</span><br><span class="line">String  name;</span><br><span class="line">int age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//方法体</span><br><span class="line"> public   void   speak () &#123; </span><br><span class="line"> System.out.println(&quot;you are good  girl&quot;);</span><br><span class="line"> &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建一只对象cat1 蓝猫</span><br><span class="line">Cat    cat1   = new Cat ();  // 对象cat1 指向Cat的空间</span><br><span class="line">cat1.name = &quot;小蓝&quot;;</span><br><span class="line">cat1.age = 3;</span><br><span class="line">cat1.color = &quot;蓝灰色&quot;;</span><br><span class="line"></span><br><span class="line">//创建一只对象cat2 大花猫</span><br><span class="line">Cat  cat2  = new Cat ();</span><br><span class="line">cat2.name = &quot;花花&quot;;</span><br><span class="line">cat2.age = 5;</span><br><span class="line">cat2.color = &quot;黄棕色&quot;;</span><br><span class="line"></span><br><span class="line">//调用对象猫的属性和方法</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;蓝猫的名字：&quot;+cat1.name+&quot;  年龄：&quot;+cat1.age+&quot;  颜色：&quot;+cat1.color);</span><br><span class="line">System.out.println(&quot;大花猫的名字：&quot;+cat2.name+&quot;  年龄：&quot;+cat2.age+&quot;  颜色：&quot;+cat2.color);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">//定义一个猫的种类  Cat</span><br><span class="line"></span><br><span class="line">class   Cat &#123;</span><br><span class="line"></span><br><span class="line">     String name; //猫的名字</span><br><span class="line"> int  age;  //猫的年龄</span><br><span class="line"> String color; //猫的颜色</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注"><a href="#注" class="headerlink" title="注"></a>注</h3><ol><li>创建新对象之前，必须创建一次一个新的类。</li><li>若成员方法定义了 返回值，其结构体必须得出现 return 字样</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>块作用域</title>
      <link href="/posts/60e03c6.html"/>
      <url>/posts/60e03c6.html</url>
      
        <content type="html"><![CDATA[<h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><p>在深入学习控制流程之前，先了解块作用域</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>块(即复合语句)是指大括号括起来的若干条java语句；<br>而块确定了变量的作用域，一个块可以嵌套在另一个块中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line"> ........</span><br><span class="line">   &#123;</span><br><span class="line"> <span class="type">int</span> m;</span><br><span class="line"> <span class="type">int</span> n;    不能在嵌套的两个块中声明同名的变量，c++可以嵌套同名变量，但Java不行</span><br><span class="line">.........</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><p><p><p><p></p><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul><li>if (条件) {语句}</li><li>if（条件）{语句}   &nbsp;&nbsp;    else{语句}<ul><li>if（条件）{语句}   &nbsp;&nbsp;    elseif（条件）{语句}</li></ul></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span>  <span class="keyword">new</span>  <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的年龄&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;成年了&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可变参数</title>
      <link href="/posts/6963fb18.html"/>
      <url>/posts/6963fb18.html</url>
      
        <content type="html"><![CDATA[<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>概念: java允许同一个类中<strong>多个同名同功能</strong>,但<strong>参数个数不同</strong>的方法,封装成一个方法</p><p>语法:   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">访问权  返回类型   方法名(数据类型... 形式变量)&#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">//int... 表示接受的是可变参数,类型是int,可以接收0-n个参数</span><br><span class="line"> eg:  public  int sum(int... n)&#123;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public  class text&#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     T t = new T();</span><br><span class="line">  </span><br><span class="line">System.out.println(  &quot;参数的个数是&quot;+ t.calc(1,4,7,9) +&quot;  &quot;+&quot;参数的和是&quot;+t.sum(1,4,7,9) );</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> class T&#123;</span><br><span class="line"> </span><br><span class="line"> //查看传入的参数的个数</span><br><span class="line"> public  int  calc(int... n)&#123;    </span><br><span class="line">         return  n.length;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> //使用可变参数实现无限累计加</span><br><span class="line"> public int sum(int...n)&#123;</span><br><span class="line"> int res = 0;</span><br><span class="line"> for(int i = 0; i &lt; n.length; i++)&#123;</span><br><span class="line"> res += n[i]; </span><br><span class="line"> &#125;</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口</title>
      <link href="/posts/5951da65.html"/>
      <url>/posts/5951da65.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-接口概念"><a href="#一-接口概念" class="headerlink" title="一.接口概念"></a>一.接口概念</h2><p>1.什么是接口(API)</p><blockquote><p>接口:<font color='cornflowerblue'>接口是为了提供一种服务</font><br>所有的接口统称为API,接口分为<strong>内部接口</strong>和<strong>外部接口</strong></p><p>外部接口:测试被测系统和外部系统之间的接口</p><p>测试内部接口:<br>1.内部接口提供内部系统使用:开发人员自己开发的对自身系统提供的接口)<br>2.内部接口提供外部系统使用:正例,各种异常场景,权限控制(只需要测试正例即可),开发系统调用外部的其他的接口</p></blockquote><p>2.软件为什么需要接口</p><blockquote><p>接口可以<font color='cornflowerblue'>使外部来修改内部的数据</font></p></blockquote><p>3.怎么做接口测试</p><blockquote><p>一般项目的前后端进度不同,则需要提前将开发出的接口进行测试<br>基于安全考虑,前端的验证很容易绕过,直接请求接口,特别是:身份证信息,银行卡,金钱交易<br>接口的本质:<strong>就是测试接口是否能正常的交互,权限控制及异常场景</strong></p></blockquote><h2 id="二-接口测试的流程"><a href="#二-接口测试的流程" class="headerlink" title="二.接口测试的流程"></a>二.接口测试的流程</h2><ol><li><p>从开发那拿到Api接口(期望不要太大)/用Friider去抓包接口,熟悉接口业务,鉴权码</p></li><li><p>接口计划和方案</p><p>思路:</p><p>​    a.正例:输入正常的入参,查看接口是否返回成功</p><p>​    b.反例</p><p>​                I.鉴权返例: 鉴权为空,鉴权码错误,鉴权码已过期..</p><p>​                II.参数反例: 参数为空,参数类型异常,参数长度异常</p><p>​                III.其他场景:错误码的覆盖,分页异常,接口调用次数限制</p><p>​            </p><p>3.使用接口测试工具postman编写用例和评审</p><p>4.使用postman+Newman+jenkins实现持续集成,并且输出测试报告并且发送邮件  </p></li></ol><h2 id="三-接口协议"><a href="#三-接口协议" class="headerlink" title="三.接口协议"></a>三.接口协议</h2><p> 1.webservice协议</p><blockquote><p>接口地址:<code>http:// ....... ?wsdl</code><br>restful规则:get获取数据,post提交数据,put修改数据,delect删除数据<br>以前对数据的增删改查都是由四个地址进行操作.<br><code>http://192.168.25.2:8080/adduser</code><br><code>http://192.168.25.2:8080/delectuser</code><br><code>http://192.168.25.2:8080/putuser</code><br><code>http://192.168.25.2:8080/postuser</code><br>而现在只用一个网址<code>http://192.168.25.2:8080/user</code>使用get,post,put,delect请求来进行增删改查</p></blockquote><p> 2.dubbo协议</p><blockquote><p>接口地址<code>dubbo://</code><br>适用于少量数据的传输,大并发</p></blockquote><p> 3.http协议</p><p>超文本传输协议(HTTP):一种无状态的,以请求/应答方式运行的协议,它使用可拓展的语义和自描述消息格式.</p><p><code>http协议</code>: 接口地址<code>http://  80</code>,端口是80,<code>https=http+ssl</code>安全传输协议,端口是443</p><p>响应:1XX响应的信息,2XX响应成功,3XX重定向,4XX客户端错误(不传值跳转网页),5XX服务器错误</p><h2 id="须知"><a href="#须知" class="headerlink" title="须知"></a>须知</h2><h3 id="1丶-接口返回的数据格式"><a href="#1丶-接口返回的数据格式" class="headerlink" title="1丶 接口返回的数据格式"></a>1丶 接口返回的数据格式</h3><ol><li>json格式(主流)</li></ol><blockquote><p><strong>Json是一种轻量级的数据交换格式。</strong>它基于JAVAScript的一个子集,采用完全独立于编程语言的文本格式来<strong>存储和表示数据。</strong> 在js语言中，一切都是对象，因此任何支持的类型都可以通过json来表示</p><p>json由<strong>两种特殊类型(数组,对象)</strong>和<strong>四种基本类型(string.int,boolean、NULL值)</strong>构成v</p><p><strong>数组</strong>它也可以像对象那样使用键值对，但还是索引使用得多。值的类型可以是任意类型。举例：{“firstName”: “Brett”, “lastName”: “McLaughlin”}。</p><p><strong>对象</strong>键名可以使用整数和字符串来表示。值的类型可以是任意类型。举例：people:[{“firstName”: “Brett”,”lastName”:”McLaughlin”},{“firstName”:”Jason”,”lastName”:”Hunter”}]</p></blockquote><p>优点</p><blockquote><ul><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率</li></ul></blockquote><p>b. json由两种数据结构组成(可以相互嵌套),MAP对象,键值对,{key:value,key:value}和 数组:[value1,value2,value3]<br>c. 在线校验json结构的网站 <code>http://www.bejson.com</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式:   &#123;error_code:0,msg:&quot;提现成功&quot;,data:[]&#125;</span><br><span class="line"></span><br><span class="line">error_code(自定义名字):错误码,0代表成功</span><br><span class="line">msg:对错误码的中文说明</span><br><span class="line">data:真正返回的数据</span><br></pre></td></tr></table></figure><p> 2.html格式</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;error_code&gt;0&lt;/error_code&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>3.xml格式</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml?version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;error_code&gt;0&lt;/error_code&gt;</span><br><span class="line">...........</span><br><span class="line">&lt;/xml&gt;</span><br></pre></td></tr></table></figure><h3 id="2丶-头字段"><a href="#2丶-头字段" class="headerlink" title="2丶 头字段"></a>2丶 头字段</h3><font color='orange'>HTTP头字段</font>是`key-value`的形式,key和value之间用":"分隔,最后用`crlf`换行表示字段结束.前后端分离则将传输数据类型为` Content-type: application/json`,这里的key就是`Content-kype`.value值就是`application/json`<font color='orange'>头字段规则 </font><ul><li>字段名不区分大小写,字段名里不允许出现空格,可以使用连字符<code>-</code>,但不能使用下划线<code>_</code>(有的浏览器不能解析下划线)</li><li>字段名后面紧跟<code>:</code>字段原则上不能重复.除非<code>set-cookie</code></li></ul><font color='orange'>常用头字段</font><p>http协议中有很多头字段</p><p>请求字段:请求头中的头字段,如<code>Host,Referer</code></p><p>响应字段:响应头中的头字段,如<code>server,Date</code></p><p>通用字段:在请求头和响应头都可以出现,如<code>Content-type,connection</code></p><h3 id="3丶请求报文"><a href="#3丶请求报文" class="headerlink" title="3丶请求报文"></a>3丶请求报文</h3><p>HTTP协议的请求报文由四大部分组成</p><ul><li><p>请求行:描述请求或响应的基本信息<code>GET /index.html HTTP/1.1</code> <code>HTTP/1.1 200 ok</code></p></li><li><p>请求头:使用Key-value形式更详细的说明报文<code>Connection: keep-alive</code></p></li><li><p>空格</p></li><li><p>消息正文:实际传输的数据,它不一定是纯文本,可以是图片,视频,二进制数据</p><p><code>&lt;html&gt;语句&lt;/html&gt;</code></p></li></ul><p>  <font color='orange'>请求头报文格式</font>:   <code>method 空格 url version 换行</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method(请求方法):如`get/head/put/post`,表示对资源的操作</span><br><span class="line">URL(请求目标):通常是一个URl,标记了请求方法要操作的资源</span><br><span class="line">version(版本号):表示报文使用的HTTP协议版本</span><br></pre></td></tr></table></figure><h3 id="4丶响应报文"><a href="#4丶响应报文" class="headerlink" title="4丶响应报文"></a>4丶响应报文</h3><p>HTTP协议的响应报文由四大部分组成</p><ul><li><p>响应行:描述请求或响应的基本信息<code>GET /index.html HTTP/1.1</code> <code>HTTP/1.1 200 ok</code></p></li><li><p>响应头:使用Key-value形式更详细的说明报文<code>Connection: keep-alive</code></p></li><li><p>空格</p></li><li><p>消息正文:实际传输的数据,它不一定是纯文本,可以是图片,视频,二进制数据</p><p><code>&lt;html&gt;语句&lt;/html&gt;</code></p></li></ul><p>  <font color='orange'>响应行报文格式</font>:　<code>version 空格 statuscode 空格 reason 换行</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">version(版本号):表示报文使用的HTTP协议</span><br><span class="line">statuscode(版本状态码):三位数字,表示处理的结果</span><br></pre></td></tr></table></figure><h3 id="5丶HTTP的-Post编码格式"><a href="#5丶HTTP的-Post编码格式" class="headerlink" title="5丶HTTP的 Post编码格式"></a>5丶HTTP的 Post编码格式</h3><blockquote><p>HTTP是以ASCll码来传输的,建立在TCP/IP协议上,HTTP请求/响应包括<strong>请求行,请求头,空格,消息正文</strong></p><p><code>application/x-www-form-urlencoded; charset=UTF-8</code>而请求头的Content-Type属性告诉服务器,浏览器发送的消息正文是通过什么方式进行编码的,服务器就会得知用什么方式进行解析,而POST方法有四种编码格式</p></blockquote><ol><li>application/x-www-form-urlencoded </li></ol><p>post请求的编码格式若不指定,就是这个,只能传key=value值</p><ol><li>multipart/form-data </li></ol><p>（键值对型数据）:通常是用在客户端向服务端传送大文件数据，如：图片或者文件。也可以传key=value</p><ol><li>application/json </li></ol><p>(Json 类型数据):用的超级多，也非常的方便。</p><ol><li>text/xml </li></ol><p>（xml）</p><h3 id="6丶注意"><a href="#6丶注意" class="headerlink" title="6丶注意"></a>6丶注意</h3><ol><li>JSON 格式支持比键值对复杂得多的结构化数据，而且还支持其他数据但是如果在这种格式下用到key—value形式，接收方就接收不到value,因为<strong>消息正文没有application/json形式的处理</strong>来源于<code>https://blog.csdn.net/do_finsh/article/details/72886000</code></li></ol><h3 id="7丶Tcp-IP-协议"><a href="#7丶Tcp-IP-协议" class="headerlink" title="7丶Tcp/IP   协议"></a>7丶Tcp/IP   协议</h3><p>一个HTTP请求流程</p><blockquote><p>输入网址回车后,浏览器会将域名解析出来,浏览器会去查看你的浏览器是否有该域名对应的DNS缓存,有的话,可以拿到服务端的地址,没有的话,会去看你本地的host文件是否配置,没有配置则发起DNS请求来获取你对应的服务器iP地址</p><p>应用层会构造一个DNS请求报文,应用层会调用传输层的一个接口,调用UDP进行传输<br>网络层会将UDP请求报文添加一个IP的请求头,网络层会将其数据交给链路层</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f81e4e4e3d6b41a98c9961a1050c6887.png" alt="请添加图片描述"></p><blockquote><p>应用层:DNS,HTTP,SSH,SMTP,FTP<br>传输控制层:Tcp协议,UDP协议<br>网络层:ipv4,ipv6,arp,icmp<br>数据链路层:以太网,无线LAN<br>物理层:光纤,双绞线电缆.无线设备<br>TCP协议 是面向<strong>连接的</strong> <strong>可靠的</strong>传输控制协议,TCP的三次握手和四次挥手</p></blockquote><h3 id="8-接口报文模版"><a href="#8-接口报文模版" class="headerlink" title="8,接口报文模版"></a>8,接口报文模版</h3><p>  将该接口链接的文档下载下来</p><p>  <img src="https://img-blog.csdnimg.cn/c811a0cf7bff4ba0a2daff3dc89385f9.png" alt="请添加图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">请求部分</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//请求行</span><br><span class="line">POST https://event.csdn.net/logstores/csdn-pc-tracking-page-exposure/track HTTP/1.1</span><br><span class="line">// 请求方式是post,请求地址是https://event.csdn.net/logstores/csdn-pc-tracking-page-exposure/track,协议HTTP/1.1</span><br><span class="line"></span><br><span class="line">//请求头</span><br><span class="line">*Host: event.csdn.net//请求的主机地址</span><br><span class="line">*Connection: keep-alive(保持活跃) //连接方式</span><br><span class="line">*User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 //客户端的用户类型</span><br><span class="line">*Accept: */* //客户端接到的数据格式</span><br><span class="line">*Content-Type: text/plain;charset=UTF-8// 请求内容的格式</span><br><span class="line">*cookie:  eyJfX3NvdXJjZV9fIjoiY3NkbiIsIl9fbG9nc19fIjpbeyJjaWQiOiIxMF8zNTUwNjExOTU2MC0xNjAyMjA2ODMyNjMwLTQyMDgyMiIsInNpZCI6IjEwXzE2NTQ5MzcwMjQ2OTIuNDEyNDY3IiwicGlkIjoicGFzc3BvcnQiLCJ1aWQiOiIiLCJkaWQiOiIxMF8zNTUwNjExOTU2MC0xNjAyMjA2ODMyNjMwLTQyMDgyMiIsImRjX3NpZCI6ImE1NDRmMzYxYmVkZmVlOGNkZWQ1MzIzY2U0NGQ1YzdkIiwicmVmIjoiaHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3oyNzY4NTU3NzkyP3R5cGU9YmxvZyIsImN1cmwiOiJodHRwczovL3Bhc3Nwb3J0LmNzZG4ubmV0L2xvZ2luP2NvZGU9YXBwbGV0cyIsImRlc3QiOiIiLCJ1dG0iOiIiLCJzcG0iOiIxMDMxLjIzNTIuMzAwMS43NzY1IiwidCI6IjE2NTQ5MzczOTciLCJlbGVUb3AiOiIiLCJjQ29va2llIjoiY19kbF91bT0tO2NfZGxfcHJpZD0xNjU0ODI2NDgwMzUxXzk3OTYxNDtjX2RsX3JpZD0xNjU0ODI3NDIxMTE1XzkwMzUwODtjX2RsX2ZyZWY9aHR0cHM6Ly9iYnMuY3Nkbi5uZXQvdG9waWNzLzYwNjg3ODg0ODtjX2RsX2ZwYWdlPS9kb3dubG9hZC9zaW5hdF80MDU3Mjg3NS84NTU5NTA3MjtjX2ZpcnN0X3JlZj1kZWZhdWx0O2NfZmlyc3RfcGFnZT1odHRwcyUzQS8vd3d3LmNzZG4ubmV0LztjX3NlZ21lbnQ9NjtjX3NpZD1hNTQ0ZjM2MWJlZGZlZThjZGVkNTMyM2NlNDRkNWM3ZDtjX3Nlc3Npb25faWQ9MTBfMTY1NDkzNzAyNDY5Mi40MTI0Njc7Y19kc2lkPTExXzE2NTQ5MzcwMjUwMTYuMDg1NzEzO2NfcGFnZV9pZD1kZWZhdWx0O2NfcHJlZj1odHRwcyUzQS8vYmxvZy5jc2RuLm5ldC9tMnNmZmcyJTNGdHlwZSUzMiUzRnNwbSUzRDEwMDAuMjExNS4zMDAxLjUzNDM7Y19yZWY9aHR0cHMlM0EvL2Jsb2cuY3Nkbi5uZXQvbjM0NWRzZmZnMiUzRnR5cGUlM0RibG9nO2NfdG9zPXJkYjF2ODsiLCJfX3RpbWVfXyI6MTY1NDkzNzM5N31dLCJfX3RhZ3NfXyI6eyJ1c2VyYWdlbnQiOiJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTAyLjAuNTAwNS42MyBTYWZhcmkvNTM3LjM2IiwicGxhdGZvcm0iOiJQQyIsImxvZ19pZCI6IjUyMTUifX0=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Referer: https://passport.csdn.net/login?code=applets //请求来源的地址</span><br><span class="line">Content-Length: 1116 (发送给服务器内容的长度)</span><br><span class="line">sec-ch-ua: &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;102&quot;, &quot;Google Chrome&quot;;v=&quot;102&quot;</span><br><span class="line">x-log-apiversion: 0.6.0</span><br><span class="line">sec-ch-ua-mobile: ?0`</span><br><span class="line">user-Agent:   //客户端的用户类型</span><br><span class="line">Safari/537.36</span><br><span class="line">x-log-bodyrawsize: 1234</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Origin: https://passport.csdn.net</span><br><span class="line">Sec-Fetch-Site: same-site</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line"></span><br><span class="line">Accept-Encoding: gzip, deflate, br(可接受的压缩方式)</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//空格部分</span><br><span class="line"></span><br><span class="line">//消息正文</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">响应部分</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//响应行</span><br><span class="line">HTTP/1.1 200 OK//协议 响应码 响应信息</span><br><span class="line"></span><br><span class="line">//响应头</span><br><span class="line">Server: Tengine //服务器的名称</span><br><span class="line">Content-Type: application/octet-stream//响应内容的类型</span><br><span class="line">Content-Length: 0</span><br><span class="line">Connection: keep-alive(保持活跃)</span><br><span class="line">Set-Cookie:Hm_lvt_866c9be12d4a814454792b1fd0fed295=1654732414,1654827627,1654910665,1655001979; Hm_lpvt_866c9be12d4a814454792b1fd0fed295=165502304(响应的cookie)</span><br><span class="line"></span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Expose-Headers: *</span><br><span class="line">Date: Sat, 11 Jun 2022 08:49:57 GMT//响应的时间</span><br><span class="line">x-log-time: 1654937397</span><br><span class="line">x-log-requestid: 62A45735C290A28A675D2C95</span><br><span class="line">Via: cache14.l2cm9-7[24,0], kunlun8.cn1497[53,0]</span><br><span class="line">Timing-Allow-Origin: *</span><br><span class="line">EagleId: 701ea2a616549373977903829e</span><br><span class="line"></span><br><span class="line">//空格</span><br><span class="line"></span><br><span class="line">//消息正文</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五-postman工具"><a href="#五-postman工具" class="headerlink" title="五.postman工具"></a>五.postman工具</h2><blockquote><p>构建请求</p><ol><li>请求方式</li><li>url方式</li><li>请求头的确认</li><li>传参格式</li><li>发送请求</li></ol></blockquote><h3 id="1-功能栏"><a href="#1-功能栏" class="headerlink" title="1.功能栏"></a>1.功能栏</h3><p><img src="C:\Users\hhh\Desktop\postman主界面功能图.png" alt="postman主界面功能图"></p><p>请求标题栏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. params:</span><br><span class="line">请求的参数</span><br><span class="line">2. Authorrization:鉴权方式</span><br><span class="line">3. headers:请求头</span><br><span class="line">4. 请求下的Body:入参格式</span><br><span class="line">   none:没有参数</span><br><span class="line"> form-data:文件/键值对(key- value)</span><br><span class="line"> x-www-form-urlencoded:键值对    </span><br><span class="line">     raw:Json格式(Text,javascript,json,html.xxml)</span><br><span class="line">    binary:传二进制文件</span><br><span class="line"></span><br><span class="line"> 5. pre-request-script:请求之前的脚本</span><br><span class="line"> 6. tests:请求之后断言的代码</span><br><span class="line"> 7. setting:设置 </span><br><span class="line"> 8. cookies:postman管理cookie信息</span><br></pre></td></tr></table></figure><p>响应标题栏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. Body:接口返回的数据</span><br><span class="line"></span><br><span class="line">   pretty:以json,html,xml..不同的格式查看返回的数据</span><br><span class="line">      Raw:以文本格式方式查看返回的数据</span><br><span class="line">     preview:以网页的方式查看返回的数据</span><br><span class="line"></span><br><span class="line"> 2. cookie:响应的cookie信息</span><br><span class="line"> 3. headers:响应头 </span><br><span class="line"> 4. TestResults:断言结果 </span><br><span class="line"> 5. status:状态码 </span><br><span class="line"> 6. time:响应的时间</span><br><span class="line"> 7. szie:响应内容大小</span><br></pre></td></tr></table></figure><h3 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">多种环境:开发环境,测试环境,生成环境</span><br><span class="line">接口关联:需要手动关联</span><br><span class="line">参数需要手动修改</span><br></pre></td></tr></table></figure><h3 id="3-postman环境-全局变量"><a href="#3-postman环境-全局变量" class="headerlink" title="3.postman环境/全局变量"></a>3.postman环境/全局变量</h3><p><img src="C:\Users\hhh\Desktop\postman环境变量图.png" alt="postman环境变量图"></p><p>1.概念</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求地址:<span class="attr">https</span>:<span class="comment">//&#123;&#123;ip&#125;&#125;/cgi-bin/token?grant_type=client_credential&amp;appid=wx6b11b3efd1cdc290&amp;secret=106a9c6157c4db5f6029918738f9529d</span></span><br><span class="line"></span><br><span class="line">此时的ip是环境变量,已经在envirronments中设过了</span><br><span class="line">而在请求地址上引用 环境变量 要用&#123;&#123;变量&#125;&#125;包起来</span><br></pre></td></tr></table></figure><blockquote><ol><li>环境变量:环境变量就是全局变量</li><li>全局变量:全局变量是能够在任何接口都可以访问的变量</li></ol></blockquote><h3 id="4-postman内置动态函数"><a href="#4-postman内置动态函数" class="headerlink" title="4.postman内置动态函数"></a>4.postman内置动态函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">postman内置动态函数,在功能pre-request Script下设置</span><br><span class="line"></span><br><span class="line">&#123;&#123;$timestamp&#125;&#125;生成当前时间的时间戳</span><br><span class="line">&#123;&#123;$randomint&#125;&#125;生成0-100之间的随机数</span><br><span class="line">&#123;&#123;$guid&#125;&#125;生成速记GUID字符串</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">自定义动态参数</span><br><span class="line">设置全局变量,在通过body引用变量传参</span><br><span class="line"></span><br><span class="line">//手动获取时间戳</span><br><span class="line">var times = Date.now();</span><br><span class="line">//设置为全局变量</span><br><span class="line">pm.globals.set(&quot;times&quot;, times);</span><br><span class="line"></span><br><span class="line">使用时,&#123;&#123;times&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="5-解决接口关联问题"><a href="#5-解决接口关联问题" class="headerlink" title="5.解决接口关联问题"></a>5.解决接口关联问题</h3><h4 id="1-使用json提取器"><a href="#1-使用json提取器" class="headerlink" title="1.使用json提取器"></a>1.使用json提取器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">若下一个接口需要上一个传参,在<span class="title class_">Tests</span>断言选项输入以下代码</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用json提取器提取access_token值</span></span><br><span class="line"><span class="comment">//打印返回报文</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(responseBody);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为JSON.parse()方法可以将字符串内容转换成对象形式,这样变量result就可以使用result.属性的方法了</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseBody)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">access_token</span>);<span class="comment">//打印var的access_token属性</span></span><br><span class="line"></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;access_token&quot;</span>, result.<span class="property">access_token</span>);<span class="comment">//把access_token设置全局变量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-使用正则表达式提取器"><a href="#2-使用正则表达式提取器" class="headerlink" title="2.使用正则表达式提取器"></a>2.使用正则表达式提取器</h4><p><img src="C:\Users\hhh\Desktop\正则表达式定全局变量.png" alt="正则表达式定全局变量"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用正则表达式提取器实现接口关联,<span class="title function_">match</span>()方法用于匹配内容</span><br><span class="line">在<span class="title class_">Tests</span>断言选项输入以下代码</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回报文主体 内容进行匹配字段是access_token, &quot; .*? &quot; 代替键值内容</span></span><br><span class="line"><span class="keyword">var</span> result = responseBody.<span class="title function_">match</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;&quot;access_token&quot;:&quot;(.*?)&quot;&#x27;</span>));<span class="comment">//new RegExp(),新建一个正则表达式</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//发现打印的内容有点杂</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>]);<span class="comment">//过滤后,发现打印的内容就是access_token值</span></span><br><span class="line"></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;access_token&quot;</span>, result[<span class="number">1</span>]);<span class="comment">//再把access_token设置全局变量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-postman的断言"><a href="#6-postman的断言" class="headerlink" title="6.postman的断言"></a>6.postman的断言</h3><blockquote><p><strong>断言(Tests功能)可以判断出接口是否返回成功</strong></p></blockquote><h4 id="1-功能栏-1"><a href="#1-功能栏-1" class="headerlink" title="1.功能栏"></a>1.功能栏</h4><blockquote><ol><li>Get an environment variable 获得一个环境变量</li><li>Get a golbal variable 获得一个全局变量</li><li>get a variable 获得一个变量</li><li>get a collection variable 获得一个集合变量</li><li><p>set设置 , clear删除</p></li><li><p>sent a request 发送一个请求</p></li><li><p><strong>status code : Code is 200  检查返回的状态码是否是200</strong></p></li><li><p><strong>response body: Contains string 检查响应中包含指定字符串</strong></p></li><li><strong>response body: JSON value check 检查响应中包含json的值</strong></li><li><strong>response body: is equal to a string 检查响应中等于一个字符串</strong> ,一般用于判断返回值少的字符串</li><li><strong>response header : Content- type header check 检查是否包含某个响应头</strong>,一般就查看有没有content_type</li><li><strong>response time is less than 200ms 检查请求耗时小于200ms</strong></li><li>status code : Successful Post request</li><li>status code : code name has string</li><li>response body: convert xml body to a Json 将XML的返回值转换成一个json对象</li></ol></blockquote><h4 id="2-断言的流程及注意"><a href="#2-断言的流程及注意" class="headerlink" title="2.断言的流程及注意"></a>2.断言的流程及注意</h4><blockquote><p>断言分为 <strong>状态断言 </strong>和 <strong>业务断言</strong></p><p>每一个接口测试时,都需要查看<strong>状态码和核心关键字</strong>,在<strong>功能Tests下</strong>输入相应代码块<br>可以通过<strong>Test Results功能</strong>查看</p></blockquote><p><img src="C:\Users\hhh\Desktop\断言功能.png" alt="断言功能"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//状态码(一个)</span><br><span class="line">pm.test(&quot;检查返回值状态码为200&quot;, function () &#123;</span><br><span class="line">    pm.response.to.have.status(200);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//核心关键字(一般多个)</span><br><span class="line">pm.test(&quot;检查响应中是否包含access_token&quot;, function () &#123;</span><br><span class="line">    pm.expect(pm.response.text()).to.include(&quot;access_token&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">pm.test(&quot;检查响应中是否包含日程&quot;, function () &#123;</span><br><span class="line"></span><br><span class="line">    //若是动态参数断言,只能是自定义的能断言</span><br><span class="line">    1.pm.expect(pm.response.text()).to.include(&quot;date&quot; +pm.globals.get(&quot;times&quot;));</span><br><span class="line">   2. pm.expect(pm.response.text()).to.include(&quot;date&quot; +globals[&quot;times&quot;]);</span><br><span class="line">   3. 2. pm.expect(pm.response.text()).to.include(&quot;date&quot; +globals.times);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>: 若是动态参数断言,只能是自定义的能断言</p><p>在断言中获取自定义动态参数(全局变量)的方式:<br>            <strong>pm.globals.get(“times”)</strong><br>            <strong>globals[“times”]</strong><br>            <strong>globals.times</strong></p><h4 id="3-设置全局断言"><a href="#3-设置全局断言" class="headerlink" title="3.设置全局断言"></a>3.设置全局断言</h4><blockquote><p>因为每个接口都需要状态码断言,可以设置一个全局的,这样每个接口断言就不要写状态码断言了[在Edit选项设置全局Tests]</p></blockquote><p><img src="C:\Users\hhh\Desktop\全局断言设置.png" alt="全局断言设置"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tests下输入</span><br><span class="line">pm.test(&quot;判断状态码是不是200&quot;, function () &#123;</span><br><span class="line">    pm.response.to.have.status(200);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="7-执行开始"><a href="#7-执行开始" class="headerlink" title="7.执行开始"></a>7.执行开始</h3><h4 id="1-运行所有接口-查看信息"><a href="#1-运行所有接口-查看信息" class="headerlink" title="1.运行所有接口,查看信息"></a>1.运行所有接口,查看信息</h4><p><img src="C:\Users\hhh\Desktop\运行集合接口功能图.png" alt="运行集合接口功能图"></p><h4 id="2-自动判断接口的参数结果"><a href="#2-自动判断接口的参数结果" class="headerlink" title="2. 自动判断接口的参数结果"></a>2. 自动判断接口的参数结果</h4><blockquote><p>除了使用csv文件来判断,还有json文件也可以判断,不过两者过程一样,只是文件类型不同<br>而这里只介绍csv文件上传的过程</p></blockquote><p>a.第一步建立个csv文件,里面写入正例和反例及结果码的所有可能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grant_type,appid,secret,assert_value</span><br><span class="line">client_credential,wx6b11b3efd1cdc290,106a9c6157c4db5f6029918738f9529d,access_token</span><br><span class="line">,wx6b11b3efd1cdc290,106a9c6157c4db5f6029918738f9529d,40002</span><br><span class="line">client_credential,,106a9c6157c4db5f6029918738f9529d,41002</span><br><span class="line">client_credential,wx6b11b3efd1cdc290,,41004</span><br></pre></td></tr></table></figure><p>b.第二步将请求的参数值都改称为其变量 </p><p><img src="C:\Users\hhh\Desktop\更改变量值.png" alt="更改变量值"></p><p>c.第三步 更该断言功能Tests里面的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">原断言代码</span><br><span class="line"></span><br><span class="line">//因为JSON.parse()方法可以将字符串内容转换成对象形式,这样变量result就可以使用result.属性的方法</span><br><span class="line">var result = JSON.parse(responseBody)</span><br><span class="line">console.log(result.access_token);//打印var的access_token属性</span><br><span class="line">pm.globals.set(&quot;access_token&quot;, result.access_token);//把access_token设置全局变量</span><br><span class="line"></span><br><span class="line">pm.test(&quot;检查响应是否包含access_token值&quot;, function () &#123;</span><br><span class="line">    pm.expect(pm.response.text()).to.include(&quot;access_token&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">更改后:</span><br><span class="line"></span><br><span class="line">//判断当返回结果中包含有access_token时,才通过json提取access_token值</span><br><span class="line">if(responseBody.search(&quot;access_toke&quot;!=-1))&#123; //search()查找是否包含某字段方法</span><br><span class="line"></span><br><span class="line">//因为JSON.parse()方法可以将字符串内容转换成对象形式,这样变量result就可以使用result.属性的方法</span><br><span class="line">var result = JSON.parse(responseBody)</span><br><span class="line">console.log(result.access_token);//打印var的access_token属性</span><br><span class="line">pm.globals.set(&quot;access_token&quot;, result.access_token);//把access_token设置全局变量</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pm.test(&quot;检查响应是否包含access_token值&quot;, function () &#123;</span><br><span class="line">    pm.expect(pm.response.text()).to.include(data.assert_value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>d.第四步点击<code>run collection</code>将<code>data.csv</code>上传至data功能处</p><p>点击<code>preview</code>查看数据演示</p><p>f.清空全选,选中单个接口运行</p><p><img src="C:\Users\hhh\Desktop\判断结果.png" alt="date文件上传"></p><h3 id="六-fiddler工具"><a href="#六-fiddler工具" class="headerlink" title="六.fiddler工具"></a>六.fiddler工具</h3><p>1.获取请求链接所有的请求头 ,在postman上点击功能键BulkEdit,输入这些请求头</p><p><img src="C:\Users\hhh\Desktop\复制所有的请求头.png" alt="复制所有的请求头"></p><p><img src="C:\Users\hhh\Desktop\请求头.png" alt="请求头"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=helloworld&amp;fenlei=256&amp;rsv_pq=9d1e79b700011649&amp;rsv_t=7eb2SCx1PugFhQCxdR5%2FU%2BH9IL3fZIiTrcIKxN1E1pLkGfjWL5%2BgIIV2421J&amp;rqlang=en&amp;rsv_dl=tb&amp;rsv_enter=1&amp;rsv_sug3=5&amp;rsv_sug1=4&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;rsv_btype=i&amp;prefixsug=helloworld&amp;rsp=4&amp;inputT=6452&amp;rsv_sug4=8213 HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;102&quot;, &quot;Google Chrome&quot;;v=&quot;102&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: https://cn.bing.com/</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PSTM=1602206858; BIDUPSID=B2609704B49E4BB52A6234BE123C9114; __yjs_duid=1_7214023cf5165172180f7377d29c219e1621776676211; BDSFRCVID_BFESS=3tIOJexroG38rlbemRTmhjJ6QmKK0gOTDYrEOwXPsp3LGJLVgHGfEG0PtOVzGoFbI1odogKKWmOTH7kF_2uxOjjg8UtVJeC6EG0Ptf8g0M5; H_BDCLCKID_SF_BFESS=tJ-HoC0XtDD3H48k-4QEbbQH-UnLqMvAtgOZ04n-ah05b-o1-4oV0l30MM6ZtqoLW20j0h7m3UTKsq76Wh35K5tTQP6rLtb73Kc4KKJxbp74Jl3vQ45zDt4OhUJiBhbLBan7_bvIXKohJh7FM4tW3J0ZyxomtfQxtNRJ0DnjtpChbC_9D6LbejjLeU5eetjK2CntsJOOaCkBbqbOy4oWK441DN7H2Pj-aGrn-bn_WDQGDqvoD-Jc3M04K4o9-hvT-54e2p3FBUQJOh3IQft20b0g3l6x2M5aWR6y0n7jWhvRDq72y5JOQlRX5q79atTMfNTJ-qcH0KQpsIJM5-DWbT8IjHCHqTDDJbKHoCvX-5rVjJnv2tP_-P4DepKJ0URZ56bHWh0bfPoSHR5z0lOIM-IpjRQLBMPj52OnKUT-3Cov8qc25f7WDtD03xJ70-543bRTLp7CMq3osRoVDtnfhP-UynJLWh37JK3lMKoaMp78jR093JO4y4Ldj4oxJpOJ5JbMopCafD_WhCD6ejKaenFyqxc0aPR8a-o2WbCQbUcU8pcN2b5oQTJbKxvaK4rNQNO3BqFKLR6vOIJTXpOUWJDkD4RuBq3tWT-D3t5C5hnnel5jDh3MXpKhQUnl5fFDaKny0hvcQb6cShP6MUjrDRLbXU6BK5vPbNcZ0l8K3l02V-bIe-t2XjQhDGAHJ6-8tJCs3t88KJjEe-Kk-PnVeTt3ytnZKRvHa2keVPosKJ5VVxbzM-6kjl_DyP4jKMRn3N5HKl75yUJ5qKOsQU6d34-nQUj405OTbgOpXq3O3JozhJ7ghPJvyp-DXnO7t-nlXbrtXp7_2J0WStbKy4oTjxL1Db3JKjvMtgDtVJO-KKC5MK0x3q; BAIDUID=07164A9259B71EDAEF5DFF8E9C9EC64B:FG=1; BAIDUID_BFESS=F7D52997C3EB96F965A2395BE54A2EFD:FG=1; COOKIE_SESSION=9431174_0_6_6_20_10_0_1_6_4_0_3_2807994_0_0_0_1634822155_0_1650896722%7C9%230_1_1615950967%7C1; BD_UPN=12314753; ZFY=VvdyyF0oDsneCav3mPLD5ecs4M:AjqQxNgDXxxS0wETY:C; ab_sr=1.0.1_N2QxZWJmOWMzZTA3NmZlN2I4ZGZlZTY3NTAzMzA4NWE1YTBhNmMyYTVjNGM0NTQ3MTViYjZkMDM1NGQ3NGU2MWM5OWQzODlmMmY3NTQ2MDgxZmY1ODIwZGJiOWMxYTNhMzY2NTk2Y2IyMDYxNjY5NDg2MjkwNDMyNjc3MjY3ZTdhYzY3NWU0MTBkZTlhMWEyOTE1MjJmYWUyY2I0MDJkMw==; RT=&quot;z=1&amp;dm=baidu.com&amp;si=aymt3kf34vh&amp;ss=l4qsj55r&amp;sl=5&amp;tt=9jt&amp;bcn=https%3A%2F%2Ffclog.baidu.com%2Flog%2Fweirwood%3Ftype%3Dperf&amp;ul=ln6&amp;hd=lqc&quot;; BD_HOME=1; H_PS_PSSID=36560_36625_36673_36455_31660_34813_36167_36569_36073_36267_26350_36469_22157; BA_HECTOR=008h8404a42h8l20ag1hb8fgj15; delPer=0; BD_CK_SAM=1; PSINO=3; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; channel=bing; H_PS_645EC=0255z1rq4m2iDrQCswLBaT8yeE6bJLmzQEBW9fZoXkRV5c11gyJHAY0cNrE; baikeVisitId=4dc53a4c-6f24-42de-be01-82b5b402263d</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>键盘输入调用</title>
      <link href="/posts/73a264ed.html"/>
      <url>/posts/73a264ed.html</url>
      
        <content type="html"><![CDATA[<h3 id="键盘输入调用"><a href="#键盘输入调用" class="headerlink" title="键盘输入调用"></a>键盘输入调用</h3><p>在编程中，需要接收用户输入的数据，就是可以使用键盘输入语句来获取</p><p>input.java 中需要一个扫描器（对象）Scanner</p><p>引入Scanner类步骤：</p><ol><li>导入该类所在的包，Java.util.*</li><li>创建该类对象（声明变量）</li><li>调用里面的功能</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>  java .util.Scanner; <span class="comment">// 表示把java.util 包下的Scanner类导入</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args )</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span>  <span class="variable">myScanner</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Scanner</span> (System.in);<span class="comment">//创建一个对象名为 myScanner</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入名字&quot;</span>) ;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> myScanner.next();<span class="comment">//接收用户输入字符串</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入年龄&quot;</span>) ;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt(); <span class="comment">//接收用户输入的的整型数值</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入薪水&quot;</span>) ;</span><br><span class="line"><span class="type">doubel</span>  <span class="variable">sal</span> <span class="operator">=</span>  myScanner.nextDoubel();<span class="comment">//接收用户输入的双精度类型</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承内存分析</title>
      <link href="/posts/a350daf0.html"/>
      <url>/posts/a350daf0.html</url>
      
        <content type="html"><![CDATA[<h3 id="继承内存分析"><a href="#继承内存分析" class="headerlink" title="继承内存分析"></a>继承内存分析</h3><blockquote><p>1.创建对象之前,先加载方法区中object类,GrandPa类,Father类,Son类的属性和方法</p><p>2.在堆里分配空间,依次开辟空间将Object类的属性,GrandPa类,Father类,Son类的属性放入</p><p>3.依次从Object开始,字符串放在方法区的常量池内</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(son.name);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         此时首次看子类son中是否有name属性,有的话,并且可以访问,就返回</span></span><br><span class="line"><span class="comment">         如果子类没有name属性,则看上一级父类有没有name属性,有的话,并且可以访问,就返回,没有依次往上找,直到找到为止</span></span><br><span class="line"><span class="comment">         假如找到了Object时,就会报错</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        System.out.println(son.hobby);</span><br><span class="line">        <span class="comment">// System.out.println(son.age); 访问不到被封装,只能在同类调用,可以间接调用方法返回</span></span><br><span class="line"></span><br><span class="line">        System.out.println(son.getAge());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          System.out.println(son.capital); 访问不到son类的,而且GrandPa的也被覆盖了,</span></span><br><span class="line"><span class="comment">         除非在本类创建public方法,再调用方法获取capital</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrandPa</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头爷爷&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">hobby</span> <span class="operator">=</span> <span class="string">&quot;旅游&quot;</span>;</span><br><span class="line">    <span class="type">int</span>  capital= <span class="number">300</span>;  <span class="comment">//资金</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">GrandPa</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头爸爸&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">39</span>;</span><br><span class="line">    <span class="type">char</span> sex= <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头儿子&quot;</span>;</span><br><span class="line">  <span class="keyword">private</span>   <span class="type">int</span>  capital= <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承</title>
      <link href="/posts/11d8b32d.html"/>
      <url>/posts/11d8b32d.html</url>
      
        <content type="html"><![CDATA[<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>作用:当多个类具有相同的属性和方法,为了防止代码冗余,引出了继承,使用extends来声明继承父类.</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class 子类 extends 父类 &#123;</span><br><span class="line">子类会自动拥有父类定义的属性和方法</span><br><span class="line">父类又叫超类,基类</span><br><span class="line">子类又叫派生类 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>子类继承了所有的属性和方法,但是(私有 private)属性和方法不能在子类直接访问,要通过父类公共的方法去访问</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类,是ExtendsDD 的父类</span></span><br><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DD</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//此时子类调用父类的(private私有)方法也不行,也只能通过间接方式调用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span>  <span class="title function_">Info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;名字&quot;</span>+ name + <span class="string">&quot;年龄&quot;</span> + age );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义公开的方法让子类间接调用private属性 score</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getScore</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义公开的方法让子类间接调用private方法 Info</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        Info();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子类  ExtendsDD</span></span><br><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsDD</span> <span class="keyword">extends</span> <span class="title class_">DD</span> &#123;</span><br><span class="line">    <span class="comment">//ExtendsDD 继承了DD的 属性 public name,public age,private score</span></span><br><span class="line">    <span class="comment">//ExtendsDD 继承了DD的 方法 public void setScore(double score),public void showInfo()</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">tall</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello,word&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类Test</span></span><br><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//ExtendsDD 继承了DD的 属性 public name,public age,private score</span></span><br><span class="line">        <span class="comment">//ExtendsDD 继承了DD的 方法 public void setScore(double score),public void showInfo()</span></span><br><span class="line">        <span class="type">ExtendsDD</span> <span class="variable">extendsDD</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExtendsDD</span>();</span><br><span class="line">        extendsDD.name=<span class="string">&quot;jack&quot;</span>;</span><br><span class="line">        extendsDD.age=<span class="number">20</span>;</span><br><span class="line">        <span class="comment">//extendsDD.score = 87.5; 调用不到因为属性score在父类中是私有private,子类想使用只能间接调用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;成绩&quot;</span>+extendsDD.getScore(<span class="number">87.5</span>)); ;</span><br><span class="line">        <span class="comment">//extendsDD.Info(); 此时子类调用父类的(private私有)调用不到,而且与父类的Info()方法重名,只能通过间接方式调用</span></span><br><span class="line">        extendsDD.showInfo();</span><br><span class="line">        extendsDD.tall();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>子类必须调用父类的构造器,完成父类的初始化</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//父类 DD</span><br><span class="line">package com;</span><br><span class="line">public class DD &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    public int age;</span><br><span class="line">    private double score;</span><br><span class="line"></span><br><span class="line">    //初始化父类的构造器</span><br><span class="line">    public     DD() &#123;</span><br><span class="line">        System.out.println(&quot;父类DD的初始化构造器被使用&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   //此时子类调用父类的(private私有)方法也不行,也只能通过间接方式调用</span><br><span class="line">    private void  Info() &#123;</span><br><span class="line">        System.out.println( &quot;名字&quot;+ name + &quot;年龄&quot; + age );</span><br><span class="line">    &#125;</span><br><span class="line">    //定义公开的方法让子类间接调用private属性 score</span><br><span class="line">    public double getScore(double score) &#123;</span><br><span class="line">        return score;</span><br><span class="line">    &#125;</span><br><span class="line">    //定义公开的方法让子类间接调用private方法 Info</span><br><span class="line">    public void showInfo() &#123;</span><br><span class="line">        Info();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//子类  ExtendsDD</span><br><span class="line">package com;</span><br><span class="line">public class ExtendsDD extends DD &#123;</span><br><span class="line">    //ExtendsDD 继承了DD的 属性 public name,public age,private score</span><br><span class="line">    //ExtendsDD 继承了DD的 方法 public void setScore(double score),public void showInfo()</span><br><span class="line"></span><br><span class="line">    //初始化子类的构造器</span><br><span class="line">    public ExtendsDD() &#123;</span><br><span class="line">        //这里隐藏了 super(); 这个语句会调用父类的默认无参构造器</span><br><span class="line">        System.out.println(&quot;子类ExtendsDD的初始化构造器被使用&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//测试类 Test</span><br><span class="line">package com;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //ExtendsDD 继承了DD的 属性 public name,public age,private score</span><br><span class="line">        //ExtendsDD 继承了DD的 方法 public void setScore(double score),public void showInfo()</span><br><span class="line">        ExtendsDD extendsDD = new ExtendsDD();</span><br><span class="line">        extendsDD.name=&quot;jack&quot;;</span><br><span class="line">        extendsDD.age=20;</span><br><span class="line">        //extendsDD.score = 87.5; 调用不到因为属性score在父类中是私有private,子类想使用只能间接调用</span><br><span class="line">        System.out.println(&quot;成绩&quot;+extendsDD.getScore(87.5)); ;</span><br><span class="line">        //extendsDD.Info(); 此时子类调用父类的(private私有)调用不到,而且与父类的Info()方法重名,只能通过间接方式调用</span><br><span class="line">        extendsDD.showInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">终端:</span><br><span class="line">父类DD的初始化构造器被使用</span><br><span class="line">子类ExtendsDD的初始化构造器被使用</span><br><span class="line">成绩87.5</span><br><span class="line">名字jack年龄20</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码0</span><br></pre></td></tr></table></figure><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>当创建子类对象时,不管使用子类的哪个构造器,不管父类定义了多少个构造器<strong>默认情况总会去调用父类的无参构造器</strong>,没有就报错,除非用<strong>super</strong>指定其他构造器.</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//父类</span><br><span class="line">package com;</span><br><span class="line">public class DD &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    public int age;</span><br><span class="line">    private double score;</span><br><span class="line"></span><br><span class="line">// public DD()&#123;&#125;</span><br><span class="line">    public     DD(int age) &#123;</span><br><span class="line">        System.out.println(&quot;父类构造器DD(int age)被调用  &quot;+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//子类</span><br><span class="line">package com;</span><br><span class="line">public class ExtendsDD extends DD &#123;</span><br><span class="line">    //ExtendsDD 继承了DD的 属性 public name,public age,private score</span><br><span class="line"></span><br><span class="line">    //初始化子类的构造器</span><br><span class="line">    public ExtendsDD() &#123;</span><br><span class="line">        //这里覆盖了 super(); 这个语句会调用父类的默认无参构造器</span><br><span class="line">        super(20);// 声明新的父类构造器,并调用</span><br><span class="line">        System.out.println(&quot;子类ExtendsDD的构造器ExtendsDD()被使用&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public ExtendsDD(String name) &#123;</span><br><span class="line">        //这里覆盖了super(); 这个语句会调用父类的默认无参构造器</span><br><span class="line">        super(21);// 声明新的父类构造器,并调用</span><br><span class="line">        System.out.println(&quot;子类ExtendsDD的构造器ExtendsDD(String name)被使用&quot;+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//测试类</span><br><span class="line">package com;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //ExtendsDD 继承了DD的 属性 public name,public age,private score</span><br><span class="line">        ExtendsDD extendsDD1 = new ExtendsDD();</span><br><span class="line">        System.out.println(&quot;------&quot;);</span><br><span class="line">        ExtendsDD extendsDD2 = new ExtendsDD(&quot;tom&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">终端:</span><br><span class="line"></span><br><span class="line">父类构造器DD(int age)被调用  20</span><br><span class="line">子类ExtendsDD的构造器ExtendsDD()被使用</span><br><span class="line">------</span><br><span class="line">父类构造器DD(int age)被调用  21</span><br><span class="line">子类ExtendsDD的构造器ExtendsDD(String name)被使用tom</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码0</span><br></pre></td></tr></table></figure><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><p>如果希望指定去调用父类的某个构造器,则显式的调用一下:super(参数列表)</p><h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><p><code>super</code>在使用时,必须在构造器第一行</p><h4 id="6"><a href="#6" class="headerlink" title="6"></a>6</h4><p><code>super()</code> 和<code>this()</code>都只能放在构造器第一行,因此这俩个方法不能共存在一个构造器,而且super()是子类的其中一个构造器调用父类其中一个构造器;this()是本类中俩个构造器用来互相调用的</p><h4 id="7"><a href="#7" class="headerlink" title="7"></a>7</h4><p>java所有类都是Object的子类,Object是所有类的长辈(爸爸,爷爷,老太爷,祖太爷,单细胞)</p><h4 id="8"><a href="#8" class="headerlink" title="8"></a>8</h4><p>父类构造器的调用不限于直接父类,将一直往上追溯到Object类(顶级父类)</p><blockquote><p>比如a&gt;b&gt;c&gt;d&gt;e&gt;object, 调用构造器a(){ }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a() &#123;</span><br><span class="line">    b() &#123;</span><br><span class="line">        c() &#123;</span><br><span class="line">            d() &#123;</span><br><span class="line">                e() &#123;</span><br><span class="line">                    Object() &#123;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="9"><a href="#9" class="headerlink" title="9"></a>9</h4><p>子类最多只能继承一个父类,java中是单继承机制</p><h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><p>不能滥用继承,子类和父;类之间必须满足is -a的逻辑</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造方法</title>
      <link href="/posts/26346fd7.html"/>
      <url>/posts/26346fd7.html</url>
      
        <content type="html"><![CDATA[<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>构造方法<strong>也称构造器</strong>,是类的特殊的方法,它的作用<strong>是完成新对象的初始化</strong></p><p>在创建对象时,系统会自动调用该类的构造器<strong>完成对象的初始化</strong></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] 方法名 (形参列表)&#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意   </span><br><span class="line">1.构造方法 的修饰符可以默认</span><br><span class="line">2.构造方法没有返回值</span><br><span class="line">3.方法名和类名字必须一样</span><br><span class="line">4.参数列表和成员方法一样的规则</span><br><span class="line">5.构造方法的调用是由系统完成</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public  class text&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Person p1 =new Person(&quot;XiaoHui&quot;,15);//当创建一个对象,调用构造器对 新对象进行初始化</span><br><span class="line">System.out.println(&quot;p1对象名字是&quot;+p1.name);</span><br><span class="line">System.out.println(&quot;p1对象年龄是&quot;+p1.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  Person &#123;</span><br><span class="line"> String name;</span><br><span class="line"> int age;</span><br><span class="line"> </span><br><span class="line"> //创建一个构造器</span><br><span class="line"> //注意 构造器没有返回值,名字必须和类名一样</span><br><span class="line"> public Person(String Name, int Age) &#123;</span><br><span class="line"> name = Name;</span><br><span class="line"> age = Age;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public  class text&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Person p1 =new Person(&quot;XiaoHui&quot;,15);</span><br><span class="line">Person p2 =new Person(&quot;Tom&quot;);</span><br><span class="line">System.out.println(&quot;p1对象名字是&quot;+p1.name+&quot;  &quot;+&quot;p1对象年龄是&quot;+p1.age);</span><br><span class="line">System.out.println(&quot;p2对象名字是&quot;+p2.name+&quot;  &quot;+&quot;p2对象年龄是&quot;+p2.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  Person &#123;</span><br><span class="line"> String name;</span><br><span class="line"> int age;</span><br><span class="line"> </span><br><span class="line"> //创建两个构造器,第一个只给对象初始名字,第二个初始名字和年龄</span><br><span class="line"></span><br><span class="line">  public Person(String Name) &#123;</span><br><span class="line"> name = Name;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">  public Person(String Name, int Age) &#123;</span><br><span class="line"> name = Name;</span><br><span class="line"> age = Age;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p>1.一个类中可以定义多个不同的构造器,即构造器重载,进行<strong>不同的初始化</strong></p><p>2.构造器名和类名<strong>相同</strong>,构造器<strong>没有返回值</strong></p><p>3.构造器是<strong>完成对象的初始化</strong>,并不是创建对象</p><p>4.在创建对象时,如果类中有构造器,<strong>系统自动调用构造器</strong>,没有就默认指向堆空间的对象地址 </p><p>5.若有两个以上的构造器也被称为<strong>构造器中的重载</strong></p><p>6.<strong>构造器是不能被调用的</strong>,只能被系统 创建对象时调用</p><p>7.若类中<strong>没有定义构造器</strong>,系统会自动给类生成一个默认无参构造器,比如<code>person() &#123;&#125;</code>,可以使用<code>javap 指令</code>使字节码反编译成类容易阅读,javap -p  computer.class,可以知道类的成员变量和方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">computer com = new computer();//这个使用的是默认的无参构造器,若在类中申明构造器,则括号里面必须得遵循新的构造器的参数规则</span><br><span class="line">int  x = com.jc(3);</span><br><span class="line"> System.out.println(&quot;x=&quot;+x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  computer&#123;</span><br><span class="line"></span><br><span class="line">public   int     jc(int n) &#123;</span><br><span class="line">if( n  == 1) &#123;</span><br><span class="line"> return 1;</span><br><span class="line">&#125;</span><br><span class="line">else  &#123;</span><br><span class="line">  returnjc(n - 1)  * n;    </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">终端显示如下</span><br><span class="line">C:\Users\hhh\Desktop\java文档&gt;java text.java</span><br><span class="line"></span><br><span class="line">C:\Users\hhh\Desktop\java文档&gt;javap text.class</span><br><span class="line">public class text &#123;</span><br><span class="line">  public text();//这个就是无参构造器</span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C:\Users\hhh\Desktop\java文档&gt;javap computer</span><br><span class="line">Compiled from &quot;text.java&quot;//表示该类是来自text.java文件</span><br><span class="line">class computer &#123;</span><br><span class="line">  computer(); //这个就是无参构造器</span><br><span class="line">  public int jc(int);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.若在类中定义了对象初始化构造器,则<strong>覆盖</strong>默认的构造器,则<strong>不能使用</strong>默认的无参构造器,除非<strong>显式的定义一下</strong>,即在类中<strong>重新</strong>写一个新的无参构造器  比如写<code>computer() &#123;&#125;</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Person p1 = new Person();//调用无参构造器,并初始化对象p1</span><br><span class="line">System.out.println(&quot;p1对象的年龄&quot;+p1.age);</span><br><span class="line"></span><br><span class="line">Person p2 = new Person(&quot;jack&quot;,20);//调用有参构造器,并初始化对象p2</span><br><span class="line">System.out.println(&quot;p2对象的名字&quot;+p2.name+&quot;p2对象的年龄&quot;+p2.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class   Person &#123;</span><br><span class="line">int age;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line">public Person() &#123; //创建一个无参的构造器,这样就不怕系统的无参构造器被覆盖了</span><br><span class="line">age =18;</span><br><span class="line">&#125;</span><br><span class="line">   public Person(String Name, int Age)&#123;//创建一个有参的构造器</span><br><span class="line">name=Name;</span><br><span class="line">age=Age;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装</title>
      <link href="/posts/d60eb45.html"/>
      <url>/posts/d60eb45.html</url>
      
        <content type="html"><![CDATA[<h3 id="封装-面向对象编程"><a href="#封装-面向对象编程" class="headerlink" title="封装(面向对象编程)"></a>封装(面向对象编程)</h3><p>封装就是把<strong>属性和方法</strong>封装在一起,数据(属性) 被保护在内部,程序其他部分只能通过<strong>被授权的 操作(方法)</strong> , 才能对数据进行操作</p><p><h3 id="封装的作用"><a href="#封装的作用" class="headerlink" title="封装的作用"></a>封装的作用</h3><p>1.隐藏实现细节</p><p>2.可以对数据进行验证,保证安全合理</p><p><h3 id="封装的步骤"><a href="#封装的步骤" class="headerlink" title="封装的步骤"></a>封装的步骤</h3><ol><li><p>将属性进行<strong>私有化private</strong>[ 不能通过外部修改属性]</p></li><li><p>提供一个(公共的 public)的set方法,对属性判断并赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void setXxx(数据类型  参数列表) &#123; //Xxx表示属性</span><br><span class="line">//加入数据验证的业务逻辑</span><br><span class="line">属性 = 参数;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供一个公共的get方法,用于获取属性的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public 返回类型 getXxx () &#123;  //权限判断</span><br><span class="line">    return  返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="举例"><a href="#举例" class="headerlink" title="　举例"></a>　举例</h3><p>构造器和setXXX()方法结合更佳,防止利用构造器逃离规则,恶意写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public Person(String name, int age, int salary) &#123;</span><br><span class="line">      this.setName(name);</span><br><span class="line">     this.setAge(age);</span><br><span class="line">     this.setSalary(salary);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Encap01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Person person = new Person();</span><br><span class="line">        person.setName(&quot;jack&quot;);</span><br><span class="line">        person.setAge(300);</span><br><span class="line">        person.setSalary(30000);</span><br><span class="line">        System.out.println(person.info());</span><br><span class="line">        System.out.println(&quot;工资&quot;+person.getSalary());</span><br><span class="line">        Person person1 = new Person(&quot;ss&quot;,20000,50000);</span><br><span class="line">        System.out.println(&quot;ss的个人信息&quot;+person1.info());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    //将age,salary,job进行私有封装,只能同类调用这些属性</span><br><span class="line">    private int age;</span><br><span class="line">    private int salary;</span><br><span class="line">    private String job;</span><br><span class="line"></span><br><span class="line">    //定义构造器</span><br><span class="line">    public Person() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age, int salary) &#123;</span><br><span class="line">        //this.name = name;</span><br><span class="line">        //this.age = age;</span><br><span class="line">        //this.salary = salary;</span><br><span class="line"></span><br><span class="line">        setName(name);//相当于this.setName(name);</span><br><span class="line">        setAge(age);//相当于this.setAge(age);</span><br><span class="line">        setSalary(salary);//相当于this.setSalary(salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设置set.get方法</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        //加入对数据的校验</span><br><span class="line">        if(name.length() &gt;=2 &amp;&amp; name.length()&lt;=6) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            System.out.println(&quot;名字错误,名字长度在[2-6]&quot;);</span><br><span class="line">            this.name=&quot;xxxx&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        if (age &gt; 1 &amp;&amp; age &lt; 120) &#123;</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;你的年龄有误,只能在1-120之间&quot;);</span><br><span class="line">            this.age = 18;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public int getSalary() &#123;</span><br><span class="line">       String gh = &quot;123&quot;;</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;请输入你的工号: &quot;);</span><br><span class="line">        String m = scanner.next();</span><br><span class="line">        if(m.equals(gh) ) &#123;</span><br><span class="line">            return salary;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            System.out.println(&quot;你的工号输入有误,工资不给看&quot;);</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSalary(int salary) &#123;</span><br><span class="line">        this.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String getJob() &#123;</span><br><span class="line">        return job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setJob(String job) &#123;</span><br><span class="line">        this.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String info() &#123;</span><br><span class="line">        return &quot;信息:name=&quot; + name + &quot; age=&quot; + age + &quot; 薪水&quot; + salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问修饰符</title>
      <link href="/posts/f941d9b7.html"/>
      <url>/posts/f941d9b7.html</url>
      
        <content type="html"><![CDATA[<h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><ol><li>public(对外公开)</li><li>protected(受保护的),对子类和同一个包公开</li><li>默认级别,没有修饰符,向同一个包的类公开</li><li>private(私有级别),只有类本身可以访问,不对外公开</li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>修饰符作用于 <strong>类中的属性,成员方法,类</strong></li><li>只有默认和公开public才能修饰类</li><li>成员方法的访问规则和属性完全一样</li></ol><p><img src="C:\Users\hhh\Desktop\111.png" alt="111"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.hspedu.nn;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        A a = new A();</span><br><span class="line">        a.m1();  //100,200,300,400</span><br><span class="line">        //同类中方法访问属性和方法,所有修饰符皆可</span><br><span class="line">        </span><br><span class="line">        int m1 = a.n1; </span><br><span class="line">        int m2 = a.n2; </span><br><span class="line">        int m3 = a.n3; </span><br><span class="line">         int m4 = a.n4; //访问不到</span><br><span class="line">         //在同一个包下,除了(私有prviate)不能访问属性和方法,其他皆可</span><br><span class="line">        System.out.println(m1+m2+m3); 100,200,300</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package com.hspedu.mm;  //不同包类访问属性和方法</span><br><span class="line">import package com.hspedu.nn;//引入包</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        A a = new A();</span><br><span class="line">        a.n1;</span><br><span class="line">        a.m1();//不同包只能访问public的属性和方法</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">package com.hspedu.nn;</span><br><span class="line"></span><br><span class="line">public class A &#123;</span><br><span class="line">    public int n1 = 100;</span><br><span class="line">    protected int n2 = 200;</span><br><span class="line">    int n3 = 300;</span><br><span class="line">    private int n4 = 400;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void m1() &#123;</span><br><span class="line">        System.out.println(n1+n2+n3+n4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法重载</title>
      <link href="/posts/5d6d5dcf.html"/>
      <url>/posts/5d6d5dcf.html</url>
      
        <content type="html"><![CDATA[<h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>重载的好处:  减轻了起名的麻烦,减轻了记名的麻烦</p><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><blockquote><p>java中允许同一个类中,多个同名方法的存在,但要求形参列表不一致</p></blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>方法名必须相同</li><li>形参列表必须不同(形参类型/个数/顺序,至少有一种不同,<strong>参数名无要求</strong>)</li><li>返回类型 无要求</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public  class text&#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     T t = new T();</span><br><span class="line"></span><br><span class="line"> System.out.println( t.calc(12, 2.3) );</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> class T&#123;</span><br><span class="line"> </span><br><span class="line"> public  int calc(int  n1, int  n2)&#123;    </span><br><span class="line">         return n1 + n2;  </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">public  double calc(double n1, int  n2)&#123;    </span><br><span class="line">         return n1 + n2;  </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> public double calc(int  n1, double n2)&#123;    </span><br><span class="line">         return n1 + n2;  </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> public int  calc(int  n1, int  n2,int n3)&#123;    </span><br><span class="line">         return n1 + n2 + n3;  </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法重写(覆盖)</title>
      <link href="/posts/40ad4f2e.html"/>
      <url>/posts/40ad4f2e.html</url>
      
        <content type="html"><![CDATA[<h3 id="方法重写-覆盖"><a href="#方法重写-覆盖" class="headerlink" title="方法重写(覆盖)"></a>方法重写(覆盖)</h3><p>方法覆盖:  子类中有一个方法和父类/爷类的某个方法(<strong>名字,返回类型,参数</strong>)一样,则我们说子类这方法<strong>覆盖</strong>了父类的方法</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>方法重写的父类和子类的方法返回类型一样,也可以是<code>父类 public Object getInfo()&#123;&#125;</code> , <code>子类public String getInfo()&#123;&#125;</code> ,子类的返回类型要吗和父类的一致,要吗,比他小</li><li>子类方法<strong>只能大于等于</strong>父类方法的<strong>访问权限</strong>[public &gt; protected &gt; 默认 &gt;private ]</li></ol><h3 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h3><p>重载方法:访问符,返回类型没要求,方法名必须一样,参数(顺序,个数,类型)不一样</p><p>重写方法: 访问符子类必须大于等于父类,返回类型必须小于等于父类,方法名一样,参数一样</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法递归调用</title>
      <link href="/posts/7f42df8e.html"/>
      <url>/posts/7f42df8e.html</url>
      
        <content type="html"><![CDATA[<h3 id="方法递归调用"><a href="#方法递归调用" class="headerlink" title="方法递归调用"></a>方法递归调用</h3><p>意思是：递归就是方法自己调自己，每次调用时传入不同的变量，递归有助于编程者解决复杂问题，也可以让代码更加简洁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">递归调用原理</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">  </span><br><span class="line">       T.t1 = new T();</span><br><span class="line">   t1.test(4);</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"> class  T&#123;</span><br><span class="line"> </span><br><span class="line">public void test(int n) &#123;</span><br><span class="line">if (n &gt; 2) &#123;</span><br><span class="line">test(n - 1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;n=&quot; +n);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="递归重要规则"><a href="#递归重要规则" class="headerlink" title="递归重要规则"></a>递归重要规则</h3><ol><li>执行一个方法时，就创建一个新的受保护的独立空间</li><li>方法的局部变量是独立的，不会互相影响，各个新栈产生的方法变量也不互相影响</li><li>如果方法中使用的是引用类型变量（比如数组，对象），就会共享该引用的类型的数据</li><li>当一个方法执行完毕后，或者遇到return，就会返回。谁调用，就将结果返回给谁，同时当方法执行完毕后或者返回时，该方法也就执行完毕</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  //阶层</span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">computer com = new computer();</span><br><span class="line">int  x = com.jc(3);</span><br><span class="line"> System.out.println(&quot;x=&quot;+x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  computer&#123;</span><br><span class="line"></span><br><span class="line">public   int     jc(int n) &#123;</span><br><span class="line">if( n  == 1) &#123;</span><br><span class="line"> return 1;</span><br><span class="line">&#125;</span><br><span class="line">else  &#123;</span><br><span class="line">  returnjc(n - 1)  * n;    </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//求任意第n个数是多少       斐波那契数【1,1,2,3,5,8,13,21...】</span><br><span class="line">public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">T  t = new   T();</span><br><span class="line">int  x = t.fibonacci(7);</span><br><span class="line"> System.out.println(&quot;x=&quot;+x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  T&#123;</span><br><span class="line"></span><br><span class="line">public   int     fibonacci(int n) &#123;</span><br><span class="line"></span><br><span class="line">if(n  &gt;=1)&#123;</span><br><span class="line">if( n ==1 || n==2) &#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line"></span><br><span class="line">return  fibonacci(n-1) + fibonacci(n-2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">System.out.println(&quot;请输入一个n&gt;=1的数&quot;);</span><br><span class="line">return  -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//汉诺塔游戏                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   </span><br><span class="line"> public  class text&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        </span><br><span class="line">        T t =new T();</span><br><span class="line">        t.move( 2, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">//核心思想: 想象成两个盘,a&gt;b,a&gt;c,b&gt;c</span><br><span class="line">class  T&#123;</span><br><span class="line">    //num代表要盘数，a,b,c分别表示A塔，B塔，C塔</span><br><span class="line">        public void  move( int num, char a, char  b, char c) &#123;</span><br><span class="line">          //如果只有一个盘</span><br><span class="line">          if(num == 1) &#123;</span><br><span class="line">               System.out.println(a + &quot;-&gt;&quot; +c);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">             //如果有多个盘，可以看成两个，最下面的一个盘和上面的所有盘。</span><br><span class="line">             //1.先移动上面所有的盘到b,借助c</span><br><span class="line">             move(num - 1,a , c , b);</span><br><span class="line">              //2.把最下面的那个盘，移动到c</span><br><span class="line">               System.out.println(a + &quot;-&gt;&quot; +c);</span><br><span class="line">                //3.再把 b塔的所有盘，移动到c，借助a</span><br><span class="line">                move(num - 1, b, a, c);</span><br><span class="line">              </span><br><span class="line">          &#125;</span><br><span class="line">                </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维数组的使用</title>
      <link href="/posts/c3e41ead.html"/>
      <url>/posts/c3e41ead.html</url>
      
        <content type="html"><![CDATA[<h2 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a>二维数组的使用</h2><p>二维数组 arr[ 2 ] [ 3 ]的元素是一维数组，如果访问第2个数组的第2个元素是arr[2][2]</p><p><img src="https://img-blog.csdnimg.cn/b806b2e9d3324eda8acfa479b0118fab.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBALuW8l-WFsOWFiw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><h4 id="二位数组语法"><a href="#二位数组语法" class="headerlink" title="二位数组语法"></a>二位数组语法</h4><p>语法：类型[ ] [ ]数组名 = new 类型[ 大小] [大小 ]</p><p>语法： 类型  数组名 [ ] [ ] ;  数组名 = new 类型[大小 ] [大小 ] </p><p>语法：类型  数组名 [ ] [ ] = {   {1,2,3} , {4,5,6,7,8} , {2,3,1}   }  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">打印</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">00000</span></span><br><span class="line"><span class="comment">00100</span></span><br><span class="line"><span class="comment">01240</span></span><br><span class="line"><span class="comment">14656</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">int</span> [][]arr = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length; i++) &#123; <span class="comment">//arr.length指的是二维数组元素的个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span> ; k &lt; arr[i].length ; k++) &#123;<span class="comment">//arr[i].length指的是二维数组元素的个数</span></span><br><span class="line">System.out.print(arr[i][k]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><p><p><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">打印m数组  <span class="number">1</span></span><br><span class="line"> <span class="number">2</span>  <span class="number">2</span></span><br><span class="line"> <span class="number">3</span>  <span class="number">3</span>  <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m[][] = &#123;   &#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;  &#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;m.length; i++ ) &#123;  <span class="comment">//遍历二维数组中的3个数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt;m[i].length ; k++) &#123;</span><br><span class="line"></span><br><span class="line">System.out.print(m[i][k]+<span class="string">&quot;\t&quot;</span>);<span class="comment">//遍历每个数组的每个元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><p><p><p><br>二维数组打印乘法口诀表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m[][] =  <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">9</span>][] ; <span class="comment">//列数不确定，可以不写</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;m.length; i++ ) &#123;  <span class="comment">//遍历二维数组中的3个数组</span></span><br><span class="line">     </span><br><span class="line"> m[i] = <span class="keyword">new</span> <span class="title class_">int</span> [ i+<span class="number">1</span>]; <span class="comment">//循环开启二维数组中的每个一维数组,而且 i+1 影响着下面 m[i].length的长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt;m[i].length ; k++) &#123;</span><br><span class="line"></span><br><span class="line">m[i][k]= i + <span class="number">1</span>;</span><br><span class="line">System.out.print(m[i][k]+<span class="string">&quot;*&quot;</span>+(k+<span class="number">1</span>)+<span class="string">&quot;=&quot;</span>+m[i][k]*(k+<span class="number">1</span>)+<span class="string">&quot;\t&quot;</span>);<span class="comment">//遍历每个数组的每个元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><p><p><p><br>打印十行杨辉三角</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> m[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][];<span class="comment">//定义一个十行的二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m.length;i++ ) &#123;</span><br><span class="line"></span><br><span class="line"> m[i]= <span class="keyword">new</span> <span class="title class_">int</span> [i +<span class="number">1</span>]; <span class="comment">// 开辟m[0],m[1]........m[9]不同的空间</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span><span class="number">0</span>; k &lt; m[i].length; k++) &#123; <span class="comment">//遍历二元数组中每一个一元数组内包含的全部元素</span></span><br><span class="line"><span class="keyword">if</span>( (k == <span class="number">0</span>) || (k == m[i].length -<span class="number">1</span> )) &#123;</span><br><span class="line">m[i][k]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m[i][k]= m[i-<span class="number">1</span>][k-<span class="number">1</span>]+m[i-<span class="number">1</span>][k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span>  <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m.length;i++ ) &#123;</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span><span class="number">0</span>; k &lt; m[i].length; k++) &#123; </span><br><span class="line">System.out.print(m[i][k]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><p><p><p></p><p>一个数组{10，12，45，90}是升序，要求插入一个数后，还是升序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span> &#123;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  arr[]  = &#123;<span class="number">10</span>,<span class="number">12</span>,<span class="number">45</span>,<span class="number">90</span>&#125;;</span><br><span class="line"><span class="type">int</span>  <span class="variable">insertNum</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">// index就是要插入的位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//**定位**</span></span><br><span class="line"><span class="comment">//设一个变量index用于接收下标i，依次遍历 插入的数inserNum 和 原数组的元素arr[i] 进行比较，</span></span><br><span class="line"><span class="comment">//若 插入数insertNum小，则用index获取当前元素下标i；   否则将接收下标的index赋予最大下标arr[arr.length]</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>( insertNum &lt;= arr[i]) &#123;</span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index == -<span class="number">1</span>) &#123;</span><br><span class="line">index = arr.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;定位index的位置是 &quot;</span>+index);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//**扩容**</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个新的数组，并将原先的数组依次赋值给新数组</span></span><br><span class="line"><span class="type">int</span>   arr_new[] = <span class="keyword">new</span> <span class="title class_">int</span> [arr.length+<span class="number">1</span>]; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j=<span class="number">0</span>; i &lt; arr_new.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>( i != index ) &#123;</span><br><span class="line">arr_new[i] = arr[j];</span><br><span class="line">j++;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">arr_new[i] = insertNum;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让arr指向arr_new,回收原来arr的空间</span></span><br><span class="line">              arr  =  arr_new;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历输出</span></span><br><span class="line">System.out.println(<span class="string">&quot;-----添加过后的排序-----&quot;</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.print(arr[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><p><p><p><br>彩票实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个函数，用于换行</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title function_">nt</span> <span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用于随机每个红蓝球</span></span><br><span class="line"><span class="type">int</span> redArr[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="type">int</span> blueArr[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于接收用户每个红蓝球</span></span><br><span class="line"><span class="type">int</span> insertRed[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="type">int</span> insertBlue[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//随机红蓝号码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;redArr.length; i++) &#123;</span><br><span class="line">redArr[i] = rand.nextInt(<span class="number">33</span> - <span class="number">1</span> + <span class="number">1</span>) + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blueArr[<span class="number">0</span>] = rand.nextInt(<span class="number">16</span> - <span class="number">1</span> + <span class="number">1</span>) + <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//匹配红蓝中奖号码</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//用于定义红球中的次数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//用于定义蓝球中的次数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;redArr.length; i++) &#123;</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">&quot;请输入第&quot;</span>+num+<span class="string">&quot;红色球号码[1-33]&quot;</span>);</span><br><span class="line">insertRed[i] =  scanner.nextInt();</span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span> ; j&lt;redArr.length; j++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(insertRed[i] == redArr[j] ) &#123;</span><br><span class="line">index1++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入1个蓝色球号码[1-16]&quot;</span>);</span><br><span class="line">insertBlue[<span class="number">0</span>] =  scanner.nextInt();</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">if</span>(insertBlue[<span class="number">0</span>] == blueArr[<span class="number">0</span>] ) &#123;</span><br><span class="line">index2++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nt ();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( index1== <span class="number">6</span> &amp;&amp; index2 == <span class="number">1</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;天哪，欧皇降临，获得一等奖1000万元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( index1== <span class="number">6</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;运气爆棚，获得二等奖500万元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( index1== <span class="number">5</span> &amp;&amp; index2 == <span class="number">1</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;不错呦，获得三等奖3000元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( index1== <span class="number">5</span> ||  (index1==<span class="number">4</span>  &amp;&amp; index2 == <span class="number">1</span>) ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;嘿嘿，获得四等奖200元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( index1== <span class="number">4</span> ||  (index1==<span class="number">3</span>  &amp;&amp; index2 == <span class="number">1</span>) ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;哦吼，获得五等奖10元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( index2 == <span class="number">1</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;不赖不赖，获得六等奖5元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>   &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;谢谢惠顾，感谢你为民生做出贡献&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  nt();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;是否查看本次福利彩票中奖号码(y/n)&quot;</span>);</span><br><span class="line"><span class="type">char</span>  <span class="variable">x</span> <span class="operator">=</span> scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>( x == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公布最终获奖号码。</span></span><br><span class="line">System.out.println(<span class="string">&quot;****本次彩票中奖号码为****&quot;</span>);</span><br><span class="line">nt();</span><br><span class="line">System.out.println(<span class="string">&quot;红球分别是&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;redArr.length; i++) &#123;</span><br><span class="line">System.out.print(redArr[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nt();</span><br><span class="line">System.out.println(<span class="string">&quot;蓝球分别是&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;blueArr.length; i++) &#123;</span><br><span class="line">System.out.print(blueArr[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nt();</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二维数组的注意事项"><a href="#二维数组的注意事项" class="headerlink" title="二维数组的注意事项"></a>二维数组的注意事项</h3><p>定义方式 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一维： int arr       [ ] = new int [x ];</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">二维： int  arr [ ][ ] = new int [ x][ y];</span><br></pre></td></tr></table></figure><blockquote><p>二位数组是由多个一位数组组成的，它的各个一位数组的长度可以相同，也可以不相同<br>arr [ ][ ] = { {1,23},{43,65,76},{22,56..87.33,24} } </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态数组</title>
      <link href="/posts/8d78178a.html"/>
      <url>/posts/8d78178a.html</url>
      
        <content type="html"><![CDATA[<h3 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h3><p>数组的定义类型为父类类型,里面保存的实际元素类型为子类类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.polyarr;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">   private String name;</span><br><span class="line">   private  int age;</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    public String say() &#123;</span><br><span class="line">        return  name + &quot;\t&quot; +age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.polyarr;</span><br><span class="line"></span><br><span class="line">public class Student extends  Person&#123;</span><br><span class="line">    private double score;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age, double score) &#123;</span><br><span class="line">        super(name, age);</span><br><span class="line">        this.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    public String say() &#123;</span><br><span class="line"></span><br><span class="line">        return  super.say()+&quot;score=&quot; + score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.polyarr;</span><br><span class="line"></span><br><span class="line">public class Teacher extends  Person&#123;</span><br><span class="line">    private  double salary;</span><br><span class="line"></span><br><span class="line">    public Teacher(String name, int age, double salary) &#123;</span><br><span class="line">        super(name, age);</span><br><span class="line">        this.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getSalary() &#123;</span><br><span class="line">        return salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSalary(double salary) &#123;</span><br><span class="line">        this.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    //重写父类的方法</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String say() &#123;</span><br><span class="line">        return super.say() +&quot;salary=&quot;+salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.polyarr;</span><br><span class="line"></span><br><span class="line">public class ployArray &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Person [] persons = new Person[5];</span><br><span class="line">        persons[0] = new Person(&quot;jack&quot;,20);</span><br><span class="line">        persons[1]= new Student(&quot;tom&quot;,21,66);</span><br><span class="line">        persons[2] = new Student(&quot;heihuj&quot;,26,98);</span><br><span class="line">        persons[3]= new Teacher(&quot;semi&quot;,18,8734);</span><br><span class="line">        persons[4] = new Teacher(&quot;ligui&quot;,12,5849);</span><br><span class="line"></span><br><span class="line">        //遍历数组</span><br><span class="line">        for (int i = 0; i &lt; persons.length ; i++) &#123;</span><br><span class="line">            System.out.println( persons[i].say());</span><br><span class="line">            //编译类型是persons ,运行类型看后面</span><br><span class="line">            //动态绑定</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模版</title>
      <link href="/posts/61d01d3e.html"/>
      <url>/posts/61d01d3e.html</url>
      
        <content type="html"><![CDATA[<h2 id="这是一个标题"><a href="#这是一个标题" class="headerlink" title="这是一个标题"></a>这是一个标题</h2><p>内容<br>内容<br>内容</p><h3 id="这是一个二级标题"><a href="#这是一个二级标题" class="headerlink" title="这是一个二级标题"></a>这是一个二级标题</h3><p>内容<br><img src="/image/picture.jpg" alt="这是图片的alt属性"><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 分类1 ,分类是指文章的类别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 ,标签代表文章的关键字 </tag>
            
            <tag> 标签2 </tag>
            
            <tag> 标签3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span {  color: #f2b94b;}.bangumi-info-item em {  color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource > svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts > .recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}/*一图流.若不需要,则删除169-176*//* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {  cursor: url("/img/x1.cur"), auto;}a,[type="button"]:not(:disabled),[type="reset"]:not(:disabled),[type="submit"]:not(:disabled),button:not(:disabled) {  cursor: url("/img/x2.cur"), auto !important;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"奈落のBlog","short_name":"奈落","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.min.js"/>
      <url>/js/runtime/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var t=new Date("11/01/2022 00:00:00");now.setTime(now.getTime()+1);var e=(now-t)/1e3/60/60/24,a=Math.floor(e),n=(now-t)/1e3/60/60-24*a,r=Math.floor(n);1==String(r).length&&(r="0"+r);var s=(now-t)/1e3/60-1440*a-60*r,i=Math.floor(s);1==String(i).length&&(i="0"+i);var o=(now-t)/1e3-86400*a-3600*r-60*i,l=Math.round(o);1==String(l).length&&(l="0"+l);let g="";g=r<18&&r>=9?`<img class='boardsign' src='/js/runtime/快速高效.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`:`<img class='boardsign' src='/js/runtime/链接.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=g)}setInterval((()=>{createtime()}),250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[!(function (c) {  var l,    h,    a,    t,    i,    v =      '<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',    o = (o = document.getElementsByTagName("script"))[o.length - 1].getAttribute("data-injectcss"),    p = function (c, l) {      l.parentNode.insertBefore(c, l);    };  if (o && !c.__iconfont__svg__cssinject__) {    c.__iconfont__svg__cssinject__ = !0;    try {      document.write(        "<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>"      );    } catch (c) {      console && console.log(c);    }  }  function d() {    i || ((i = !0), a());  }  function m() {    try {      t.documentElement.doScroll("left");    } catch (c) {      return void setTimeout(m, 50);    }    d();  }  (l = function () {    var c,      l = document.createElement("div");    (l.innerHTML = v),      (v = null),      (l = l.getElementsByTagName("svg")[0]) &&        (l.setAttribute("aria-hidden", "true"),        (l.style.position = "absolute"),        (l.style.width = 0),        (l.style.height = 0),        (l.style.overflow = "hidden"),        (l = l),        (c = document.body).firstChild ? p(l, c.firstChild) : c.appendChild(l));  }),    document.addEventListener      ? ~["complete", "loaded", "interactive"].indexOf(document.readyState)        ? setTimeout(l, 0)        : ((h = function () {            document.removeEventListener("DOMContentLoaded", h, !1), l();          }),          document.addEventListener("DOMContentLoaded", h, !1))      : document.attachEvent &&        ((a = l),        (t = c.document),        (i = !1),        m(),        (t.onreadystatechange = function () {          "complete" == t.readyState && ((t.onreadystatechange = null), d());        }));})(window);]]></content>
      
    </entry>
    
    
  
</search>
