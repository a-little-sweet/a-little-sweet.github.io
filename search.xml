<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>随机动漫Api</title>
      <link href="/posts/d3d28240.html"/>
      <url>/posts/d3d28240.html</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>动漫API</p></div><p><p><br> <a href="https://img.xjh.me/random_img.php?type=bg&amp;return=302">https://img.xjh.me/random_img.php?type=bg&amp;return=302</a></p><p><p><br><a href="https://air.moe/ranimg/api.php">https://air.moe/ranimg/api.php</a></p><p><p><br><a href="https://imgapi.xl0408.top/index.php">https://imgapi.xl0408.top/index.php</a></p><p><p><br><a href="https://www.dmoe.cc/random.php">https://www.dmoe.cc/random.php</a></p><p><p><br><a href="https://api.hanximeng.com/ranimg/api.php">https://api.hanximeng.com/ranimg/api.php</a></p><p><p><br><a href="https://api.btstu.cn/sjbz/?lx=dongman">https://api.btstu.cn/sjbz/?lx=dongman</a></p><p><p><br><a href="https://www.dmoe.cc/random.php">https://www.dmoe.cc/random.php</a></p><p><p><br><a href="https://api.ghser.com/random/api.php">https://api.ghser.com/random/api.php</a></p><p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>for循环</title>
      <link href="/posts/3f209729.html"/>
      <url>/posts/3f209729.html</url>
      
        <content type="html"><![CDATA[<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (循环变量初始化1;循环条件2;循环变量迭代3) &#123;</span><br><span class="line"> 代码体4;</span><br><span class="line"> break;//执行到break跳出整个for循环</span><br><span class="line"> continue;//执行到continue跳出这次循环</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">循环顺序  ：执行一次1，2，4，3，2，4，3 ……</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li><p>循环条件是返回的一个布尔值的表达式</p></li><li><p>for(;循环判断条件;)中的初始化和变量迭代可以写到其他地方，但是两边的分号不能省略</p></li><li><p>循环初始值，可以有多条初始化语句，但类型必须一样</p></li><li><p>循环变量迭代，也可以有多条语句，逗号分隔</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i = 2; 将初始变量放在for循环外，可以增大i变量的作用域</span><br><span class="line">for(;i&lt;=5;i++) &#123;</span><br><span class="line">System.out.println(&quot;hello,world&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//求打印所有9的倍数；并将其个数统计，及总和</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line"> //定义变量number用来接收键盘值</span><br><span class="line">Scanner scanner= new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入一个数字&quot;);</span><br><span class="line">int number = scanner.nextInt();</span><br><span class="line">        int s = 0;</span><br><span class="line">int count = 0;</span><br><span class="line">treble = 9; //treble是倍数</span><br><span class="line"></span><br><span class="line">for(int i=1;i&lt;=number;i++) </span><br><span class="line">&#123;</span><br><span class="line">if(i % treble == 0) </span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;i=&quot;+i);</span><br><span class="line">s++;</span><br><span class="line">count+=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;s=&quot;+s);</span><br><span class="line">System.out.println(&quot;count=&quot;+count);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//求出所有队伍对阵打乒乓的各种可能</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line">Scanner scanner=  new Scanner(System.in); </span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入最大值&quot; );</span><br><span class="line">int number = scanner.nextInt();</span><br><span class="line"></span><br><span class="line"> int count=0;</span><br><span class="line">//for (  int i=0; i&lt;(number/2+1); i++)</span><br><span class="line">for (  int i=0; i &lt; number; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">if (i&lt;(number/2+1))</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(i + &quot;+&quot; + (number-i) + &quot;=&quot;+number );</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;一共有&quot; + count + &quot;种可能&quot; );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//九九乘法表</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line"></span><br><span class="line">for( int i=1;i&lt;10;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(int k=1;k&lt;=i;k++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.print(k+&quot;x&quot;+i+&quot;=&quot;+(k*i)+&quot;  &quot;); </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//倒立九九乘法表</span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line"></span><br><span class="line">for( int i=9;i&gt;0;i--)</span><br><span class="line">&#123;</span><br><span class="line">for(int k=1;k&lt;=i;k++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.out.print(k+&quot;x&quot;+i+&quot;=&quot;+(k*i)+&quot;  &quot;);           </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;\n &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="while循环控制"><a href="#while循环控制" class="headerlink" title="while循环控制"></a>while循环控制</h3><h4 id="基本语法：-1"><a href="#基本语法：-1" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 循环变量初始化 1  </span><br><span class="line">while  （循环条件2) &#123;</span><br><span class="line">循环体3；</span><br><span class="line">循环变量迭代4；</span><br><span class="line">&#125;</span><br><span class="line">流程：1 &gt; 2 &gt; 3 &gt; 4 &gt; 2 &gt; 3 &gt; 4</span><br></pre></td></tr></table></figure><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//实现1-100，以内被3整除的数</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[]  args) &#123;</span><br><span class="line"></span><br><span class="line">int i =1;</span><br><span class="line">    while(i&lt;=100)</span><br><span class="line">    &#123;</span><br><span class="line">            if(i%3 == 0) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while循环控制"><a href="#do-while循环控制" class="headerlink" title="do-while循环控制"></a>do-while循环控制</h3><h4 id="基本语法：-2"><a href="#基本语法：-2" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 循环变量初始化1</span><br><span class="line"> do&#123;</span><br><span class="line">循环体2；</span><br><span class="line">循环变量迭代3；</span><br><span class="line">&#125;while（循环条件4); </span><br><span class="line">执行顺序 1，2，3，4，2，3，4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多重循环控制"><a href="#多重循环控制" class="headerlink" title="多重循环控制"></a>多重循环控制</h3><ol><li>将一个循环体放入另一个循环中，就形成了嵌套循环。 for，while，do while 均可作为内外循环。</li><li>嵌套循环 就是<strong>将内层循环当成循环体</strong>，只有内层循环条件为false，结束内层循环，结束外层当前的一次循环；当外层条件还是T，则再进入内部循环进行循环，直到内部条件再次false，跳出内部，跳出外部当次循环。</li><li>设置外层循环次数位m次，内层为n次，则内部循环体实际需要执行m*n次</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//统计3个班学生的平均值，各班及格人数</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line">Scanner scanner= new Scanner(System.in);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">double   Sum=0;//三个班级成绩总和</span><br><span class="line">   </span><br><span class="line">for(int m=1;m&lt;=3;m++) &#123; // m 代表班级</span><br><span class="line"></span><br><span class="line">double sum=0; //一个班级成绩总和</span><br><span class="line">int count =0; //计数器</span><br><span class="line"></span><br><span class="line">      for(int i=1;i&lt;6;i++) &#123; // i 代表学生</span><br><span class="line"></span><br><span class="line">System.out.println(m+&quot;班的学生，请输入你的成绩&quot;);</span><br><span class="line">double scores = scanner.nextDouble();//定义一个变量scores用于接收成绩</span><br><span class="line">if(scores &gt;=60) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum+=scores;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(m+&quot;班的平均成绩&quot;+(sum / 5)+&quot; 及格人数是&quot;+count+&quot;\n&quot;);</span><br><span class="line">Sum +=sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;三个班级的平均成绩是&quot;+(Sum / 15));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//打印金字塔</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line">//外循环控制行数，内部两个循环依次打印 空格+*</span><br><span class="line">for( int i=1;i&lt;=6;i++) &#123;  //假设i代表行数</span><br><span class="line">for(int  m=1;m&lt;=6-i;m++) &#123;  //m控制空格数</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">for(int n=1;n&lt;=2*i-1;n++) &#123; //n控制*的个数</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//打印空心金字塔</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line">int  totalLevel=6;//层数，先死后活</span><br><span class="line">//外循环控制行数，内部两个循环依次打印 空格+*</span><br><span class="line">for( int i=1;i&lt;=totalLevel;i++) &#123;  //假设i代表行数</span><br><span class="line">for(int  m=1;m&lt;=totalLevel-i;m++) &#123;  //m控制空格数</span><br><span class="line">            System.out.print(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">for(int n=1;n&lt;=2*i-1;n++) &#123; //n控制*的个数</span><br><span class="line">if(( n==1 || n==2*i-1) || i==totalLevel)&#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line"></span><br><span class="line">                     &#125;</span><br><span class="line"> else</span><br><span class="line">System.out.print(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标识符的命名规则规范</title>
      <link href="/posts/cb2b897.html"/>
      <url>/posts/cb2b897.html</url>
      
        <content type="html"><![CDATA[<h3 id="标识符的命名规则规范"><a href="#标识符的命名规则规范" class="headerlink" title="标识符的命名规则规范"></a>标识符的命名规则规范</h3><ol><li><p>java 对各种变量，方法，类命名时使用的字符称为标识符</p></li><li><p>凡事自己可以起名字的地方都是标识符</p></li></ol><h4 id="标识符的命名规则"><a href="#标识符的命名规则" class="headerlink" title="标识符的命名规则"></a>标识符的命名规则</h4><ol><li>由26个英文字母大小写， 0-9  ，_或$组成</li><li>数字不能开头</li><li><strong>不可以使用关键字（stastic）和保留字（goto），但可以包含他们。</strong></li><li><strong>java中严格区分大小写</strong>，长度无限制</li><li>标识符不能有空格</li></ol><h4 id="标识符的命名规范"><a href="#标识符的命名规范" class="headerlink" title="标识符的命名规范"></a>标识符的命名规范</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://pic.diydoutu.com/bq/1994.gif" alt="斧头帮帮主琛哥：这个就叫专业GIF动图-斧头帮帮主,功夫,Kung Fu Hustle,周星驰,香港电影"></h4><ol><li><p>包名 ： 所有单词小写     puda.fike.loke包</p></li><li><p>类名/接口名：大驼峰法，所有首字母大写          StudentResult</p></li><li><p>变量名/方法名 ： 驼峰法（小驼峰），第一个单词小写，第二个大写，彼此类推。studentResult</p></li><li><p>常量名 ：所有字母都大写。每个单词用下划线拼接  Student_Result</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>switch分支结构</title>
      <link href="/posts/254834b.html"/>
      <url>/posts/254834b.html</url>
      
        <content type="html"><![CDATA[<p><img src="C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220123155741868.png" alt="image-20220123155741868"></p><h3 id="switch分支结构"><a href="#switch分支结构" class="headerlink" title="switch分支结构"></a>switch分支结构</h3><p><img src="C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220123163555813.png" alt="image-20220123163555813"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">格式</span><br><span class="line"></span><br><span class="line">switch(表达式)</span><br><span class="line">&#123;</span><br><span class="line">case 常量1:   //当表达式的值等于常量1，就执行语句块1</span><br><span class="line">语句块1；</span><br><span class="line">break;      //表示退出switch结构，若没有break，则穿透到语句块2，并执行下去，直到break退出</span><br><span class="line">case 常量2:</span><br><span class="line">语句块2；</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">…………</span><br><span class="line">case 常量n:</span><br><span class="line">语句块n;</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">default:  //如果上面都没匹配上，则执行default</span><br><span class="line">default 语句块;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p>表达式数据类型，应和case后的<strong>数据类型一样</strong>，</p><p>或者可以<strong>自动转换</strong>可以相互比较类型的，比如输入的是字符，而常量是int</p></li><li><p>switch（表达式）中的表达式的返回值必须是：（byte,short,int,char,String，enum[枚举]）</p></li><li><p>case 子句中的值<strong>必须是常量</strong>，而不能是变量</p></li><li><p><strong>default 子句是可选的</strong>，当没有匹配的case时，执行default</p></li><li><p>break语句是用来帮助一个case分支跳出switch语句，<strong>如果没写break，则会穿透执行</strong>下一个case中的语句块，一直执行下去，直到出现break/执行完default语句也自动跳出</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">switch(a)//首先表达式满足 byte,short,int,char,enum[枚举]，String六个其中之一</span><br><span class="line">&#123;</span><br><span class="line">    case 50 :   //也是可以的，字符a会自动转换为97</span><br><span class="line">System.out.println(&quot;&quot;);</span><br><span class="line">break;</span><br><span class="line">case &#x27;d&#x27;+1 : //也行，结果还是常量，且数据类型和switch中的一致</span><br><span class="line">System.out.println(&quot;&quot;);</span><br><span class="line">break;</span><br><span class="line">default  :  //可以没有</span><br><span class="line">                System.out.println(&quot;&quot;);</span><br></pre></td></tr></table></figure><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//接收一个字符（a-g），分别代表抽奖礼品</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Scanner scanner= <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个字符【a-g】&quot;</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">letter</span> <span class="operator">=</span>  scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(letter)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;中了一等奖&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;中了二等奖&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;中了三等奖&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line"> System.out.println(<span class="string">&quot;纪念奖&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//使用switch 打印月份的季节</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class text</span><br><span class="line">&#123;</span><br><span class="line">public static void main (String[] args)</span><br><span class="line">&#123;</span><br><span class="line">Scanner scanner= new Scanner(System.in);</span><br><span class="line">int mounth = scanner.nextInt();</span><br><span class="line"></span><br><span class="line"> switch (mounth)</span><br><span class="line"> &#123;</span><br><span class="line">case 3:</span><br><span class="line">case 4:</span><br><span class="line">case 5:</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">              break;</span><br><span class="line"> </span><br><span class="line"> case 12:</span><br><span class="line"> case 1:</span><br><span class="line"> case 2:</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">              break;</span><br><span class="line"> </span><br><span class="line"> case 6:</span><br><span class="line"> case 7:</span><br><span class="line">case 8:</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">              break;</span><br><span class="line">  </span><br><span class="line"> case 9:</span><br><span class="line">case 10:  </span><br><span class="line">case 11:</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">              break;</span><br><span class="line">  </span><br><span class="line">  default :</span><br><span class="line">  System.out.println(&quot;你输入的有误&quot;);</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>super关键字</title>
      <link href="/posts/f6ea766.html"/>
      <url>/posts/f6ea766.html</url>
      
        <content type="html"><![CDATA[<h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>概念: super代表父类的引用,用于访问父类的属性,方法,构造器</p><h3 id="使用super的好处"><a href="#使用super的好处" class="headerlink" title="使用super的好处"></a>使用super的好处</h3><ol><li><p>调用父类构造器的好处,分工明确,<strong>父类属性由父类初始化,子类的属性由子类初始化</strong></p></li><li><p>当子类中有和父类的方法/属性重名时,为了访问父类的成员,必须通过super,如果没有重名,super,this直接访是一样的效果</p></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>子类调用属性和方法,一般从子类,父类,Object依次找属性和方法</li><li>super 的访问不限于直接父类,super访问遵循就近原则</li><li>如果本类有属性/方法,则直接调用本类,若没有,则找父类,依次找下去,但中间不能有private卡住,否则的话,不能直接调用,只能<strong>间接调用</strong></li></ol><h3 id="super和this的区别"><a href="#super和this的区别" class="headerlink" title="super和this的区别"></a>super和this的区别</h3><div class="table-container"><table><thead><tr><th style="text-align:left">区别点</th><th>this</th><th>super</th></tr></thead><tbody><tr><td style="text-align:left">访问属性</td><td>先访问本类中的属性,如果没有则从父类中继续查找</td><td>直接访问父类中的属性,如果没有则从父类的父类中继续查找</td></tr><tr><td style="text-align:left">调用方法</td><td>先访问本类中的方法,如果没有则从父类的父类中继续查找</td><td>直接访问父类中的方法,如果没有则从父类的父类中继续查找</td></tr><tr><td style="text-align:left">调用构造器</td><td><code>this(形参列表);</code>调用本类构造器,只能在构造器中调用,而且必须是首行</td><td><code>super(形参列表);</code>调用父类构造器,只能在构造器中调用,而且必须是首行,this&amp;super不能同时</td></tr><tr><td style="text-align:left">特殊含义</td><td>表示当前对象</td><td>子类中访问父类对象</td></tr></tbody></table></div><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol><li>访问父类的属性,但不能访问父类的prive属性 <code>super.属性名</code></li><li>访问父类的方法,不能访问父类的private方法<code>super.方法名</code></li><li>访问父类的构造器,super(参数列表),只能放在构造器的第一句</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//子类</span><br><span class="line">package com.hspedu;</span><br><span class="line"></span><br><span class="line">public class Test extends A &#123;</span><br><span class="line">public int n1;//不同类可以同名属性和方法,就算是子类父类也不影响,不过调用时得特别指定</span><br><span class="line">public int n2;</span><br><span class="line">    public void showInfo() &#123;</span><br><span class="line">        //使用super访问父类属性</span><br><span class="line">        System.out.println(super.n1+super.n2+super.n3);</span><br><span class="line">    &#125;</span><br><span class="line">    public void ok() &#123;</span><br><span class="line">        //使用super访问父类方法</span><br><span class="line">        super.root1();</span><br><span class="line">        super.root2();</span><br><span class="line">        super.root3();</span><br><span class="line">    &#125;</span><br><span class="line">    //调用父类的talk()方法的方式[子类中也未包含同名同参数的talk方法]&amp;&amp; 调用属性也是同理</span><br><span class="line">    talk();//如果本类有,则直接调用本类,若没有,则找父类,依次找下去,但中间不能有private卡住,否则的话,不能直接调用,只能间接调用</span><br><span class="line">    this.talk();//等价于talk();</span><br><span class="line">    super.talk();//区别于this.talk(),talk(),super是直接从父类开始找,后者从子类开始找</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    public  Test()&#123;</span><br><span class="line">        //使用子类构造器访问父类构造器</span><br><span class="line">        super();//如果调用默认的,可以不写,父类的构造器都会被子类的构造器所调用</span><br><span class="line">        super(&quot;SiDun.Lei&quot;);</span><br><span class="line">        super(&quot;Jack&quot;,23);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//父类</span><br><span class="line">package com.hspedu;</span><br><span class="line"></span><br><span class="line">public class A &#123;</span><br><span class="line">    public int n1;</span><br><span class="line">    int n2;</span><br><span class="line">    protected int n3;</span><br><span class="line">    private int n4;</span><br><span class="line"></span><br><span class="line">    public A() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public A(String name ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public A(String name,int salary ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public  void talk() &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    public  void  root1() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    void  root2() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    protected  void  root3() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    private  void  root4() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java的多态</title>
      <link href="/posts/215392d1.html"/>
      <url>/posts/215392d1.html</url>
      
        <content type="html"><![CDATA[<h3 id="java的多态"><a href="#java的多态" class="headerlink" title="java的多态"></a>java的多态</h3><h3 id="引入的原因"><a href="#引入的原因" class="headerlink" title="引入的原因"></a>引入的原因</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Master master = new Master(&quot;tim&quot;);</span><br><span class="line">        Dg dog = new Dog(&quot;金毛&quot;);</span><br><span class="line">        Cat cat = new Cat(&quot;蓝猫&quot;);</span><br><span class="line">        Fish fish = new Fish(&quot;小鱼干&quot;);</span><br><span class="line">        Bone bone = new Bone(&quot;鸡锁骨&quot;);</span><br><span class="line">        master.feed(dog,bone);</span><br><span class="line">        master.feed(cat,fish);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public  void  feed(Dog dog,Bone bone) &#123;</span><br><span class="line">       System.out                                                                                                                    println(name+&quot;给&quot;+dog.getName()+&quot;喂&quot;+bone.getName());</span><br><span class="line">   &#125;</span><br><span class="line">   public  void  feed(Cat cat,Fish fish) &#123;</span><br><span class="line">       System.out.println(name+&quot;给&quot;+cat.getName()+&quot;喂&quot;+fish.getName());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>随着多个动物,食物的增加,对于代码整体而言,<strong>代码复用性不高,不利于代码维护</strong>,所以引入<strong>多态</strong></p><p><p><p><p></p><h3 id="多态-羊皮狼"><a href="#多态-羊皮狼" class="headerlink" title="多态(羊皮狼)"></a>多态(羊皮狼)</h3><p>方法或对象具有多种形态,是面对对象的第三特征,多态是<strong>建立在封装和继承基础之上的</strong></p><p>(1)方法的多态</p><p>​         重载和重写就体现多态</p><p>(2)对象的多态(核心)</p><ol><li>一个对象的编译类型和运行类型可以不一致</li></ol><p><code>Animal animal = new Dog();</code></p><ol><li>编译类型在定义对象时,就确定了不能改变</li><li>运行类型是可以变化的</li><li>编译类型看定义时 <strong>等号的最左边</strong>, 运行类型看  <strong>等号的最右边</strong></li></ol><blockquote><p><code>Animal animal = new Dog();</code><br><code>animal</code>  只是对象引用, new Dog() 才是对象</p><p>对象的多态: 可以让<strong>一个父类的引用</strong> 指向 <strong>一个子类的对象</strong></p><p><code>animal</code>的编译类型是<code>Animal</code>,运动类型是<code>Dog</code></p><p>  <code>animal= new Cat();</code>   <code>animal</code> 的编译类型是<code>Animal</code>,运动类型变成了<code>Cat</code></p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>1.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.Poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line">public class Dog extends Animal&#123;</span><br><span class="line"></span><br><span class="line">    public void cry() &#123;</span><br><span class="line">        System.out.println(&quot;狗:你在狗叫什么...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.Poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line">public class Cat extends Animal&#123;</span><br><span class="line"></span><br><span class="line">    public void cry() &#123;</span><br><span class="line">        System.out.println(&quot;猫:你在猫叫什么&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.Poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line">public class Animal &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Animal animal_1 = new Animal();//编译类型是Animal,运行类型是Animal</span><br><span class="line">        Animal animal_2 = new Dog();//编译类型是Animal,运行类型是Dog</span><br><span class="line">        animal_2.cry();//此时的编译类型是Animal,运行类型是Dog</span><br><span class="line">        animal_2 = new Cat();//此时的编译类型仍然是Animal,但运行类型变成了Cat</span><br><span class="line">        animal_2.cry();//此时的编译类型是Animal,运行类型是Cat</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public  void  cry() &#123;</span><br><span class="line">        System.out.println(&quot;Animal动物在叫....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><p><p><p><p><br>2.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//animal 编译类型是 Animal,可以指向Animal子类的对象</span></span><br><span class="line">    <span class="comment">//food 编译类型是 Food,可以指向Food子类的对象</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Animal animal,Food food)</span> &#123;  System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;给&quot;</span>+animal.getName()+<span class="string">&quot;喂&quot;</span>+food.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Master master = new Master(&quot;Jack&quot;);</span><br><span class="line">        Dog dog  = new Dog(&quot;金毛&quot;);</span><br><span class="line">        Cat cat  = new Cat(&quot;蓝猫&quot;);</span><br><span class="line">        Fish fish = new Fish(&quot;小鱼干&quot;);</span><br><span class="line">        Bone bone = new Bone(&quot;鸡锁骨&quot;);</span><br><span class="line"></span><br><span class="line">        master.feed(dog ,bone);</span><br><span class="line">        master.feed(cat,fish);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态的向上转型"><a href="#多态的向上转型" class="headerlink" title="多态的向上转型"></a>多态的向上转型</h3><ol><li><p>本质:父类的引用指向了子类的对象</p></li><li><p>语法: <code>父类类型 引用名 = new 子类类型();</code></p></li><li><p>特点:编译类型看左边,运行类型看右边</p><p>可以调用父类中的所有成员(需要看访问权限),不能调用子类中特有成员</p><p>最终运行看子类的具体实现效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ss</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">sss</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> <span class="keyword">extends</span>  <span class="title class_">ss</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;动物&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cat</span>  <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;    <span class="comment">//方法重写</span></span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">catMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cat</span>();</span><br><span class="line">       <span class="comment">//animal.catMouse() 不能调用,编译后animal只能调用自己成员</span></span><br><span class="line">        <span class="comment">// 因为在编译阶段,能调用哪些成员,是由编译类型来决定的</span></span><br><span class="line">        animal.eat();<span class="comment">//猫吃鱼</span></span><br><span class="line">        <span class="comment">//编译类型是父类,执行父类的成员,但运行时按照特指的子类执行重写父类的方法,所以子类重写是关键,</span></span><br><span class="line">        <span class="comment">// 而且执行过程中遵循就近原则,先找特指运行的子类,再依次往上找,直到找到为止</span></span><br><span class="line">        animal.sleep();</span><br><span class="line">        animal.run();</span><br><span class="line">        animal.show();</span><br><span class="line">        <span class="comment">//特指的运行子类找不到该方法,就会向编译环境父类Animal找仍未果,再从上级父类直到找到为止</span></span><br><span class="line">        animal.sss(); <span class="comment">//sss</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>   为了让父类指向子类,并且父类引用也可以访问子类的所有成员(除特殊权限)</p><ol><li>语法<code>子类类型</code> 引用名 = (子类类型) 父类引用`;</li><li>只能强转父类的引用,不能强转父类的对象</li><li>要求父类的引用必须指向是当前目标类型的对象</li><li><p>可以调用子类类型中的所有成员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.hhh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cat</span>();</span><br><span class="line">       <span class="comment">//animal.catMouse() 不能调用,编译后animal只能调用自己成员</span></span><br><span class="line">        <span class="comment">//如果想调用只能使用向下转型</span></span><br><span class="line">        <span class="comment">// 向上转型,访问范围看父类的成员,执行看子类;而向下转型,访问范围看子类的成员,执行看子类</span></span><br><span class="line"></span><br><span class="line">        <span class="type">cat</span> <span class="variable">c_at</span> <span class="operator">=</span> (cat) animal;<span class="comment">//和new的区别是,没有创建新的对象</span></span><br><span class="line">        c_at.catMouse();<span class="comment">//猫抓老鼠</span></span><br><span class="line">        c_at.eat();<span class="comment">//猫吃鱼</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3></li><li><p>属性没有重写之说,<strong>属性的值看编译类型</strong></p></li><li><p><code>`instanceOf</code>比较操作符,用于判断<strong>对象的运行类型</strong>是否为xx类型或者xx类型的子类型 </p></li><li><p>动态绑定机制 </p><p>&gt;<br>&gt;</p><blockquote><p>1.当调用对象方法时,该方法会和该对象的内存地址和运行类型绑定</p><p>2.当调用属性时,没有动态绑定机制,哪里声明哪里使用</p></blockquote></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的包</title>
      <link href="/posts/31f532fa.html"/>
      <url>/posts/31f532fa.html</url>
      
        <content type="html"><![CDATA[<h3 id="Java的包"><a href="#Java的包" class="headerlink" title="Java的包"></a>Java的包</h3><h4 id="包的作用"><a href="#包的作用" class="headerlink" title="包的作用"></a>包的作用</h4><blockquote><ol><li>用于区分相同名字的类</li><li>当类很多时,可以很好的管理类[Java Api]</li><li>控制访问范围</li></ol></blockquote><h3 id="常用的包"><a href="#常用的包" class="headerlink" title="常用的包"></a>常用的包</h3><blockquote><p>java.lang.* //lang包是基本包,默认引入,不需要再引入</p><p>java.util.* //util包,系统提供的工具包,工具类,使用Scanner</p><p>java.net.* //网络包,网络开发</p><p>java.awt.* //是做java的界面开发,Gui</p></blockquote><h3 id="包的命名"><a href="#包的命名" class="headerlink" title="包的命名"></a>包的命名</h3><blockquote><p>命名规则: 只包含数字,字母,下划线,小圆点,但不能是关键字或保留字</p><p>命名规范:一般是小写字母+小圆点 , eg: com.公司名.项目名.业务模块名</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>引入包语法<code>import com.hxs.pkg</code> ,引入包是为了使用该包下的类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.pkg;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays; //引入包util下的Arrays类,用于排序</span><br><span class="line">//import java.util.*;不建议导入包util下所有的类,那样只会影响效率</span><br><span class="line">public class import01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;1, 4, 2, 6, -1, 9, 0&#125;;</span><br><span class="line">        Arrays.sort(arr); //</span><br><span class="line">        for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]+&quot;\t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><ol><li><p><code>package</code>的作用是<strong>声明当前类所在的包</strong>,需要放在类的最上面,一个类中最多只有一句package</p></li><li><p>import指令放在package与类定义之间,可以有多句且没有顺序要求</p></li></ol></blockquote><p><p><p><p></p><h3 id="包的本质"><a href="#包的本质" class="headerlink" title="包的本质"></a>包的本质</h3><p>实际上包的本质就是<strong>创建不同的文件夹</strong>用来<strong>存放类</strong></p><p><img src="C:\Users\hhh\Desktop\default1.png" alt="default1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package pack1; //mm类在包pack1中 ; package 关键字,表示打包</span><br><span class="line"></span><br><span class="line">import com.xiaoming.dog;//com.xiaoming表示包名,com是一级目录,xiaoming是二级目录,dog是类</span><br><span class="line">//import com.xiaoqiang.dog; 不能同时引相同的类名</span><br><span class="line">    public class mm &#123;</span><br><span class="line">        public static void main(String[] args) &#123;</span><br><span class="line">        dog d = new dog(); //创建com.xiaoming包下的dog类 对象d</span><br><span class="line"></span><br><span class="line">        com.xiaoqiang.dog d1 = new com.xiaoqiang.dog();//如果想引入,创建com.xiaoqiang包下的dog类 对象d1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法传参机制</title>
      <link href="/posts/a3493d7e.html"/>
      <url>/posts/a3493d7e.html</url>
      
        <content type="html"><![CDATA[<h3 id="方法传参机制"><a href="#方法传参机制" class="headerlink" title="方法传参机制"></a>方法传参机制</h3><ol><li><p>成员方法传递的是<strong>值拷贝</strong>，形参的任何改变不影响实参</p></li><li><p>调用方法会产生一个新栈</p></li><li><p>数组属于引用类型，会指向堆空间</p></li><li><p>引用类型（类,数组,接口）传递的不是值拷贝，而传递的是一个地址</p><p>而形参可以影响实参             </p></li><li><p>对象传递的也是地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//测试 A类中的方法传入（B类对象）参数，在A类的方法中改变B类对象，那么对象B是否变化</span><br><span class="line">//j结果   对象B会发生变化</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">    </span><br><span class="line">Person  p =new Person();</span><br><span class="line">p.name = &#x27;jack&#x27;;</span><br><span class="line">p.age = 10;</span><br><span class="line"></span><br><span class="line">B b = new B();</span><br><span class="line">b.mm(p);  //本质是将对象p的地址传给mn方法</span><br><span class="line"> System.out.print(&quot;main中的p.age=&quot;+ p.age) ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> class   Person &#123;</span><br><span class="line"> </span><br><span class="line"> String name;</span><br><span class="line"> int age;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> class B &#123;</span><br><span class="line"> </span><br><span class="line">public  void   mm (Person p) &#123;</span><br><span class="line">p.age  = 10000;</span><br><span class="line">/*思考如果 p=null ,则上述的结果p.age =10 ，</span><br><span class="line">因为这里的B类的mm方法在传入对象p时，新开的mm栈地址就指向堆中p的地址，</span><br><span class="line">而p=null，则将 mm栈地址指向空，这对堆中的p地址没有任何影响</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/*思考如果 p=new Person , p.age  = 10000;则结果p.age =10 ，</span><br><span class="line">因为这里的B类的mm方法在传入对象p时，新开的mm栈地址就指向堆中p的地址，</span><br><span class="line">而p=new Person，将在堆中创建一个新对象p，p.age=10000的赋值也给了新对象，</span><br><span class="line">当执行完此方法时,输出语句仍然在main栈中找到原本对象p的地址，指向堆中p对象中的p.age</span><br><span class="line">而创建的新对象p，没用就销毁了</span><br><span class="line">*/</span><br><span class="line">&#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域</title>
      <link href="/posts/7a108a3c.html"/>
      <url>/posts/7a108a3c.html</url>
      
        <content type="html"><![CDATA[<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ol><li>在java中,主要变量就是成员变量和局部变量</li><li>一般<strong>局部变量</strong>指的是成员方法中定义的变量</li><li>作用域的分为<strong>全局变量</strong>和<strong>局部变量</strong>,全局变量的作用域在整个类体 ;除了<strong>属性之外</strong>的都是局部变量,作用域只能用于某块</li><li><strong>全局变量可以不赋值</strong>,直接使用,有默认值,但<strong>局部变量没有默认值</strong>所以<strong>必须赋值</strong>, 才能使用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Cat&#123;</span><br><span class="line"></span><br><span class="line">int age=10;//全局变量,作用整个类体</span><br><span class="line"></span><br><span class="line">public void cry() &#123;</span><br><span class="line"></span><br><span class="line">//n 和 name 都是局部变量</span><br><span class="line">//n 和 name的作用域都在cry方法中</span><br><span class="line">int n =10;</span><br><span class="line">String name= &quot;jack&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public void  eat() &#123;</span><br><span class="line">System.out.println(&quot;猫的年龄&quot;+age); //此时可以用,age是类中的全局变量</span><br><span class="line">System.out.println(&quot;猫的名字&quot;+name); //不可以访问到,因为name是其他方法的局部变量</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li><strong>属性和局部变量可以重名</strong>,访问时遵循<strong>就近访问</strong></li><li>在同一个作用域中,比如在同一个方法中,定义的局部变量不能重名,比如说类中的变量和方法中的变量可以重名,同类中不同的方法也可以重名</li><li>属性生命周期长,伴随对象的创建而创建,伴随对象死亡而死亡,局部变量生命周期短,伴随它的代码块的执行而创建,伴随它的代码块的结束而死亡,比如方法调用时及结束  </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Cat&#123;</span><br><span class="line"></span><br><span class="line">int age=10;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line">public void cry() &#123;</span><br><span class="line">String name= &quot;jack&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public void  eat() &#123;</span><br><span class="line">String name  = &quot;liLing&quot; </span><br><span class="line">//name=liLing,对于cry和eat不同的作用域方法中,可以重名, 对于类和方法相同的变量,采取就近原则</span><br><span class="line">System.out.println(&quot;猫的年龄&quot;+age); //age=10</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>全局变量/属性可以被本类使用,或者其他类使用(通过对象调用)</li><li>局部变量只能在本类中对应的方法使用</li><li>全局变量/属性可以加修饰符,局部变量不可以加修饰符</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符优先级</title>
      <link href="/posts/9393c5c.html"/>
      <url>/posts/9393c5c.html</url>
      
        <content type="html"><![CDATA[<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>注意：只有单目运算符、赋值运算符是从右往左运算的。</p><p>运算等级：  <code>（）&#123;&#125;</code>   &gt;  算数运算符 &gt; 位移运算符 &gt; 比较运算符 &gt; 逻辑运算符 &gt; 三元运算符&gt; 赋值运算符</p><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">. ()   {}   ;  ,</th></tr></thead><tbody><tr><td style="text-align:left">R—&gt;L</td><td style="text-align:left">++  —-  ~  !(data type)</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">*  /  %</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">+  -</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">&gt;&gt;  &lt;&lt;  &gt;&gt;&gt;  位移</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">&lt;    &gt;    &lt;=   &gt;=    instanceof</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">==     !=</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">&amp;</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">^</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">\</td><td></td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">&amp;&amp;</td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">\</td><td>\</td><td></td></tr><tr><td style="text-align:left">L—&gt;R</td><td style="text-align:left">？ ：</td></tr><tr><td style="text-align:left">R—&gt;L</td><td style="text-align:left">=  *=  /=  %=</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">+=   -=   &lt;&lt;=  &gt;&gt;=</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">&gt;&gt;&gt;=   &amp;=   ^=    \</td><td>=</td></tr></tbody></table></div>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this关键字</title>
      <link href="/posts/75f5b5c3.html"/>
      <url>/posts/75f5b5c3.html</url>
      
        <content type="html"><![CDATA[<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>假如说构造器传入的形参和类的成员属性名字一样,则构造器就失去作用,所以引入this,什么是this?  <strong>java虚拟机给每个对象分配this,代表当前对象</strong></p><p>注意:<strong>哪个对象调用,this就代表哪个对象</strong></p><p>改版前</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person p2 = new Person(&quot;jack&quot;,20);//调用有参构造器,并初始化对象p2</span><br><span class="line">System.out.println(&quot;p2对象的名字&quot;+p2.name+&quot;p2对象的年龄&quot;+p2.age);//因为作用域的就近原则,则p2.name=null默认值,age=100</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class   Person &#123;</span><br><span class="line">int age=100;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public Person(String name, int age)&#123;//因为构造器与类都定义了相同变量的名字,所以调用采取就近原则</span><br><span class="line">name=name; //jack=jack</span><br><span class="line">age=age;//20=20</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改版后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person p = new Person(&quot;jack&quot;,20);//调用有参构造器,并初始化对象p</span><br><span class="line">System.out.println(&quot;p对象的名字&quot;+p.name+&quot;p对象的年龄&quot;+p.age);//p.name=jack,age=20</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class   Person &#123;</span><br><span class="line">int age=100;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public Person(String name, int age)&#123;//因为构造器与类都定义了相同变量的名字,所以调用采取就近原则</span><br><span class="line">this.name = name; //当前对象p的属性name=jack</span><br><span class="line">     this.age = age;//当前对象p的属性age=20</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><ol><li><p>this是一个对象,this可以访问本类的属性和方法,构造器</p></li><li><p>this用于区分当前类的属性和局部变量</p></li><li><p>访问成员方法的语法:` this.方法名(参数列表)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">class T&#123;</span><br><span class="line"></span><br><span class="line">public void  f1() &#123;</span><br><span class="line">System.out.println(&quot;Hello,world&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void  f2() &#123;</span><br><span class="line">//此时调用f1方法有两种 </span><br><span class="line"> f1();</span><br><span class="line"> this.f1();  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>访问构造器语法:<code>this(参数列表)</code>,<strong>注意只能在构造器中使用</strong></p><p>为什么这样写呢,为了<strong>区别</strong>对象this调用方法this.方法()</p><p>而且<strong>构造器调用构造器时,才能使用 this(参数)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">注意使用this从A构造器调用B构造器,this(参数)语句必须在A构造器的第一句话</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">T  t =new T();</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">class T&#123;</span><br><span class="line"></span><br><span class="line">public   T() &#123;  </span><br><span class="line">this(&quot;jack&quot;,18);</span><br><span class="line">System.out.println(&quot;Hello,world&quot;);</span><br><span class="line">//在无参构造器T()中调用 T(String name,int age)的构造器</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public T(String name,int age) &#123;</span><br><span class="line">System.out.println(&quot;public T(String name,int age)的构造器&quot;);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>this不能在类定义的外部使用,只能在类定义的方法中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">T  t =new T();</span><br><span class="line">        t.f1();</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">class T&#123;</span><br><span class="line"></span><br><span class="line">String name =&quot;jack&quot;;</span><br><span class="line">int age = 20;</span><br><span class="line"></span><br><span class="line">public   void  f1() &#123;  </span><br><span class="line">String name=&quot;Tom&quot;;</span><br><span class="line">System.out.println(name+age); //Tom 20</span><br><span class="line">System.out.println(this.name+this.age); // jack 20</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳转控制break的使用</title>
      <link href="/posts/f2c69016.html"/>
      <url>/posts/f2c69016.html</url>
      
        <content type="html"><![CDATA[<h1 id="跳转控制break的使用"><a href="#跳转控制break的使用" class="headerlink" title="跳转控制break的使用"></a>跳转控制break的使用</h1><h3 id="break的使用"><a href="#break的使用" class="headerlink" title="break的使用"></a>break的使用</h3><ol><li><p>break 用于多层嵌套循环中，可以在<strong>循环条件不满足</strong>情况下<strong>退出循环结构</strong></p></li><li><p>break语句用于嵌套时，可以通过<strong>标签</strong>指定要终止是哪一层语句块 </p></li></ol><p>continue和break的区别，continue跳出当次循环，break结束当前循环</p><p>return 用在方法时，表示跳出方法；用在main，表示退出程序</p><h3 id="标签的使用"><a href="#标签的使用" class="headerlink" title="标签的使用"></a>标签的使用</h3><blockquote><p>1.标签命名 遵守规范即可</p><p>2.在实际开发中，尽量不要使用标签</p><p>3.如果没有指定break，默认退出最近的循环体</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">label1:  &#123;  ……</span><br><span class="line">    label2:  &#123;  ……</span><br><span class="line">    label3:  &#123;  ……</span><br><span class="line"> </span><br><span class="line">  break  label2;//break跳出指定标签label2循环</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220217201812174.png" alt="image-20220217201812174"></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//随机一个1-100的数，当随机到71时，说出随机了多少次？</span><br><span class="line">//此处不用导入包，因为类Math和双精度Double一样，都是在java,lang包下                                                                                                                                                 </span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//用for变换每次s的值，直到s=71时，利用break语句跳出for循环</span><br><span class="line"> for(int i = 1; i&lt;=i;i++) &#123;</span><br><span class="line"> </span><br><span class="line">           int s =  ((int) (Math.random() * 100) +1) ; //将随机值付给s</span><br><span class="line"> </span><br><span class="line"> System.out.println( &quot; 第&quot;+i+&quot;值： &quot;+  s);</span><br><span class="line"> </span><br><span class="line">if (s == 71) &#123;</span><br><span class="line"></span><br><span class="line"> System.out.println(&quot;i=&quot; + i);</span><br><span class="line"></span><br><span class="line"> break;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//从1加到100,加到第几个时，总和大于20</span><br><span class="line">                                                                                                                                           </span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line">int sum= 0;</span><br><span class="line"></span><br><span class="line">for(int i =1;;i&lt;=100;i++) &#123;</span><br><span class="line">sum+=i;</span><br><span class="line">if(sum &gt; 20) &#123;</span><br><span class="line">System.out.println(&quot;当加到第&quot;+i+&quot;个的时候，总和大于20&quot;);</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//实现登录验证，只有三次机会，若用户和密码分别是  baby和666 ，则提示登录成功,否则提示还有几次机会</span><br><span class="line"> </span><br><span class="line">//字符串是否相等，用类String下的equals方法来判断</span><br><span class="line">//一般情况下,更倾向于使用 &quot; 林黛玉&quot;.equals(name)) 代替name.equals(&quot; 林黛玉&quot;))；前者可以避免空指针异常</span><br><span class="line"></span><br><span class="line"> import  java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scanner  scanner =  new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">int mm = 3;</span><br><span class="line"></span><br><span class="line">for(int i =1;i&lt;=3;i++) &#123;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(&quot;请输入账号：  &quot;);</span><br><span class="line">String name =  scanner.next(); //定义字符串zh来接收账号</span><br><span class="line">  </span><br><span class="line">System.out.println(&quot;请输入密码：  &quot;);</span><br><span class="line">String pw  =  scanner.next(); //定义字符串pw来接收密码</span><br><span class="line">// 变量nam调用equals方法,若name值为baby，pw也满足则显示登陆成功</span><br><span class="line">if (  &quot;baby&quot;.equals(name) &amp;&amp;   &quot;666&quot;.equals(pw)  )&#123;  </span><br><span class="line">System.out.println(&quot;登录成功&quot;);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">mm--;</span><br><span class="line"></span><br><span class="line">if(mm &gt; 0)&#123;</span><br><span class="line">System.out.println(&quot;请重新输入，你还有&quot;+mm+&quot;次机会&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else </span><br><span class="line">System.out.println(&quot;你的账号已锁定&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>例题</title>
      <link href="/posts/6d6e514a.html"/>
      <url>/posts/6d6e514a.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//定义方法max,求某个double数组的最大值,并返回</span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">T t = new T();</span><br><span class="line">Double res =  t.max(null);</span><br><span class="line">if( res != null) &#123;</span><br><span class="line"> System.out.println(&quot;n的最大值&quot; +res );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">      class  T&#123;</span><br><span class="line"></span><br><span class="line">public Double max(double... n) &#123;  //Double 是表示返回一个Double的包装类</span><br><span class="line">    if(n!= null &amp;&amp; n.length&gt;0) &#123; //n数组至少有一个元素</span><br><span class="line"></span><br><span class="line"> double  max = n[0];</span><br><span class="line"> for(int i = 1; i &lt; n.length;i++) &#123;</span><br><span class="line">if( max &lt; n[i] ) &#123;</span><br><span class="line">max=n[i];</span><br><span class="line">&#125;</span><br><span class="line">   &#125; </span><br><span class="line">return max;   </span><br><span class="line">             &#125;</span><br><span class="line">else &#123;</span><br><span class="line"> System.out.println(&quot;n的输入为空&quot; );</span><br><span class="line">return null;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;   </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//定义方法find,求从字符串数组中匹配一个人,并返回</span><br><span class="line"> public  class text &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String arr[] = &#123;&quot;aaa&quot;,&quot;bbb&quot;,&quot;jack&quot;,&quot;ddd&quot;,&quot;eee&quot;,&quot;fff&quot;&#125;;</span><br><span class="line">Taxon t = new Taxon();</span><br><span class="line"></span><br><span class="line">  intindex = t.find(&quot;jack&quot;,arr);</span><br><span class="line"> if(index != -1) &#123; //判断返回值是否不等于 -1</span><br><span class="line">  System.out.println(&quot;找到了,是第&quot;+t.find(&quot;jack&quot;,arr)+&quot;位&quot;);</span><br><span class="line"> &#125;else&#123;</span><br><span class="line"> System.out.println(&quot;没找到&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> class  Taxon &#123;</span><br><span class="line">public int find(String s , String arr[]) &#123;</span><br><span class="line">if(arr != null)&#123; //判断数组是否等于空</span><br><span class="line">for(int i=0;i&lt;arr.length;i++) &#123;</span><br><span class="line">if(s == arr[i]) &#123;</span><br><span class="line">return i+1;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">return -1; //如果数组为空,返回index=-1</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">return -1; //如果没有找到,就直接退出</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">//定义方法find,求从字符串数组中匹配一个人,并返回</span><br><span class="line"> public  class text &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> /*</span><br><span class="line"> Taxon t = new Taxon();</span><br><span class="line"> int price = t.updatePrice(200);</span><br><span class="line">System.out.println(price);</span><br><span class="line">*/</span><br><span class="line">Taxon t = new Taxon(&quot;山海经&quot;,200);</span><br><span class="line">t.info();</span><br><span class="line">t.updatePrice();</span><br><span class="line">t.info();</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> /*</span><br><span class="line">class  Taxon &#123;</span><br><span class="line">int price;</span><br><span class="line">public void  updatePrice(int price) &#123;</span><br><span class="line">if(price&gt;150) &#123;</span><br><span class="line">this.price = 150;</span><br><span class="line">&#125;else if(price&gt;100 &amp;&amp; price&lt;=150) &#123;</span><br><span class="line">this.price = 100;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">this.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">class  Taxon &#123;</span><br><span class="line">String name;</span><br><span class="line">int price;</span><br><span class="line">public  Taxon(String name,int price) &#123; //创建一个构造器</span><br><span class="line">this.name = name;</span><br><span class="line">this.price = price;</span><br><span class="line">&#125;</span><br><span class="line">public void  updatePrice() &#123;</span><br><span class="line">//如果方法中,没有price局部变量,this等价于this.price,建议写上</span><br><span class="line">if(this.price&gt;150) &#123;</span><br><span class="line">this.price = 150;</span><br><span class="line">&#125;else if(this.price&gt;100) &#123;</span><br><span class="line">this.price = 100;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public  void info() &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;这本书&gt;&quot;+&quot;名字&quot;+this.name+&quot;|价格&quot;+this.price);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//定义一个数组的复制功能copyArr,输入旧数组,返回一个新数组,元素和旧数组一样</span><br><span class="line"> public  class text &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int oldArr[] = &#123;1,2,3,4,5,6&#125;;</span><br><span class="line">Taxon t =new Taxon();</span><br><span class="line">t.copyArr(oldArr);</span><br><span class="line">t.infor(oldArr);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">class Taxon &#123;</span><br><span class="line"></span><br><span class="line">public int []  copyArr( int oldArr[]) &#123;</span><br><span class="line">int newArr [] = new int [oldArr.length];</span><br><span class="line">for(int i =0; i &lt; oldArr.length; i++) &#123;</span><br><span class="line">newArr[i] = oldArr[i]; </span><br><span class="line">&#125;</span><br><span class="line">return newArr;</span><br><span class="line">&#125;</span><br><span class="line">public void  infor( int  newArr[]) &#123;</span><br><span class="line">for(int i =0; i &lt;  newArr.length; i++) &#123;</span><br><span class="line">System.out.print(newArr[i] +&quot;\t&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//构造器调用</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> class Employee &#123;</span><br><span class="line">String name;</span><br><span class="line">char sex; /</span><br><span class="line"> int age;</span><br><span class="line"> String position; // 职位</span><br><span class="line"> int salary;  // 工资</span><br><span class="line"> </span><br><span class="line"> public Employee(String name,char sex,int age) &#123;</span><br><span class="line"> this.name = name;</span><br><span class="line"> this.sex = sex; </span><br><span class="line"> this.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"> public Employee(String position,int salary) &#123;</span><br><span class="line"> this.position = position;</span><br><span class="line"> this.salary = salary; </span><br><span class="line"> &#125;</span><br><span class="line">public Employee(String name,char sex,int age,String position,int salary) &#123; //复用构造器,可以减少赋值</span><br><span class="line"> this( name, sex, age);</span><br><span class="line"> //this(String position,int salary); 因为构造器直接互相调用,只能在第一句话.</span><br><span class="line"> this.position = position;</span><br><span class="line"> this.salary = salary; </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">打印   </span><br><span class="line"> 1.0      PI*r*r</span><br><span class="line">   |         |</span><br><span class="line"> 5.0      PI*r*r</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">PassObject  p = new PassObject();</span><br><span class="line">Circle c = new Circle(times);</span><br><span class="line">p. printAreas(c,5);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> class Circle &#123;</span><br><span class="line">double radius;//半径</span><br><span class="line"></span><br><span class="line">public  Circle() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//此时的构造器是为了封装属性,不能随意更改</span><br><span class="line">public Circle(radius) &#123;</span><br><span class="line">this.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//返回圆的面积</span><br><span class="line">public   double    findArea() &#123;</span><br><span class="line">return    Math.PI * radius * radius;  //返回面积</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public   double  upRadio(double radius) &#123;</span><br><span class="line">        this.radius = radius;</span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> class  PassObject &#123;</span><br><span class="line"> </span><br><span class="line">public  void printAreas( Circle  c , int times) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(int i = 1; i &lt;= times; i++ ) &#123;</span><br><span class="line">  c.upRadio(i);</span><br><span class="line">System.out.println((double)i+&quot;\t\t\t&quot;+ c.findArea());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">//猜拳游戏</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> Scanner scanner = new Scanner(System.in);  </span><br><span class="line"> Game g = new Game();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(int i = 0;i &lt; 3; i++) &#123;</span><br><span class="line"> System.out.print(&quot;请输入你的第&quot;+(i+1)+&quot;次猜拳[石头0,剪刀1,布2]:\t&quot;); </span><br><span class="line"> g.m = scanner.nextInt();  //接收用户的值</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  g.n = g.computerNum();  //调用 电脑随机数字方法</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> System.out.print(&quot;第&quot;+(i+1)+&quot;局猜拳&quot;+g.m+&quot;  VS  &quot;+ g.n ); </span><br><span class="line">  g.startGame();  //调用 猜拳结果方法</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> System.out.println(&quot;你获胜&quot;+g.count+&quot;局&quot; ); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> class Game &#123;</span><br><span class="line"> int m; //用户</span><br><span class="line"> int  n;  // 机器</span><br><span class="line"> int count; //获胜的次数</span><br><span class="line"></span><br><span class="line"> //电脑随机生成猜拳数字的方法</span><br><span class="line">public  int computerNum() &#123;</span><br><span class="line">  Random r = new Random();</span><br><span class="line"></span><br><span class="line"> return  r.nextInt(3);// 表示随机0-2数字</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//猜拳结果的方法</span><br><span class="line">public  void  startGame() &#123; </span><br><span class="line">  if(m == n) &#123;</span><br><span class="line">  System.out.println(&quot;平局&quot;); </span><br><span class="line">  &#125;</span><br><span class="line">  else if(m ==0 &amp;&amp; n ==1  ) &#123;</span><br><span class="line">   System.out.println(&quot;你赢了&quot;); </span><br><span class="line">   count++;</span><br><span class="line">  &#125;</span><br><span class="line">    else if(m == 1 &amp;&amp; n == 2  ) &#123;</span><br><span class="line">   System.out.println(&quot;你赢了&quot;); </span><br><span class="line">     count++;</span><br><span class="line">  &#125;</span><br><span class="line">    else if(m == 2 &amp;&amp; n == 0  ) &#123;</span><br><span class="line">   System.out.println(&quot;你赢了&quot;); </span><br><span class="line">     count++;</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">   System.out.println(&quot;你输了&quot;); </span><br><span class="line">  &#125;  </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水仙花数</title>
      <link href="/posts/5c4a65bc.html"/>
      <url>/posts/5c4a65bc.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//求一个数是否是水仙花数,其三位数的各个的立方和刚好是它本身</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">public  static void  main(String [] args) &#123;</span><br><span class="line">Scanner scanner =  new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;输入一个三位数&quot;);</span><br><span class="line">  int number = scanner.nextInt();</span><br><span class="line">int a = number/100;</span><br><span class="line">int b = number%100/10;</span><br><span class="line">int c  = number%10;</span><br><span class="line"></span><br><span class="line">if((a*a*a+b*b*b+c*c*c) == number) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;该数是水仙花数&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;该数不是水仙花数&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三元运算符</title>
      <link href="/posts/a23c676d.html"/>
      <url>/posts/a23c676d.html</url>
      
        <content type="html"><![CDATA[<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p> 条件表达式？表达式1：表达式2；</p><ol><li><p>如果条件表达式为true，运算后的结果是表达式1；</p></li><li><p>如果条件表达式为false，运算符的结果是表达式2；</p></li></ol><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args )</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a &gt; b ?  a++ :  b--;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// b--先取值，后自减 </span></span><br><span class="line">    <span class="comment">//b--,返回b的值给result，然后b-1           </span></span><br><span class="line">System.out.println(result);</span><br><span class="line">     System.out.println(a);<span class="comment">//10</span></span><br><span class="line">      System.out.println(b); <span class="comment">//12</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>三元运算符在小转大时，可以<strong>自动转换</strong>数据类型</p><h3 id="举例1"><a href="#举例1" class="headerlink" title="举例1"></a>举例1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args )</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span>  a&gt;b ? <span class="number">1.4</span> : <span class="number">1.5</span><span class="comment">//不可以，属于数据double型转int型</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span>  a&gt;b ? (<span class="type">int</span>)<span class="number">1.4</span> : (<span class="type">int</span>)<span class="number">1.5</span><span class="comment">//可以</span></span><br><span class="line">   <span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span>  a&gt;b ? <span class="number">1.4</span> : <span class="number">1.5</span> <span class="comment">//可以</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="举例2"><a href="#举例2" class="headerlink" title="举例2"></a>举例2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//求用三元运算符比较三数大小，并输出</span><br><span class="line">public class  text &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String [] args ) &#123;</span><br><span class="line"></span><br><span class="line">    int  a  = 12;</span><br><span class="line">    int  b = 16;</span><br><span class="line">    int  c=  21;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     int max = a&gt;b ? a: b; </span><br><span class="line">     max =  max &gt; c ? max : c;</span><br><span class="line"> System.out.println(max) ;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  int max1 = (a &gt; b ? a : b) &gt; c ?  (a&gt;b ? a: b)  : c</span><br><span class="line">  System.out.println(max1) ;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> int max2 =   a &gt; b ?  (a &gt;c ?  a : c ) : (b &gt; c ? b : c );</span><br><span class="line">  System.out.println(max2) ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/posts/a444b428.html"/>
      <url>/posts/a444b428.html</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>指的是将多个数据一次指定进行顺序排列的过程。</p><p>排序分为四个:  1.内部排序，2.外部排序，3.</p><h3 id="内部排序"><a href="#内部排序" class="headerlink" title="内部排序"></a>内部排序</h3><blockquote><p>指的是将所有数据都加在到内部存储器进行排序。包括(交换式排序法，选择式排序法和插入式排序法）</p></blockquote><h5 id="冒泡排序法："><a href="#冒泡排序法：" class="headerlink" title="冒泡排序法："></a>冒泡排序法：</h5><p> 通过对待排序序列从后向前排序，<strong>下标从大到小</strong> 依次比较相邻的值，值大的从前移到后面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">原:24，69，80，57，13，将最大的数放在最后</span><br><span class="line"></span><br><span class="line">第一轮排序 </span><br><span class="line">第一次比较: 24，69，80，57，13</span><br><span class="line">第二次比较  24，69，80，57，13</span><br><span class="line">第三次比较: 24，69，57，80，13</span><br><span class="line">第四轮比较  24，69，57，13，80</span><br><span class="line"></span><br><span class="line">第二轮排序 </span><br><span class="line">第一次比较: 24，69，57，13，80</span><br><span class="line">第二次比较  24，57，69，13，80</span><br><span class="line">第三次比较: 24，57，13，69，80</span><br><span class="line"></span><br><span class="line">第三轮排序 </span><br><span class="line">第一次比较: 24，57，13，69，80</span><br><span class="line">第二次比较  24，13，57，69，80</span><br><span class="line"></span><br><span class="line">结论：假设有n个数用冒泡排序，执行n-1轮，每轮 n-1 递减一次</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line">public class text &#123;</span><br><span class="line"></span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">int a[] =&#123;24,69,80,57,13&#125;;</span><br><span class="line">for(int j = 0; j&lt;4; j-- ) &#123;       //for(int j = 4; j&gt;0; j-- ) &#123;</span><br><span class="line">for(int i= 0; i&lt; a.length -1;i++ ) &#123;   //for(int i= 0; i&lt; j;i++ ) &#123;</span><br><span class="line"></span><br><span class="line">if(a[i] &gt; a[i+1]) &#123;</span><br><span class="line">int max = a[i+1];</span><br><span class="line">    a[i+1] = a[i];</span><br><span class="line">a[i] = max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(int i=0; i&lt;5;i++) &#123;</span><br><span class="line">System.out.println(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line">public class text &#123;</span><br><span class="line"></span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">int a[] =&#123;24,69,80,57,13,60,78,56,33,98&#125;;</span><br><span class="line">for(int k = 0; k&lt;a.length-1; k++) &#123;</span><br><span class="line">for(int i= 0; i&lt; a.length-1 -k;i++ ) &#123;</span><br><span class="line"></span><br><span class="line">if(a[i] &gt; a[i+1]) &#123;</span><br><span class="line">int max = a[i+1];</span><br><span class="line">    a[i+1] = a[i];</span><br><span class="line">a[i] = max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(int i=0; i&lt;a.length;i++) &#123;</span><br><span class="line">System.out.println(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查找排序"><a href="#查找排序" class="headerlink" title="查找排序"></a>查找排序</h3><p>查找排序分为两个，顺序排序和二分查找</p><h5 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//查找某字符串在数组内的下标，没有报错，退出</span><br><span class="line">import  java.util.Scanner;</span><br><span class="line">public class text &#123;</span><br><span class="line"></span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">Scanner scanner = new Scanner(System.in);</span><br><span class="line">String name[] =&#123;&quot;69&quot;,&quot;80&quot;,&quot;57&quot;,&quot;13&quot;,&quot;26&quot;&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入要查找的工号&quot;);</span><br><span class="line">     String  Name =   scanner.next();</span><br><span class="line">  </span><br><span class="line"> int index = -1;//判断值</span><br><span class="line">for(int i= 0; i&lt; name.length;i++ ) &#123;</span><br><span class="line">if( name[i].equals(Name) )&#123;</span><br><span class="line">System.out.println(&quot;已查到工号是&quot;+(i+1));</span><br><span class="line">index = i;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(index == -1) &#123;</span><br><span class="line">System.out.println(&quot;没有查到该工号&quot;);</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="外部排序法"><a href="#外部排序法" class="headerlink" title="外部排序法"></a>外部排序法</h4><p>&gt;<br>&gt;</p><blockquote><p>数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括(合并排序法，直接合并排序法)</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类与对象</title>
      <link href="/posts/3a517f26.html"/>
      <url>/posts/3a517f26.html</url>
      
        <content type="html"><![CDATA[<h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><blockquote><p>将一个程序体的<strong>属性</strong>和<strong>方法</strong>提取出来就形成了<strong>类</strong></p><p> 类是抽象的，代表一类事物，比如人类，猫类，即类是<strong>数据类型</strong></p><p>对象：是一个<strong>具体的实类</strong>，比如人，大熊猫都是哺乳动物，而  人(对象) 是哺乳动物(类) 的 一个例子</p></blockquote><h3 id="底层-198"><a href="#底层-198" class="headerlink" title="底层(198)"></a>底层(198)</h3><p><img src="C:\Users\hhh\Desktop\68f2992c89dc60f3214d64fa95ab971.jpg" alt="68f2992c89dc60f3214d64fa95ab971"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">person p = new person();</span><br><span class="line">p.name = &quot;jack&quot;;</span><br><span class="line">p.age = 10;</span><br><span class="line">person p2 = p1;</span><br><span class="line">p2. age = ?       //result=10</span><br><span class="line"></span><br><span class="line">p2 = null ;      </span><br><span class="line">p2.age =  ?    //报错，空指针异常</span><br><span class="line"></span><br><span class="line">1.先加载 person类信息（属性和方法，只会加载一次）</span><br><span class="line">2.在堆中创建开辟一个空间m地址是L，进行默认赋值 age=0，name=null</span><br><span class="line">3.将地址L赋给p</span><br><span class="line">4.进行指定初始化 ， 空间m中的age = 10 ，并在方法区的常量池中开辟一个空间h地址n，用于存放name </span><br><span class="line"> 而位于堆内的空间m中的name指向地址n</span><br><span class="line"> 5.新建一个对象p2指向堆中的地址L</span><br><span class="line"> 6.栈中的对象p2调用堆中的空间m的地址L内的age变量 得p2.age = 10</span><br><span class="line"> 7. 对象p2指向空地址，和p没有影响</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>引用类型就<strong>相当于一个指针</strong>，不直接存储数值，而是给一个地址，去查询。</li><li>字符串属于<strong>引用类型</strong>，会将数据放在 <strong>方法区中的常量池</strong>中，<strong>地址放在堆中</strong>。</li><li>基本数据类型会在<strong>堆</strong>中直接存储</li><li>即使又创建一个对象，类信息也只会加载一次</li></ol><h3 id="创建对象及使用"><a href="#创建对象及使用" class="headerlink" title="创建对象及使用"></a>创建对象及使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.先声明再创建</span><br><span class="line">Cat cat;</span><br><span class="line">cat =new Cat ( );</span><br><span class="line"></span><br><span class="line">2.直接创建</span><br><span class="line">Cat cat = new Cat( );</span><br></pre></td></tr></table></figure><h3 id="属性-成员变量"><a href="#属性-成员变量" class="headerlink" title="属性(成员变量)"></a>属性(成员变量)</h3><blockquote><p>概念的叫法： 成员变量 = 属性 = field</p><p>属性是类的组成部分，一般是基本数据类型，也可以是引用类型（对象，数组）</p><p>属性可以不赋值，有默认值，规则和数组一样。</p><p>属性的默认值（int 0 ，short 0，byte 0，long 0 ，float 0.0，double 0.0，char \u0000，boolean false ，String null ）</p></blockquote><h4 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符   属性类型  属性名;</span><br><span class="line"></span><br><span class="line">比如:    int age;  int arr [][];</span><br><span class="line"></span><br><span class="line"> 注： 访问修饰符 是用来控制变量**访问的范围**，有四种分别是   公开public，保护protected ，默认，私有private </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h4 id="访问属性名"><a href="#访问属性名" class="headerlink" title="访问属性名"></a>访问属性名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象名.属性名;</span><br><span class="line">cat.name;</span><br><span class="line">cat.age;</span><br></pre></td></tr></table></figure><h3 id="方法-成员方法）"><a href="#方法-成员方法）" class="headerlink" title="方法(成员方法）"></a>方法(成员方法）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式</span><br><span class="line"></span><br><span class="line">权限   有无返回值   成员方法名称（参数，参数......）&#123;</span><br><span class="line">                  结构体              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：类中的方法是用于处理数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line"></span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">//方法使用</span><br><span class="line">  person  p1 =new person(); // 创建一个对象p1</span><br><span class="line">  p1.speak();  //对象p1调用方法speak（）</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class person &#123;     //创建一个类person</span><br><span class="line"></span><br><span class="line">//属性</span><br><span class="line">String  name;</span><br><span class="line">int age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//方法体</span><br><span class="line"> public   void   speak () &#123; </span><br><span class="line"> System.out.println(&quot;you are good  girl&quot;);</span><br><span class="line"> &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建一只对象cat1 蓝猫</span><br><span class="line">Cat    cat1   = new Cat ();  // 对象cat1 指向Cat的空间</span><br><span class="line">cat1.name = &quot;小蓝&quot;;</span><br><span class="line">cat1.age = 3;</span><br><span class="line">cat1.color = &quot;蓝灰色&quot;;</span><br><span class="line"></span><br><span class="line">//创建一只对象cat2 大花猫</span><br><span class="line">Cat  cat2  = new Cat ();</span><br><span class="line">cat2.name = &quot;花花&quot;;</span><br><span class="line">cat2.age = 5;</span><br><span class="line">cat2.color = &quot;黄棕色&quot;;</span><br><span class="line"></span><br><span class="line">//调用对象猫的属性和方法</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;蓝猫的名字：&quot;+cat1.name+&quot;  年龄：&quot;+cat1.age+&quot;  颜色：&quot;+cat1.color);</span><br><span class="line">System.out.println(&quot;大花猫的名字：&quot;+cat2.name+&quot;  年龄：&quot;+cat2.age+&quot;  颜色：&quot;+cat2.color);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">//定义一个猫的种类  Cat</span><br><span class="line"></span><br><span class="line">class   Cat &#123;</span><br><span class="line"></span><br><span class="line">     String name; //猫的名字</span><br><span class="line"> int  age;  //猫的年龄</span><br><span class="line"> String color; //猫的颜色</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注"><a href="#注" class="headerlink" title="注"></a>注</h3><ol><li>创建新对象之前，必须创建一次一个新的类。</li><li>若成员方法定义了 返回值，其结构体必须得出现 return 字样</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>块作用域</title>
      <link href="/posts/60e03c6.html"/>
      <url>/posts/60e03c6.html</url>
      
        <content type="html"><![CDATA[<h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><p>在深入学习控制流程之前，先了解块作用域</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>块(即复合语句)是指大括号括起来的若干条java语句；<br>而块确定了变量的作用域，一个块可以嵌套在另一个块中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line"> ........</span><br><span class="line">   &#123;</span><br><span class="line"> <span class="type">int</span> m;</span><br><span class="line"> <span class="type">int</span> n;    不能在嵌套的两个块中声明同名的变量，c++可以嵌套同名变量，但Java不行</span><br><span class="line">.........</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><p><p><p><p></p><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul><li>if (条件) {语句}</li><li>if（条件）{语句}   &nbsp;&nbsp;    else{语句}<ul><li>if（条件）{语句}   &nbsp;&nbsp;    elseif（条件）{语句}</li></ul></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span>  <span class="keyword">new</span>  <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的年龄&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;成年了&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可变参数</title>
      <link href="/posts/6963fb18.html"/>
      <url>/posts/6963fb18.html</url>
      
        <content type="html"><![CDATA[<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>概念: java允许同一个类中<strong>多个同名同功能</strong>,但<strong>参数个数不同</strong>的方法,封装成一个方法</p><p>语法:   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">访问权  返回类型   方法名(数据类型... 形式变量)&#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">//int... 表示接受的是可变参数,类型是int,可以接收0-n个参数</span><br><span class="line"> eg:  public  int sum(int... n)&#123;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public  class text&#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     T t = new T();</span><br><span class="line">  </span><br><span class="line">System.out.println(  &quot;参数的个数是&quot;+ t.calc(1,4,7,9) +&quot;  &quot;+&quot;参数的和是&quot;+t.sum(1,4,7,9) );</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> class T&#123;</span><br><span class="line"> </span><br><span class="line"> //查看传入的参数的个数</span><br><span class="line"> public  int  calc(int... n)&#123;    </span><br><span class="line">         return  n.length;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> //使用可变参数实现无限累计加</span><br><span class="line"> public int sum(int...n)&#123;</span><br><span class="line"> int res = 0;</span><br><span class="line"> for(int i = 0; i &lt; n.length; i++)&#123;</span><br><span class="line"> res += n[i]; </span><br><span class="line"> &#125;</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口</title>
      <link href="/posts/5951da65.html"/>
      <url>/posts/5951da65.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-接口概念"><a href="#一-接口概念" class="headerlink" title="一.接口概念"></a>一.接口概念</h2><p>1.什么是接口(API)</p><blockquote><p>接口:<font color='cornflowerblue'>接口是为了提供一种服务</font><br>所有的接口统称为API,接口分为<strong>内部接口</strong>和<strong>外部接口</strong></p><p>外部接口:测试被测系统和外部系统之间的接口</p><p>测试内部接口:<br>1.内部接口提供内部系统使用:开发人员自己开发的对自身系统提供的接口)<br>2.内部接口提供外部系统使用:正例,各种异常场景,权限控制(只需要测试正例即可),开发系统调用外部的其他的接口</p></blockquote><p>2.软件为什么需要接口</p><blockquote><p>接口可以<font color='cornflowerblue'>使外部来修改内部的数据</font></p></blockquote><p>3.怎么做接口测试</p><blockquote><p>一般项目的前后端进度不同,则需要提前将开发出的接口进行测试<br>基于安全考虑,前端的验证很容易绕过,直接请求接口,特别是:身份证信息,银行卡,金钱交易<br>接口的本质:<strong>就是测试接口是否能正常的交互,权限控制及异常场景</strong></p></blockquote><h2 id="二-接口测试的流程"><a href="#二-接口测试的流程" class="headerlink" title="二.接口测试的流程"></a>二.接口测试的流程</h2><ol><li><p>从开发那拿到Api接口(期望不要太大)/用Friider去抓包接口,熟悉接口业务,鉴权码</p></li><li><p>接口计划和方案</p><p>思路:</p><p>​    a.正例:输入正常的入参,查看接口是否返回成功</p><p>​    b.反例</p><p>​                I.鉴权返例: 鉴权为空,鉴权码错误,鉴权码已过期..</p><p>​                II.参数反例: 参数为空,参数类型异常,参数长度异常</p><p>​                III.其他场景:错误码的覆盖,分页异常,接口调用次数限制</p><p>​            </p><p>3.使用接口测试工具postman编写用例和评审</p><p>4.使用postman+Newman+jenkins实现持续集成,并且输出测试报告并且发送邮件  </p></li></ol><h2 id="三-接口协议"><a href="#三-接口协议" class="headerlink" title="三.接口协议"></a>三.接口协议</h2><p> 1.webservice协议</p><blockquote><p>接口地址:<code>http:// ....... ?wsdl</code><br>restful规则:get获取数据,post提交数据,put修改数据,delect删除数据<br>以前对数据的增删改查都是由四个地址进行操作.<br><code>http://192.168.25.2:8080/adduser</code><br><code>http://192.168.25.2:8080/delectuser</code><br><code>http://192.168.25.2:8080/putuser</code><br><code>http://192.168.25.2:8080/postuser</code><br>而现在只用一个网址<code>http://192.168.25.2:8080/user</code>使用get,post,put,delect请求来进行增删改查</p></blockquote><p> 2.dubbo协议</p><blockquote><p>接口地址<code>dubbo://</code><br>适用于少量数据的传输,大并发</p></blockquote><p> 3.http协议</p><p>超文本传输协议(HTTP):一种无状态的,以请求/应答方式运行的协议,它使用可拓展的语义和自描述消息格式.</p><p><code>http协议</code>: 接口地址<code>http://  80</code>,端口是80,<code>https=http+ssl</code>安全传输协议,端口是443</p><p>响应:1XX响应的信息,2XX响应成功,3XX重定向,4XX客户端错误(不传值跳转网页),5XX服务器错误</p><h2 id="须知"><a href="#须知" class="headerlink" title="须知"></a>须知</h2><h3 id="1丶-接口返回的数据格式"><a href="#1丶-接口返回的数据格式" class="headerlink" title="1丶 接口返回的数据格式"></a>1丶 接口返回的数据格式</h3><ol><li>json格式(主流)</li></ol><blockquote><p><strong>Json是一种轻量级的数据交换格式。</strong>它基于JAVAScript的一个子集,采用完全独立于编程语言的文本格式来<strong>存储和表示数据。</strong> 在js语言中，一切都是对象，因此任何支持的类型都可以通过json来表示</p><p>json由<strong>两种特殊类型(数组,对象)</strong>和<strong>四种基本类型(string.int,boolean、NULL值)</strong>构成v</p><p><strong>数组</strong>它也可以像对象那样使用键值对，但还是索引使用得多。值的类型可以是任意类型。举例：{“firstName”: “Brett”, “lastName”: “McLaughlin”}。</p><p><strong>对象</strong>键名可以使用整数和字符串来表示。值的类型可以是任意类型。举例：people:[{“firstName”: “Brett”,”lastName”:”McLaughlin”},{“firstName”:”Jason”,”lastName”:”Hunter”}]</p></blockquote><p>优点</p><blockquote><ul><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率</li></ul></blockquote><p>b. json由两种数据结构组成(可以相互嵌套),MAP对象,键值对,{key:value,key:value}和 数组:[value1,value2,value3]<br>c. 在线校验json结构的网站 <code>http://www.bejson.com</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式:   &#123;error_code:0,msg:&quot;提现成功&quot;,data:[]&#125;</span><br><span class="line"></span><br><span class="line">error_code(自定义名字):错误码,0代表成功</span><br><span class="line">msg:对错误码的中文说明</span><br><span class="line">data:真正返回的数据</span><br></pre></td></tr></table></figure><p> 2.html格式</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;error_code&gt;0&lt;/error_code&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>3.xml格式</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml?version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;error_code&gt;0&lt;/error_code&gt;</span><br><span class="line">...........</span><br><span class="line">&lt;/xml&gt;</span><br></pre></td></tr></table></figure><h3 id="2丶-头字段"><a href="#2丶-头字段" class="headerlink" title="2丶 头字段"></a>2丶 头字段</h3><font color='orange'>HTTP头字段</font>是`key-value`的形式,key和value之间用":"分隔,最后用`crlf`换行表示字段结束.前后端分离则将传输数据类型为` Content-type: application/json`,这里的key就是`Content-kype`.value值就是`application/json`<font color='orange'>头字段规则 </font><ul><li>字段名不区分大小写,字段名里不允许出现空格,可以使用连字符<code>-</code>,但不能使用下划线<code>_</code>(有的浏览器不能解析下划线)</li><li>字段名后面紧跟<code>:</code>字段原则上不能重复.除非<code>set-cookie</code></li></ul><font color='orange'>常用头字段</font><p>http协议中有很多头字段</p><p>请求字段:请求头中的头字段,如<code>Host,Referer</code></p><p>响应字段:响应头中的头字段,如<code>server,Date</code></p><p>通用字段:在请求头和响应头都可以出现,如<code>Content-type,connection</code></p><h3 id="3丶请求报文"><a href="#3丶请求报文" class="headerlink" title="3丶请求报文"></a>3丶请求报文</h3><p>HTTP协议的请求报文由四大部分组成</p><ul><li><p>请求行:描述请求或响应的基本信息<code>GET /index.html HTTP/1.1</code> <code>HTTP/1.1 200 ok</code></p></li><li><p>请求头:使用Key-value形式更详细的说明报文<code>Connection: keep-alive</code></p></li><li><p>空格</p></li><li><p>消息正文:实际传输的数据,它不一定是纯文本,可以是图片,视频,二进制数据</p><p><code>&lt;html&gt;语句&lt;/html&gt;</code></p></li></ul><p>  <font color='orange'>请求头报文格式</font>:   <code>method 空格 url version 换行</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method(请求方法):如`get/head/put/post`,表示对资源的操作</span><br><span class="line">URL(请求目标):通常是一个URl,标记了请求方法要操作的资源</span><br><span class="line">version(版本号):表示报文使用的HTTP协议版本</span><br></pre></td></tr></table></figure><h3 id="4丶响应报文"><a href="#4丶响应报文" class="headerlink" title="4丶响应报文"></a>4丶响应报文</h3><p>HTTP协议的响应报文由四大部分组成</p><ul><li><p>响应行:描述请求或响应的基本信息<code>GET /index.html HTTP/1.1</code> <code>HTTP/1.1 200 ok</code></p></li><li><p>响应头:使用Key-value形式更详细的说明报文<code>Connection: keep-alive</code></p></li><li><p>空格</p></li><li><p>消息正文:实际传输的数据,它不一定是纯文本,可以是图片,视频,二进制数据</p><p><code>&lt;html&gt;语句&lt;/html&gt;</code></p></li></ul><p>  <font color='orange'>响应行报文格式</font>:　<code>version 空格 statuscode 空格 reason 换行</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">version(版本号):表示报文使用的HTTP协议</span><br><span class="line">statuscode(版本状态码):三位数字,表示处理的结果</span><br></pre></td></tr></table></figure><h3 id="5丶HTTP的-Post编码格式"><a href="#5丶HTTP的-Post编码格式" class="headerlink" title="5丶HTTP的 Post编码格式"></a>5丶HTTP的 Post编码格式</h3><blockquote><p>HTTP是以ASCll码来传输的,建立在TCP/IP协议上,HTTP请求/响应包括<strong>请求行,请求头,空格,消息正文</strong></p><p><code>application/x-www-form-urlencoded; charset=UTF-8</code>而请求头的Content-Type属性告诉服务器,浏览器发送的消息正文是通过什么方式进行编码的,服务器就会得知用什么方式进行解析,而POST方法有四种编码格式</p></blockquote><ol><li>application/x-www-form-urlencoded </li></ol><p>post请求的编码格式若不指定,就是这个,只能传key=value值</p><ol><li>multipart/form-data </li></ol><p>（键值对型数据）:通常是用在客户端向服务端传送大文件数据，如：图片或者文件。也可以传key=value</p><ol><li>application/json </li></ol><p>(Json 类型数据):用的超级多，也非常的方便。</p><ol><li>text/xml </li></ol><p>（xml）</p><h3 id="6丶注意"><a href="#6丶注意" class="headerlink" title="6丶注意"></a>6丶注意</h3><ol><li>JSON 格式支持比键值对复杂得多的结构化数据，而且还支持其他数据但是如果在这种格式下用到key—value形式，接收方就接收不到value,因为<strong>消息正文没有application/json形式的处理</strong>来源于<code>https://blog.csdn.net/do_finsh/article/details/72886000</code></li></ol><h3 id="7丶Tcp-IP-协议"><a href="#7丶Tcp-IP-协议" class="headerlink" title="7丶Tcp/IP   协议"></a>7丶Tcp/IP   协议</h3><p>一个HTTP请求流程</p><blockquote><p>输入网址回车后,浏览器会将域名解析出来,浏览器会去查看你的浏览器是否有该域名对应的DNS缓存,有的话,可以拿到服务端的地址,没有的话,会去看你本地的host文件是否配置,没有配置则发起DNS请求来获取你对应的服务器iP地址</p><p>应用层会构造一个DNS请求报文,应用层会调用传输层的一个接口,调用UDP进行传输<br>网络层会将UDP请求报文添加一个IP的请求头,网络层会将其数据交给链路层</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f81e4e4e3d6b41a98c9961a1050c6887.png" alt="请添加图片描述"></p><blockquote><p>应用层:DNS,HTTP,SSH,SMTP,FTP<br>传输控制层:Tcp协议,UDP协议<br>网络层:ipv4,ipv6,arp,icmp<br>数据链路层:以太网,无线LAN<br>物理层:光纤,双绞线电缆.无线设备<br>TCP协议 是面向<strong>连接的</strong> <strong>可靠的</strong>传输控制协议,TCP的三次握手和四次挥手</p></blockquote><h3 id="8-接口报文模版"><a href="#8-接口报文模版" class="headerlink" title="8,接口报文模版"></a>8,接口报文模版</h3><p>  将该接口链接的文档下载下来</p><p>  <img src="https://img-blog.csdnimg.cn/c811a0cf7bff4ba0a2daff3dc89385f9.png" alt="请添加图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">请求部分</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//请求行</span><br><span class="line">POST https://event.csdn.net/logstores/csdn-pc-tracking-page-exposure/track HTTP/1.1</span><br><span class="line">// 请求方式是post,请求地址是https://event.csdn.net/logstores/csdn-pc-tracking-page-exposure/track,协议HTTP/1.1</span><br><span class="line"></span><br><span class="line">//请求头</span><br><span class="line">*Host: event.csdn.net//请求的主机地址</span><br><span class="line">*Connection: keep-alive(保持活跃) //连接方式</span><br><span class="line">*User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 //客户端的用户类型</span><br><span class="line">*Accept: */* //客户端接到的数据格式</span><br><span class="line">*Content-Type: text/plain;charset=UTF-8// 请求内容的格式</span><br><span class="line">*cookie:  eyJfX3NvdXJjZV9fIjoiY3NkbiIsIl9fbG9nc19fIjpbeyJjaWQiOiIxMF8zNTUwNjExOTU2MC0xNjAyMjA2ODMyNjMwLTQyMDgyMiIsInNpZCI6IjEwXzE2NTQ5MzcwMjQ2OTIuNDEyNDY3IiwicGlkIjoicGFzc3BvcnQiLCJ1aWQiOiIiLCJkaWQiOiIxMF8zNTUwNjExOTU2MC0xNjAyMjA2ODMyNjMwLTQyMDgyMiIsImRjX3NpZCI6ImE1NDRmMzYxYmVkZmVlOGNkZWQ1MzIzY2U0NGQ1YzdkIiwicmVmIjoiaHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3oyNzY4NTU3NzkyP3R5cGU9YmxvZyIsImN1cmwiOiJodHRwczovL3Bhc3Nwb3J0LmNzZG4ubmV0L2xvZ2luP2NvZGU9YXBwbGV0cyIsImRlc3QiOiIiLCJ1dG0iOiIiLCJzcG0iOiIxMDMxLjIzNTIuMzAwMS43NzY1IiwidCI6IjE2NTQ5MzczOTciLCJlbGVUb3AiOiIiLCJjQ29va2llIjoiY19kbF91bT0tO2NfZGxfcHJpZD0xNjU0ODI2NDgwMzUxXzk3OTYxNDtjX2RsX3JpZD0xNjU0ODI3NDIxMTE1XzkwMzUwODtjX2RsX2ZyZWY9aHR0cHM6Ly9iYnMuY3Nkbi5uZXQvdG9waWNzLzYwNjg3ODg0ODtjX2RsX2ZwYWdlPS9kb3dubG9hZC9zaW5hdF80MDU3Mjg3NS84NTU5NTA3MjtjX2ZpcnN0X3JlZj1kZWZhdWx0O2NfZmlyc3RfcGFnZT1odHRwcyUzQS8vd3d3LmNzZG4ubmV0LztjX3NlZ21lbnQ9NjtjX3NpZD1hNTQ0ZjM2MWJlZGZlZThjZGVkNTMyM2NlNDRkNWM3ZDtjX3Nlc3Npb25faWQ9MTBfMTY1NDkzNzAyNDY5Mi40MTI0Njc7Y19kc2lkPTExXzE2NTQ5MzcwMjUwMTYuMDg1NzEzO2NfcGFnZV9pZD1kZWZhdWx0O2NfcHJlZj1odHRwcyUzQS8vYmxvZy5jc2RuLm5ldC9tMnNmZmcyJTNGdHlwZSUzMiUzRnNwbSUzRDEwMDAuMjExNS4zMDAxLjUzNDM7Y19yZWY9aHR0cHMlM0EvL2Jsb2cuY3Nkbi5uZXQvbjM0NWRzZmZnMiUzRnR5cGUlM0RibG9nO2NfdG9zPXJkYjF2ODsiLCJfX3RpbWVfXyI6MTY1NDkzNzM5N31dLCJfX3RhZ3NfXyI6eyJ1c2VyYWdlbnQiOiJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTAyLjAuNTAwNS42MyBTYWZhcmkvNTM3LjM2IiwicGxhdGZvcm0iOiJQQyIsImxvZ19pZCI6IjUyMTUifX0=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Referer: https://passport.csdn.net/login?code=applets //请求来源的地址</span><br><span class="line">Content-Length: 1116 (发送给服务器内容的长度)</span><br><span class="line">sec-ch-ua: &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;102&quot;, &quot;Google Chrome&quot;;v=&quot;102&quot;</span><br><span class="line">x-log-apiversion: 0.6.0</span><br><span class="line">sec-ch-ua-mobile: ?0`</span><br><span class="line">user-Agent:   //客户端的用户类型</span><br><span class="line">Safari/537.36</span><br><span class="line">x-log-bodyrawsize: 1234</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Origin: https://passport.csdn.net</span><br><span class="line">Sec-Fetch-Site: same-site</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line"></span><br><span class="line">Accept-Encoding: gzip, deflate, br(可接受的压缩方式)</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//空格部分</span><br><span class="line"></span><br><span class="line">//消息正文</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">响应部分</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//响应行</span><br><span class="line">HTTP/1.1 200 OK//协议 响应码 响应信息</span><br><span class="line"></span><br><span class="line">//响应头</span><br><span class="line">Server: Tengine //服务器的名称</span><br><span class="line">Content-Type: application/octet-stream//响应内容的类型</span><br><span class="line">Content-Length: 0</span><br><span class="line">Connection: keep-alive(保持活跃)</span><br><span class="line">Set-Cookie:Hm_lvt_866c9be12d4a814454792b1fd0fed295=1654732414,1654827627,1654910665,1655001979; Hm_lpvt_866c9be12d4a814454792b1fd0fed295=165502304(响应的cookie)</span><br><span class="line"></span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Expose-Headers: *</span><br><span class="line">Date: Sat, 11 Jun 2022 08:49:57 GMT//响应的时间</span><br><span class="line">x-log-time: 1654937397</span><br><span class="line">x-log-requestid: 62A45735C290A28A675D2C95</span><br><span class="line">Via: cache14.l2cm9-7[24,0], kunlun8.cn1497[53,0]</span><br><span class="line">Timing-Allow-Origin: *</span><br><span class="line">EagleId: 701ea2a616549373977903829e</span><br><span class="line"></span><br><span class="line">//空格</span><br><span class="line"></span><br><span class="line">//消息正文</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五-postman工具"><a href="#五-postman工具" class="headerlink" title="五.postman工具"></a>五.postman工具</h2><blockquote><p>构建请求</p><ol><li>请求方式</li><li>url方式</li><li>请求头的确认</li><li>传参格式</li><li>发送请求</li></ol></blockquote><h3 id="1-功能栏"><a href="#1-功能栏" class="headerlink" title="1.功能栏"></a>1.功能栏</h3><p><img src="C:\Users\hhh\Desktop\postman主界面功能图.png" alt="postman主界面功能图"></p><p>请求标题栏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. params:</span><br><span class="line">请求的参数</span><br><span class="line">2. Authorrization:鉴权方式</span><br><span class="line">3. headers:请求头</span><br><span class="line">4. 请求下的Body:入参格式</span><br><span class="line">   none:没有参数</span><br><span class="line"> form-data:文件/键值对(key- value)</span><br><span class="line"> x-www-form-urlencoded:键值对    </span><br><span class="line">     raw:Json格式(Text,javascript,json,html.xxml)</span><br><span class="line">    binary:传二进制文件</span><br><span class="line"></span><br><span class="line"> 5. pre-request-script:请求之前的脚本</span><br><span class="line"> 6. tests:请求之后断言的代码</span><br><span class="line"> 7. setting:设置 </span><br><span class="line"> 8. cookies:postman管理cookie信息</span><br></pre></td></tr></table></figure><p>响应标题栏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. Body:接口返回的数据</span><br><span class="line"></span><br><span class="line">   pretty:以json,html,xml..不同的格式查看返回的数据</span><br><span class="line">      Raw:以文本格式方式查看返回的数据</span><br><span class="line">     preview:以网页的方式查看返回的数据</span><br><span class="line"></span><br><span class="line"> 2. cookie:响应的cookie信息</span><br><span class="line"> 3. headers:响应头 </span><br><span class="line"> 4. TestResults:断言结果 </span><br><span class="line"> 5. status:状态码 </span><br><span class="line"> 6. time:响应的时间</span><br><span class="line"> 7. szie:响应内容大小</span><br></pre></td></tr></table></figure><h3 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">多种环境:开发环境,测试环境,生成环境</span><br><span class="line">接口关联:需要手动关联</span><br><span class="line">参数需要手动修改</span><br></pre></td></tr></table></figure><h3 id="3-postman环境-全局变量"><a href="#3-postman环境-全局变量" class="headerlink" title="3.postman环境/全局变量"></a>3.postman环境/全局变量</h3><p><img src="C:\Users\hhh\Desktop\postman环境变量图.png" alt="postman环境变量图"></p><p>1.概念</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求地址:<span class="attr">https</span>:<span class="comment">//&#123;&#123;ip&#125;&#125;/cgi-bin/token?grant_type=client_credential&amp;appid=wx6b11b3efd1cdc290&amp;secret=106a9c6157c4db5f6029918738f9529d</span></span><br><span class="line"></span><br><span class="line">此时的ip是环境变量,已经在envirronments中设过了</span><br><span class="line">而在请求地址上引用 环境变量 要用&#123;&#123;变量&#125;&#125;包起来</span><br></pre></td></tr></table></figure><blockquote><ol><li>环境变量:环境变量就是全局变量</li><li>全局变量:全局变量是能够在任何接口都可以访问的变量</li></ol></blockquote><h3 id="4-postman内置动态函数"><a href="#4-postman内置动态函数" class="headerlink" title="4.postman内置动态函数"></a>4.postman内置动态函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">postman内置动态函数,在功能pre-request Script下设置</span><br><span class="line"></span><br><span class="line">&#123;&#123;$timestamp&#125;&#125;生成当前时间的时间戳</span><br><span class="line">&#123;&#123;$randomint&#125;&#125;生成0-100之间的随机数</span><br><span class="line">&#123;&#123;$guid&#125;&#125;生成速记GUID字符串</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">自定义动态参数</span><br><span class="line">设置全局变量,在通过body引用变量传参</span><br><span class="line"></span><br><span class="line">//手动获取时间戳</span><br><span class="line">var times = Date.now();</span><br><span class="line">//设置为全局变量</span><br><span class="line">pm.globals.set(&quot;times&quot;, times);</span><br><span class="line"></span><br><span class="line">使用时,&#123;&#123;times&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="5-解决接口关联问题"><a href="#5-解决接口关联问题" class="headerlink" title="5.解决接口关联问题"></a>5.解决接口关联问题</h3><h4 id="1-使用json提取器"><a href="#1-使用json提取器" class="headerlink" title="1.使用json提取器"></a>1.使用json提取器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">若下一个接口需要上一个传参,在<span class="title class_">Tests</span>断言选项输入以下代码</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用json提取器提取access_token值</span></span><br><span class="line"><span class="comment">//打印返回报文</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(responseBody);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为JSON.parse()方法可以将字符串内容转换成对象形式,这样变量result就可以使用result.属性的方法了</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseBody)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">access_token</span>);<span class="comment">//打印var的access_token属性</span></span><br><span class="line"></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;access_token&quot;</span>, result.<span class="property">access_token</span>);<span class="comment">//把access_token设置全局变量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-使用正则表达式提取器"><a href="#2-使用正则表达式提取器" class="headerlink" title="2.使用正则表达式提取器"></a>2.使用正则表达式提取器</h4><p><img src="C:\Users\hhh\Desktop\正则表达式定全局变量.png" alt="正则表达式定全局变量"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用正则表达式提取器实现接口关联,<span class="title function_">match</span>()方法用于匹配内容</span><br><span class="line">在<span class="title class_">Tests</span>断言选项输入以下代码</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回报文主体 内容进行匹配字段是access_token, &quot; .*? &quot; 代替键值内容</span></span><br><span class="line"><span class="keyword">var</span> result = responseBody.<span class="title function_">match</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;&quot;access_token&quot;:&quot;(.*?)&quot;&#x27;</span>));<span class="comment">//new RegExp(),新建一个正则表达式</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//发现打印的内容有点杂</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>]);<span class="comment">//过滤后,发现打印的内容就是access_token值</span></span><br><span class="line"></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;access_token&quot;</span>, result[<span class="number">1</span>]);<span class="comment">//再把access_token设置全局变量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-postman的断言"><a href="#6-postman的断言" class="headerlink" title="6.postman的断言"></a>6.postman的断言</h3><blockquote><p><strong>断言(Tests功能)可以判断出接口是否返回成功</strong></p></blockquote><h4 id="1-功能栏-1"><a href="#1-功能栏-1" class="headerlink" title="1.功能栏"></a>1.功能栏</h4><blockquote><ol><li>Get an environment variable 获得一个环境变量</li><li>Get a golbal variable 获得一个全局变量</li><li>get a variable 获得一个变量</li><li>get a collection variable 获得一个集合变量</li><li><p>set设置 , clear删除</p></li><li><p>sent a request 发送一个请求</p></li><li><p><strong>status code : Code is 200  检查返回的状态码是否是200</strong></p></li><li><p><strong>response body: Contains string 检查响应中包含指定字符串</strong></p></li><li><strong>response body: JSON value check 检查响应中包含json的值</strong></li><li><strong>response body: is equal to a string 检查响应中等于一个字符串</strong> ,一般用于判断返回值少的字符串</li><li><strong>response header : Content- type header check 检查是否包含某个响应头</strong>,一般就查看有没有content_type</li><li><strong>response time is less than 200ms 检查请求耗时小于200ms</strong></li><li>status code : Successful Post request</li><li>status code : code name has string</li><li>response body: convert xml body to a Json 将XML的返回值转换成一个json对象</li></ol></blockquote><h4 id="2-断言的流程及注意"><a href="#2-断言的流程及注意" class="headerlink" title="2.断言的流程及注意"></a>2.断言的流程及注意</h4><blockquote><p>断言分为 <strong>状态断言 </strong>和 <strong>业务断言</strong></p><p>每一个接口测试时,都需要查看<strong>状态码和核心关键字</strong>,在<strong>功能Tests下</strong>输入相应代码块<br>可以通过<strong>Test Results功能</strong>查看</p></blockquote><p><img src="C:\Users\hhh\Desktop\断言功能.png" alt="断言功能"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//状态码(一个)</span><br><span class="line">pm.test(&quot;检查返回值状态码为200&quot;, function () &#123;</span><br><span class="line">    pm.response.to.have.status(200);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//核心关键字(一般多个)</span><br><span class="line">pm.test(&quot;检查响应中是否包含access_token&quot;, function () &#123;</span><br><span class="line">    pm.expect(pm.response.text()).to.include(&quot;access_token&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">pm.test(&quot;检查响应中是否包含日程&quot;, function () &#123;</span><br><span class="line"></span><br><span class="line">    //若是动态参数断言,只能是自定义的能断言</span><br><span class="line">    1.pm.expect(pm.response.text()).to.include(&quot;date&quot; +pm.globals.get(&quot;times&quot;));</span><br><span class="line">   2. pm.expect(pm.response.text()).to.include(&quot;date&quot; +globals[&quot;times&quot;]);</span><br><span class="line">   3. 2. pm.expect(pm.response.text()).to.include(&quot;date&quot; +globals.times);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>: 若是动态参数断言,只能是自定义的能断言</p><p>在断言中获取自定义动态参数(全局变量)的方式:<br>            <strong>pm.globals.get(“times”)</strong><br>            <strong>globals[“times”]</strong><br>            <strong>globals.times</strong></p><h4 id="3-设置全局断言"><a href="#3-设置全局断言" class="headerlink" title="3.设置全局断言"></a>3.设置全局断言</h4><blockquote><p>因为每个接口都需要状态码断言,可以设置一个全局的,这样每个接口断言就不要写状态码断言了[在Edit选项设置全局Tests]</p></blockquote><p><img src="C:\Users\hhh\Desktop\全局断言设置.png" alt="全局断言设置"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tests下输入</span><br><span class="line">pm.test(&quot;判断状态码是不是200&quot;, function () &#123;</span><br><span class="line">    pm.response.to.have.status(200);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="7-执行开始"><a href="#7-执行开始" class="headerlink" title="7.执行开始"></a>7.执行开始</h3><h4 id="1-运行所有接口-查看信息"><a href="#1-运行所有接口-查看信息" class="headerlink" title="1.运行所有接口,查看信息"></a>1.运行所有接口,查看信息</h4><p><img src="C:\Users\hhh\Desktop\运行集合接口功能图.png" alt="运行集合接口功能图"></p><h4 id="2-自动判断接口的参数结果"><a href="#2-自动判断接口的参数结果" class="headerlink" title="2. 自动判断接口的参数结果"></a>2. 自动判断接口的参数结果</h4><blockquote><p>除了使用csv文件来判断,还有json文件也可以判断,不过两者过程一样,只是文件类型不同<br>而这里只介绍csv文件上传的过程</p></blockquote><p>a.第一步建立个csv文件,里面写入正例和反例及结果码的所有可能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grant_type,appid,secret,assert_value</span><br><span class="line">client_credential,wx6b11b3efd1cdc290,106a9c6157c4db5f6029918738f9529d,access_token</span><br><span class="line">,wx6b11b3efd1cdc290,106a9c6157c4db5f6029918738f9529d,40002</span><br><span class="line">client_credential,,106a9c6157c4db5f6029918738f9529d,41002</span><br><span class="line">client_credential,wx6b11b3efd1cdc290,,41004</span><br></pre></td></tr></table></figure><p>b.第二步将请求的参数值都改称为其变量 </p><p><img src="C:\Users\hhh\Desktop\更改变量值.png" alt="更改变量值"></p><p>c.第三步 更该断言功能Tests里面的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">原断言代码</span><br><span class="line"></span><br><span class="line">//因为JSON.parse()方法可以将字符串内容转换成对象形式,这样变量result就可以使用result.属性的方法</span><br><span class="line">var result = JSON.parse(responseBody)</span><br><span class="line">console.log(result.access_token);//打印var的access_token属性</span><br><span class="line">pm.globals.set(&quot;access_token&quot;, result.access_token);//把access_token设置全局变量</span><br><span class="line"></span><br><span class="line">pm.test(&quot;检查响应是否包含access_token值&quot;, function () &#123;</span><br><span class="line">    pm.expect(pm.response.text()).to.include(&quot;access_token&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">更改后:</span><br><span class="line"></span><br><span class="line">//判断当返回结果中包含有access_token时,才通过json提取access_token值</span><br><span class="line">if(responseBody.search(&quot;access_toke&quot;!=-1))&#123; //search()查找是否包含某字段方法</span><br><span class="line"></span><br><span class="line">//因为JSON.parse()方法可以将字符串内容转换成对象形式,这样变量result就可以使用result.属性的方法</span><br><span class="line">var result = JSON.parse(responseBody)</span><br><span class="line">console.log(result.access_token);//打印var的access_token属性</span><br><span class="line">pm.globals.set(&quot;access_token&quot;, result.access_token);//把access_token设置全局变量</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pm.test(&quot;检查响应是否包含access_token值&quot;, function () &#123;</span><br><span class="line">    pm.expect(pm.response.text()).to.include(data.assert_value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>d.第四步点击<code>run collection</code>将<code>data.csv</code>上传至data功能处</p><p>点击<code>preview</code>查看数据演示</p><p>f.清空全选,选中单个接口运行</p><p><img src="C:\Users\hhh\Desktop\判断结果.png" alt="date文件上传"></p><h3 id="六-fiddler工具"><a href="#六-fiddler工具" class="headerlink" title="六.fiddler工具"></a>六.fiddler工具</h3><p>1.获取请求链接所有的请求头 ,在postman上点击功能键BulkEdit,输入这些请求头</p><p><img src="C:\Users\hhh\Desktop\复制所有的请求头.png" alt="复制所有的请求头"></p><p><img src="C:\Users\hhh\Desktop\请求头.png" alt="请求头"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=helloworld&amp;fenlei=256&amp;rsv_pq=9d1e79b700011649&amp;rsv_t=7eb2SCx1PugFhQCxdR5%2FU%2BH9IL3fZIiTrcIKxN1E1pLkGfjWL5%2BgIIV2421J&amp;rqlang=en&amp;rsv_dl=tb&amp;rsv_enter=1&amp;rsv_sug3=5&amp;rsv_sug1=4&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;rsv_btype=i&amp;prefixsug=helloworld&amp;rsp=4&amp;inputT=6452&amp;rsv_sug4=8213 HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;102&quot;, &quot;Google Chrome&quot;;v=&quot;102&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: https://cn.bing.com/</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PSTM=1602206858; BIDUPSID=B2609704B49E4BB52A6234BE123C9114; __yjs_duid=1_7214023cf5165172180f7377d29c219e1621776676211; BDSFRCVID_BFESS=3tIOJexroG38rlbemRTmhjJ6QmKK0gOTDYrEOwXPsp3LGJLVgHGfEG0PtOVzGoFbI1odogKKWmOTH7kF_2uxOjjg8UtVJeC6EG0Ptf8g0M5; H_BDCLCKID_SF_BFESS=tJ-HoC0XtDD3H48k-4QEbbQH-UnLqMvAtgOZ04n-ah05b-o1-4oV0l30MM6ZtqoLW20j0h7m3UTKsq76Wh35K5tTQP6rLtb73Kc4KKJxbp74Jl3vQ45zDt4OhUJiBhbLBan7_bvIXKohJh7FM4tW3J0ZyxomtfQxtNRJ0DnjtpChbC_9D6LbejjLeU5eetjK2CntsJOOaCkBbqbOy4oWK441DN7H2Pj-aGrn-bn_WDQGDqvoD-Jc3M04K4o9-hvT-54e2p3FBUQJOh3IQft20b0g3l6x2M5aWR6y0n7jWhvRDq72y5JOQlRX5q79atTMfNTJ-qcH0KQpsIJM5-DWbT8IjHCHqTDDJbKHoCvX-5rVjJnv2tP_-P4DepKJ0URZ56bHWh0bfPoSHR5z0lOIM-IpjRQLBMPj52OnKUT-3Cov8qc25f7WDtD03xJ70-543bRTLp7CMq3osRoVDtnfhP-UynJLWh37JK3lMKoaMp78jR093JO4y4Ldj4oxJpOJ5JbMopCafD_WhCD6ejKaenFyqxc0aPR8a-o2WbCQbUcU8pcN2b5oQTJbKxvaK4rNQNO3BqFKLR6vOIJTXpOUWJDkD4RuBq3tWT-D3t5C5hnnel5jDh3MXpKhQUnl5fFDaKny0hvcQb6cShP6MUjrDRLbXU6BK5vPbNcZ0l8K3l02V-bIe-t2XjQhDGAHJ6-8tJCs3t88KJjEe-Kk-PnVeTt3ytnZKRvHa2keVPosKJ5VVxbzM-6kjl_DyP4jKMRn3N5HKl75yUJ5qKOsQU6d34-nQUj405OTbgOpXq3O3JozhJ7ghPJvyp-DXnO7t-nlXbrtXp7_2J0WStbKy4oTjxL1Db3JKjvMtgDtVJO-KKC5MK0x3q; BAIDUID=07164A9259B71EDAEF5DFF8E9C9EC64B:FG=1; BAIDUID_BFESS=F7D52997C3EB96F965A2395BE54A2EFD:FG=1; COOKIE_SESSION=9431174_0_6_6_20_10_0_1_6_4_0_3_2807994_0_0_0_1634822155_0_1650896722%7C9%230_1_1615950967%7C1; BD_UPN=12314753; ZFY=VvdyyF0oDsneCav3mPLD5ecs4M:AjqQxNgDXxxS0wETY:C; ab_sr=1.0.1_N2QxZWJmOWMzZTA3NmZlN2I4ZGZlZTY3NTAzMzA4NWE1YTBhNmMyYTVjNGM0NTQ3MTViYjZkMDM1NGQ3NGU2MWM5OWQzODlmMmY3NTQ2MDgxZmY1ODIwZGJiOWMxYTNhMzY2NTk2Y2IyMDYxNjY5NDg2MjkwNDMyNjc3MjY3ZTdhYzY3NWU0MTBkZTlhMWEyOTE1MjJmYWUyY2I0MDJkMw==; RT=&quot;z=1&amp;dm=baidu.com&amp;si=aymt3kf34vh&amp;ss=l4qsj55r&amp;sl=5&amp;tt=9jt&amp;bcn=https%3A%2F%2Ffclog.baidu.com%2Flog%2Fweirwood%3Ftype%3Dperf&amp;ul=ln6&amp;hd=lqc&quot;; BD_HOME=1; H_PS_PSSID=36560_36625_36673_36455_31660_34813_36167_36569_36073_36267_26350_36469_22157; BA_HECTOR=008h8404a42h8l20ag1hb8fgj15; delPer=0; BD_CK_SAM=1; PSINO=3; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; channel=bing; H_PS_645EC=0255z1rq4m2iDrQCswLBaT8yeE6bJLmzQEBW9fZoXkRV5c11gyJHAY0cNrE; baikeVisitId=4dc53a4c-6f24-42de-be01-82b5b402263d</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>键盘输入调用</title>
      <link href="/posts/73a264ed.html"/>
      <url>/posts/73a264ed.html</url>
      
        <content type="html"><![CDATA[<h3 id="键盘输入调用"><a href="#键盘输入调用" class="headerlink" title="键盘输入调用"></a>键盘输入调用</h3><p>在编程中，需要接收用户输入的数据，就是可以使用键盘输入语句来获取</p><p>input.java 中需要一个扫描器（对象）Scanner</p><p>引入Scanner类步骤：</p><ol><li>导入该类所在的包，Java.util.*</li><li>创建该类对象（声明变量）</li><li>调用里面的功能</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>  java .util.Scanner; <span class="comment">// 表示把java.util 包下的Scanner类导入</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args )</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span>  <span class="variable">myScanner</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Scanner</span> (System.in);<span class="comment">//创建一个对象名为 myScanner</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入名字&quot;</span>) ;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> myScanner.next();<span class="comment">//接收用户输入字符串</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入年龄&quot;</span>) ;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt(); <span class="comment">//接收用户输入的的整型数值</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入薪水&quot;</span>) ;</span><br><span class="line"><span class="type">doubel</span>  <span class="variable">sal</span> <span class="operator">=</span>  myScanner.nextDoubel();<span class="comment">//接收用户输入的双精度类型</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承内存分析</title>
      <link href="/posts/a350daf0.html"/>
      <url>/posts/a350daf0.html</url>
      
        <content type="html"><![CDATA[<h3 id="继承内存分析"><a href="#继承内存分析" class="headerlink" title="继承内存分析"></a>继承内存分析</h3><blockquote><p>1.创建对象之前,先加载方法区中object类,GrandPa类,Father类,Son类的属性和方法</p><p>2.在堆里分配空间,依次开辟空间将Object类的属性,GrandPa类,Father类,Son类的属性放入</p><p>3.依次从Object开始,字符串放在方法区的常量池内</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(son.name);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         此时首次看子类son中是否有name属性,有的话,并且可以访问,就返回</span></span><br><span class="line"><span class="comment">         如果子类没有name属性,则看上一级父类有没有name属性,有的话,并且可以访问,就返回,没有依次往上找,直到找到为止</span></span><br><span class="line"><span class="comment">         假如找到了Object时,就会报错</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        System.out.println(son.hobby);</span><br><span class="line">        <span class="comment">// System.out.println(son.age); 访问不到被封装,只能在同类调用,可以间接调用方法返回</span></span><br><span class="line"></span><br><span class="line">        System.out.println(son.getAge());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          System.out.println(son.capital); 访问不到son类的,而且GrandPa的也被覆盖了,</span></span><br><span class="line"><span class="comment">         除非在本类创建public方法,再调用方法获取capital</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrandPa</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头爷爷&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">hobby</span> <span class="operator">=</span> <span class="string">&quot;旅游&quot;</span>;</span><br><span class="line">    <span class="type">int</span>  capital= <span class="number">300</span>;  <span class="comment">//资金</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">GrandPa</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头爸爸&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">39</span>;</span><br><span class="line">    <span class="type">char</span> sex= <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头儿子&quot;</span>;</span><br><span class="line">  <span class="keyword">private</span>   <span class="type">int</span>  capital= <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承</title>
      <link href="/posts/11d8b32d.html"/>
      <url>/posts/11d8b32d.html</url>
      
        <content type="html"><![CDATA[<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>作用:当多个类具有相同的属性和方法,为了防止代码冗余,引出了继承,使用extends来声明继承父类.</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class 子类 extends 父类 &#123;</span><br><span class="line">子类会自动拥有父类定义的属性和方法</span><br><span class="line">父类又叫超类,基类</span><br><span class="line">子类又叫派生类 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>子类继承了所有的属性和方法,但是(私有 private)属性和方法不能在子类直接访问,要通过父类公共的方法去访问</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类,是ExtendsDD 的父类</span></span><br><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DD</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//此时子类调用父类的(private私有)方法也不行,也只能通过间接方式调用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span>  <span class="title function_">Info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;名字&quot;</span>+ name + <span class="string">&quot;年龄&quot;</span> + age );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义公开的方法让子类间接调用private属性 score</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getScore</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义公开的方法让子类间接调用private方法 Info</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        Info();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子类  ExtendsDD</span></span><br><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsDD</span> <span class="keyword">extends</span> <span class="title class_">DD</span> &#123;</span><br><span class="line">    <span class="comment">//ExtendsDD 继承了DD的 属性 public name,public age,private score</span></span><br><span class="line">    <span class="comment">//ExtendsDD 继承了DD的 方法 public void setScore(double score),public void showInfo()</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">tall</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello,word&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类Test</span></span><br><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//ExtendsDD 继承了DD的 属性 public name,public age,private score</span></span><br><span class="line">        <span class="comment">//ExtendsDD 继承了DD的 方法 public void setScore(double score),public void showInfo()</span></span><br><span class="line">        <span class="type">ExtendsDD</span> <span class="variable">extendsDD</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExtendsDD</span>();</span><br><span class="line">        extendsDD.name=<span class="string">&quot;jack&quot;</span>;</span><br><span class="line">        extendsDD.age=<span class="number">20</span>;</span><br><span class="line">        <span class="comment">//extendsDD.score = 87.5; 调用不到因为属性score在父类中是私有private,子类想使用只能间接调用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;成绩&quot;</span>+extendsDD.getScore(<span class="number">87.5</span>)); ;</span><br><span class="line">        <span class="comment">//extendsDD.Info(); 此时子类调用父类的(private私有)调用不到,而且与父类的Info()方法重名,只能通过间接方式调用</span></span><br><span class="line">        extendsDD.showInfo();</span><br><span class="line">        extendsDD.tall();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>子类必须调用父类的构造器,完成父类的初始化</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//父类 DD</span><br><span class="line">package com;</span><br><span class="line">public class DD &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    public int age;</span><br><span class="line">    private double score;</span><br><span class="line"></span><br><span class="line">    //初始化父类的构造器</span><br><span class="line">    public     DD() &#123;</span><br><span class="line">        System.out.println(&quot;父类DD的初始化构造器被使用&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   //此时子类调用父类的(private私有)方法也不行,也只能通过间接方式调用</span><br><span class="line">    private void  Info() &#123;</span><br><span class="line">        System.out.println( &quot;名字&quot;+ name + &quot;年龄&quot; + age );</span><br><span class="line">    &#125;</span><br><span class="line">    //定义公开的方法让子类间接调用private属性 score</span><br><span class="line">    public double getScore(double score) &#123;</span><br><span class="line">        return score;</span><br><span class="line">    &#125;</span><br><span class="line">    //定义公开的方法让子类间接调用private方法 Info</span><br><span class="line">    public void showInfo() &#123;</span><br><span class="line">        Info();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//子类  ExtendsDD</span><br><span class="line">package com;</span><br><span class="line">public class ExtendsDD extends DD &#123;</span><br><span class="line">    //ExtendsDD 继承了DD的 属性 public name,public age,private score</span><br><span class="line">    //ExtendsDD 继承了DD的 方法 public void setScore(double score),public void showInfo()</span><br><span class="line"></span><br><span class="line">    //初始化子类的构造器</span><br><span class="line">    public ExtendsDD() &#123;</span><br><span class="line">        //这里隐藏了 super(); 这个语句会调用父类的默认无参构造器</span><br><span class="line">        System.out.println(&quot;子类ExtendsDD的初始化构造器被使用&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//测试类 Test</span><br><span class="line">package com;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //ExtendsDD 继承了DD的 属性 public name,public age,private score</span><br><span class="line">        //ExtendsDD 继承了DD的 方法 public void setScore(double score),public void showInfo()</span><br><span class="line">        ExtendsDD extendsDD = new ExtendsDD();</span><br><span class="line">        extendsDD.name=&quot;jack&quot;;</span><br><span class="line">        extendsDD.age=20;</span><br><span class="line">        //extendsDD.score = 87.5; 调用不到因为属性score在父类中是私有private,子类想使用只能间接调用</span><br><span class="line">        System.out.println(&quot;成绩&quot;+extendsDD.getScore(87.5)); ;</span><br><span class="line">        //extendsDD.Info(); 此时子类调用父类的(private私有)调用不到,而且与父类的Info()方法重名,只能通过间接方式调用</span><br><span class="line">        extendsDD.showInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">终端:</span><br><span class="line">父类DD的初始化构造器被使用</span><br><span class="line">子类ExtendsDD的初始化构造器被使用</span><br><span class="line">成绩87.5</span><br><span class="line">名字jack年龄20</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码0</span><br></pre></td></tr></table></figure><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>当创建子类对象时,不管使用子类的哪个构造器,不管父类定义了多少个构造器<strong>默认情况总会去调用父类的无参构造器</strong>,没有就报错,除非用<strong>super</strong>指定其他构造器.</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//父类</span><br><span class="line">package com;</span><br><span class="line">public class DD &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    public int age;</span><br><span class="line">    private double score;</span><br><span class="line"></span><br><span class="line">// public DD()&#123;&#125;</span><br><span class="line">    public     DD(int age) &#123;</span><br><span class="line">        System.out.println(&quot;父类构造器DD(int age)被调用  &quot;+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//子类</span><br><span class="line">package com;</span><br><span class="line">public class ExtendsDD extends DD &#123;</span><br><span class="line">    //ExtendsDD 继承了DD的 属性 public name,public age,private score</span><br><span class="line"></span><br><span class="line">    //初始化子类的构造器</span><br><span class="line">    public ExtendsDD() &#123;</span><br><span class="line">        //这里覆盖了 super(); 这个语句会调用父类的默认无参构造器</span><br><span class="line">        super(20);// 声明新的父类构造器,并调用</span><br><span class="line">        System.out.println(&quot;子类ExtendsDD的构造器ExtendsDD()被使用&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public ExtendsDD(String name) &#123;</span><br><span class="line">        //这里覆盖了super(); 这个语句会调用父类的默认无参构造器</span><br><span class="line">        super(21);// 声明新的父类构造器,并调用</span><br><span class="line">        System.out.println(&quot;子类ExtendsDD的构造器ExtendsDD(String name)被使用&quot;+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//测试类</span><br><span class="line">package com;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //ExtendsDD 继承了DD的 属性 public name,public age,private score</span><br><span class="line">        ExtendsDD extendsDD1 = new ExtendsDD();</span><br><span class="line">        System.out.println(&quot;------&quot;);</span><br><span class="line">        ExtendsDD extendsDD2 = new ExtendsDD(&quot;tom&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">终端:</span><br><span class="line"></span><br><span class="line">父类构造器DD(int age)被调用  20</span><br><span class="line">子类ExtendsDD的构造器ExtendsDD()被使用</span><br><span class="line">------</span><br><span class="line">父类构造器DD(int age)被调用  21</span><br><span class="line">子类ExtendsDD的构造器ExtendsDD(String name)被使用tom</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码0</span><br></pre></td></tr></table></figure><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><p>如果希望指定去调用父类的某个构造器,则显式的调用一下:super(参数列表)</p><h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><p><code>super</code>在使用时,必须在构造器第一行</p><h4 id="6"><a href="#6" class="headerlink" title="6"></a>6</h4><p><code>super()</code> 和<code>this()</code>都只能放在构造器第一行,因此这俩个方法不能共存在一个构造器,而且super()是子类的其中一个构造器调用父类其中一个构造器;this()是本类中俩个构造器用来互相调用的</p><h4 id="7"><a href="#7" class="headerlink" title="7"></a>7</h4><p>java所有类都是Object的子类,Object是所有类的长辈(爸爸,爷爷,老太爷,祖太爷,单细胞)</p><h4 id="8"><a href="#8" class="headerlink" title="8"></a>8</h4><p>父类构造器的调用不限于直接父类,将一直往上追溯到Object类(顶级父类)</p><blockquote><p>比如a&gt;b&gt;c&gt;d&gt;e&gt;object, 调用构造器a(){ }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a() &#123;</span><br><span class="line">    b() &#123;</span><br><span class="line">        c() &#123;</span><br><span class="line">            d() &#123;</span><br><span class="line">                e() &#123;</span><br><span class="line">                    Object() &#123;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="9"><a href="#9" class="headerlink" title="9"></a>9</h4><p>子类最多只能继承一个父类,java中是单继承机制</p><h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><p>不能滥用继承,子类和父;类之间必须满足is -a的逻辑</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造方法</title>
      <link href="/posts/26346fd7.html"/>
      <url>/posts/26346fd7.html</url>
      
        <content type="html"><![CDATA[<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>构造方法<strong>也称构造器</strong>,是类的特殊的方法,它的作用<strong>是完成新对象的初始化</strong></p><p>在创建对象时,系统会自动调用该类的构造器<strong>完成对象的初始化</strong></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] 方法名 (形参列表)&#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意   </span><br><span class="line">1.构造方法 的修饰符可以默认</span><br><span class="line">2.构造方法没有返回值</span><br><span class="line">3.方法名和类名字必须一样</span><br><span class="line">4.参数列表和成员方法一样的规则</span><br><span class="line">5.构造方法的调用是由系统完成</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public  class text&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Person p1 =new Person(&quot;XiaoHui&quot;,15);//当创建一个对象,调用构造器对 新对象进行初始化</span><br><span class="line">System.out.println(&quot;p1对象名字是&quot;+p1.name);</span><br><span class="line">System.out.println(&quot;p1对象年龄是&quot;+p1.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  Person &#123;</span><br><span class="line"> String name;</span><br><span class="line"> int age;</span><br><span class="line"> </span><br><span class="line"> //创建一个构造器</span><br><span class="line"> //注意 构造器没有返回值,名字必须和类名一样</span><br><span class="line"> public Person(String Name, int Age) &#123;</span><br><span class="line"> name = Name;</span><br><span class="line"> age = Age;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public  class text&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Person p1 =new Person(&quot;XiaoHui&quot;,15);</span><br><span class="line">Person p2 =new Person(&quot;Tom&quot;);</span><br><span class="line">System.out.println(&quot;p1对象名字是&quot;+p1.name+&quot;  &quot;+&quot;p1对象年龄是&quot;+p1.age);</span><br><span class="line">System.out.println(&quot;p2对象名字是&quot;+p2.name+&quot;  &quot;+&quot;p2对象年龄是&quot;+p2.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  Person &#123;</span><br><span class="line"> String name;</span><br><span class="line"> int age;</span><br><span class="line"> </span><br><span class="line"> //创建两个构造器,第一个只给对象初始名字,第二个初始名字和年龄</span><br><span class="line"></span><br><span class="line">  public Person(String Name) &#123;</span><br><span class="line"> name = Name;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">  public Person(String Name, int Age) &#123;</span><br><span class="line"> name = Name;</span><br><span class="line"> age = Age;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p>1.一个类中可以定义多个不同的构造器,即构造器重载,进行<strong>不同的初始化</strong></p><p>2.构造器名和类名<strong>相同</strong>,构造器<strong>没有返回值</strong></p><p>3.构造器是<strong>完成对象的初始化</strong>,并不是创建对象</p><p>4.在创建对象时,如果类中有构造器,<strong>系统自动调用构造器</strong>,没有就默认指向堆空间的对象地址 </p><p>5.若有两个以上的构造器也被称为<strong>构造器中的重载</strong></p><p>6.<strong>构造器是不能被调用的</strong>,只能被系统 创建对象时调用</p><p>7.若类中<strong>没有定义构造器</strong>,系统会自动给类生成一个默认无参构造器,比如<code>person() &#123;&#125;</code>,可以使用<code>javap 指令</code>使字节码反编译成类容易阅读,javap -p  computer.class,可以知道类的成员变量和方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">computer com = new computer();//这个使用的是默认的无参构造器,若在类中申明构造器,则括号里面必须得遵循新的构造器的参数规则</span><br><span class="line">int  x = com.jc(3);</span><br><span class="line"> System.out.println(&quot;x=&quot;+x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  computer&#123;</span><br><span class="line"></span><br><span class="line">public   int     jc(int n) &#123;</span><br><span class="line">if( n  == 1) &#123;</span><br><span class="line"> return 1;</span><br><span class="line">&#125;</span><br><span class="line">else  &#123;</span><br><span class="line">  returnjc(n - 1)  * n;    </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">终端显示如下</span><br><span class="line">C:\Users\hhh\Desktop\java文档&gt;java text.java</span><br><span class="line"></span><br><span class="line">C:\Users\hhh\Desktop\java文档&gt;javap text.class</span><br><span class="line">public class text &#123;</span><br><span class="line">  public text();//这个就是无参构造器</span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C:\Users\hhh\Desktop\java文档&gt;javap computer</span><br><span class="line">Compiled from &quot;text.java&quot;//表示该类是来自text.java文件</span><br><span class="line">class computer &#123;</span><br><span class="line">  computer(); //这个就是无参构造器</span><br><span class="line">  public int jc(int);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.若在类中定义了对象初始化构造器,则<strong>覆盖</strong>默认的构造器,则<strong>不能使用</strong>默认的无参构造器,除非<strong>显式的定义一下</strong>,即在类中<strong>重新</strong>写一个新的无参构造器  比如写<code>computer() &#123;&#125;</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Person p1 = new Person();//调用无参构造器,并初始化对象p1</span><br><span class="line">System.out.println(&quot;p1对象的年龄&quot;+p1.age);</span><br><span class="line"></span><br><span class="line">Person p2 = new Person(&quot;jack&quot;,20);//调用有参构造器,并初始化对象p2</span><br><span class="line">System.out.println(&quot;p2对象的名字&quot;+p2.name+&quot;p2对象的年龄&quot;+p2.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class   Person &#123;</span><br><span class="line">int age;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line">public Person() &#123; //创建一个无参的构造器,这样就不怕系统的无参构造器被覆盖了</span><br><span class="line">age =18;</span><br><span class="line">&#125;</span><br><span class="line">   public Person(String Name, int Age)&#123;//创建一个有参的构造器</span><br><span class="line">name=Name;</span><br><span class="line">age=Age;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装</title>
      <link href="/posts/d60eb45.html"/>
      <url>/posts/d60eb45.html</url>
      
        <content type="html"><![CDATA[<h3 id="封装-面向对象编程"><a href="#封装-面向对象编程" class="headerlink" title="封装(面向对象编程)"></a>封装(面向对象编程)</h3><p>封装就是把<strong>属性和方法</strong>封装在一起,数据(属性) 被保护在内部,程序其他部分只能通过<strong>被授权的 操作(方法)</strong> , 才能对数据进行操作</p><p><h3 id="封装的作用"><a href="#封装的作用" class="headerlink" title="封装的作用"></a>封装的作用</h3><p>1.隐藏实现细节</p><p>2.可以对数据进行验证,保证安全合理</p><p><h3 id="封装的步骤"><a href="#封装的步骤" class="headerlink" title="封装的步骤"></a>封装的步骤</h3><ol><li><p>将属性进行<strong>私有化private</strong>[ 不能通过外部修改属性]</p></li><li><p>提供一个(公共的 public)的set方法,对属性判断并赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void setXxx(数据类型  参数列表) &#123; //Xxx表示属性</span><br><span class="line">//加入数据验证的业务逻辑</span><br><span class="line">属性 = 参数;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供一个公共的get方法,用于获取属性的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public 返回类型 getXxx () &#123;  //权限判断</span><br><span class="line">    return  返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="举例"><a href="#举例" class="headerlink" title="　举例"></a>　举例</h3><p>构造器和setXXX()方法结合更佳,防止利用构造器逃离规则,恶意写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public Person(String name, int age, int salary) &#123;</span><br><span class="line">      this.setName(name);</span><br><span class="line">     this.setAge(age);</span><br><span class="line">     this.setSalary(salary);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Encap01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Person person = new Person();</span><br><span class="line">        person.setName(&quot;jack&quot;);</span><br><span class="line">        person.setAge(300);</span><br><span class="line">        person.setSalary(30000);</span><br><span class="line">        System.out.println(person.info());</span><br><span class="line">        System.out.println(&quot;工资&quot;+person.getSalary());</span><br><span class="line">        Person person1 = new Person(&quot;ss&quot;,20000,50000);</span><br><span class="line">        System.out.println(&quot;ss的个人信息&quot;+person1.info());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    //将age,salary,job进行私有封装,只能同类调用这些属性</span><br><span class="line">    private int age;</span><br><span class="line">    private int salary;</span><br><span class="line">    private String job;</span><br><span class="line"></span><br><span class="line">    //定义构造器</span><br><span class="line">    public Person() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age, int salary) &#123;</span><br><span class="line">        //this.name = name;</span><br><span class="line">        //this.age = age;</span><br><span class="line">        //this.salary = salary;</span><br><span class="line"></span><br><span class="line">        setName(name);//相当于this.setName(name);</span><br><span class="line">        setAge(age);//相当于this.setAge(age);</span><br><span class="line">        setSalary(salary);//相当于this.setSalary(salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设置set.get方法</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        //加入对数据的校验</span><br><span class="line">        if(name.length() &gt;=2 &amp;&amp; name.length()&lt;=6) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            System.out.println(&quot;名字错误,名字长度在[2-6]&quot;);</span><br><span class="line">            this.name=&quot;xxxx&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        if (age &gt; 1 &amp;&amp; age &lt; 120) &#123;</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;你的年龄有误,只能在1-120之间&quot;);</span><br><span class="line">            this.age = 18;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public int getSalary() &#123;</span><br><span class="line">       String gh = &quot;123&quot;;</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;请输入你的工号: &quot;);</span><br><span class="line">        String m = scanner.next();</span><br><span class="line">        if(m.equals(gh) ) &#123;</span><br><span class="line">            return salary;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            System.out.println(&quot;你的工号输入有误,工资不给看&quot;);</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSalary(int salary) &#123;</span><br><span class="line">        this.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String getJob() &#123;</span><br><span class="line">        return job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setJob(String job) &#123;</span><br><span class="line">        this.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String info() &#123;</span><br><span class="line">        return &quot;信息:name=&quot; + name + &quot; age=&quot; + age + &quot; 薪水&quot; + salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问修饰符</title>
      <link href="/posts/f941d9b7.html"/>
      <url>/posts/f941d9b7.html</url>
      
        <content type="html"><![CDATA[<h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><ol><li>public(对外公开)</li><li>protected(受保护的),对子类和同一个包公开</li><li>默认级别,没有修饰符,向同一个包的类公开</li><li>private(私有级别),只有类本身可以访问,不对外公开</li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>修饰符作用于 <strong>类中的属性,成员方法,类</strong></li><li>只有默认和公开public才能修饰类</li><li>成员方法的访问规则和属性完全一样</li></ol><p><img src="C:\Users\hhh\Desktop\111.png" alt="111"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.hspedu.nn;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        A a = new A();</span><br><span class="line">        a.m1();  //100,200,300,400</span><br><span class="line">        //同类中方法访问属性和方法,所有修饰符皆可</span><br><span class="line">        </span><br><span class="line">        int m1 = a.n1; </span><br><span class="line">        int m2 = a.n2; </span><br><span class="line">        int m3 = a.n3; </span><br><span class="line">         int m4 = a.n4; //访问不到</span><br><span class="line">         //在同一个包下,除了(私有prviate)不能访问属性和方法,其他皆可</span><br><span class="line">        System.out.println(m1+m2+m3); 100,200,300</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package com.hspedu.mm;  //不同包类访问属性和方法</span><br><span class="line">import package com.hspedu.nn;//引入包</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        A a = new A();</span><br><span class="line">        a.n1;</span><br><span class="line">        a.m1();//不同包只能访问public的属性和方法</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">package com.hspedu.nn;</span><br><span class="line"></span><br><span class="line">public class A &#123;</span><br><span class="line">    public int n1 = 100;</span><br><span class="line">    protected int n2 = 200;</span><br><span class="line">    int n3 = 300;</span><br><span class="line">    private int n4 = 400;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void m1() &#123;</span><br><span class="line">        System.out.println(n1+n2+n3+n4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法重载</title>
      <link href="/posts/5d6d5dcf.html"/>
      <url>/posts/5d6d5dcf.html</url>
      
        <content type="html"><![CDATA[<h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>重载的好处:  减轻了起名的麻烦,减轻了记名的麻烦</p><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><blockquote><p>java中允许同一个类中,多个同名方法的存在,但要求形参列表不一致</p></blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>方法名必须相同</li><li>形参列表必须不同(形参类型/个数/顺序,至少有一种不同,<strong>参数名无要求</strong>)</li><li>返回类型 无要求</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public  class text&#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     T t = new T();</span><br><span class="line"></span><br><span class="line"> System.out.println( t.calc(12, 2.3) );</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> class T&#123;</span><br><span class="line"> </span><br><span class="line"> public  int calc(int  n1, int  n2)&#123;    </span><br><span class="line">         return n1 + n2;  </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">public  double calc(double n1, int  n2)&#123;    </span><br><span class="line">         return n1 + n2;  </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> public double calc(int  n1, double n2)&#123;    </span><br><span class="line">         return n1 + n2;  </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> public int  calc(int  n1, int  n2,int n3)&#123;    </span><br><span class="line">         return n1 + n2 + n3;  </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法重写(覆盖)</title>
      <link href="/posts/40ad4f2e.html"/>
      <url>/posts/40ad4f2e.html</url>
      
        <content type="html"><![CDATA[<h3 id="方法重写-覆盖"><a href="#方法重写-覆盖" class="headerlink" title="方法重写(覆盖)"></a>方法重写(覆盖)</h3><p>方法覆盖:  子类中有一个方法和父类/爷类的某个方法(<strong>名字,返回类型,参数</strong>)一样,则我们说子类这方法<strong>覆盖</strong>了父类的方法</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>方法重写的父类和子类的方法返回类型一样,也可以是<code>父类 public Object getInfo()&#123;&#125;</code> , <code>子类public String getInfo()&#123;&#125;</code> ,子类的返回类型要吗和父类的一致,要吗,比他小</li><li>子类方法<strong>只能大于等于</strong>父类方法的<strong>访问权限</strong>[public &gt; protected &gt; 默认 &gt;private ]</li></ol><h3 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h3><p>重载方法:访问符,返回类型没要求,方法名必须一样,参数(顺序,个数,类型)不一样</p><p>重写方法: 访问符子类必须大于等于父类,返回类型必须小于等于父类,方法名一样,参数一样</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法递归调用</title>
      <link href="/posts/7f42df8e.html"/>
      <url>/posts/7f42df8e.html</url>
      
        <content type="html"><![CDATA[<h3 id="方法递归调用"><a href="#方法递归调用" class="headerlink" title="方法递归调用"></a>方法递归调用</h3><p>意思是：递归就是方法自己调自己，每次调用时传入不同的变量，递归有助于编程者解决复杂问题，也可以让代码更加简洁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">递归调用原理</span><br><span class="line">public class text &#123;</span><br><span class="line">public  static  void main(String[] args) &#123;</span><br><span class="line">  </span><br><span class="line">       T.t1 = new T();</span><br><span class="line">   t1.test(4);</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"> class  T&#123;</span><br><span class="line"> </span><br><span class="line">public void test(int n) &#123;</span><br><span class="line">if (n &gt; 2) &#123;</span><br><span class="line">test(n - 1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;n=&quot; +n);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="递归重要规则"><a href="#递归重要规则" class="headerlink" title="递归重要规则"></a>递归重要规则</h3><ol><li>执行一个方法时，就创建一个新的受保护的独立空间</li><li>方法的局部变量是独立的，不会互相影响，各个新栈产生的方法变量也不互相影响</li><li>如果方法中使用的是引用类型变量（比如数组，对象），就会共享该引用的类型的数据</li><li>当一个方法执行完毕后，或者遇到return，就会返回。谁调用，就将结果返回给谁，同时当方法执行完毕后或者返回时，该方法也就执行完毕</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  //阶层</span><br><span class="line"> public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">computer com = new computer();</span><br><span class="line">int  x = com.jc(3);</span><br><span class="line"> System.out.println(&quot;x=&quot;+x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  computer&#123;</span><br><span class="line"></span><br><span class="line">public   int     jc(int n) &#123;</span><br><span class="line">if( n  == 1) &#123;</span><br><span class="line"> return 1;</span><br><span class="line">&#125;</span><br><span class="line">else  &#123;</span><br><span class="line">  returnjc(n - 1)  * n;    </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//求任意第n个数是多少       斐波那契数【1,1,2,3,5,8,13,21...】</span><br><span class="line">public  class text&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">T  t = new   T();</span><br><span class="line">int  x = t.fibonacci(7);</span><br><span class="line"> System.out.println(&quot;x=&quot;+x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  T&#123;</span><br><span class="line"></span><br><span class="line">public   int     fibonacci(int n) &#123;</span><br><span class="line"></span><br><span class="line">if(n  &gt;=1)&#123;</span><br><span class="line">if( n ==1 || n==2) &#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line"></span><br><span class="line">return  fibonacci(n-1) + fibonacci(n-2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">System.out.println(&quot;请输入一个n&gt;=1的数&quot;);</span><br><span class="line">return  -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//汉诺塔游戏                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   </span><br><span class="line"> public  class text&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        </span><br><span class="line">        T t =new T();</span><br><span class="line">        t.move( 2, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">//核心思想: 想象成两个盘,a&gt;b,a&gt;c,b&gt;c</span><br><span class="line">class  T&#123;</span><br><span class="line">    //num代表要盘数，a,b,c分别表示A塔，B塔，C塔</span><br><span class="line">        public void  move( int num, char a, char  b, char c) &#123;</span><br><span class="line">          //如果只有一个盘</span><br><span class="line">          if(num == 1) &#123;</span><br><span class="line">               System.out.println(a + &quot;-&gt;&quot; +c);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">             //如果有多个盘，可以看成两个，最下面的一个盘和上面的所有盘。</span><br><span class="line">             //1.先移动上面所有的盘到b,借助c</span><br><span class="line">             move(num - 1,a , c , b);</span><br><span class="line">              //2.把最下面的那个盘，移动到c</span><br><span class="line">               System.out.println(a + &quot;-&gt;&quot; +c);</span><br><span class="line">                //3.再把 b塔的所有盘，移动到c，借助a</span><br><span class="line">                move(num - 1, b, a, c);</span><br><span class="line">              </span><br><span class="line">          &#125;</span><br><span class="line">                </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维数组的使用</title>
      <link href="/posts/c3e41ead.html"/>
      <url>/posts/c3e41ead.html</url>
      
        <content type="html"><![CDATA[<h2 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a>二维数组的使用</h2><p>二维数组 arr[ 2 ] [ 3 ]的元素是一维数组，如果访问第2个数组的第2个元素是arr[2][2]</p><p><img src="https://img-blog.csdnimg.cn/b806b2e9d3324eda8acfa479b0118fab.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBALuW8l-WFsOWFiw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><h4 id="二位数组语法"><a href="#二位数组语法" class="headerlink" title="二位数组语法"></a>二位数组语法</h4><p>语法：类型[ ] [ ]数组名 = new 类型[ 大小] [大小 ]</p><p>语法： 类型  数组名 [ ] [ ] ;  数组名 = new 类型[大小 ] [大小 ] </p><p>语法：类型  数组名 [ ] [ ] = {   {1,2,3} , {4,5,6,7,8} , {2,3,1}   }  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">打印</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">00000</span></span><br><span class="line"><span class="comment">00100</span></span><br><span class="line"><span class="comment">01240</span></span><br><span class="line"><span class="comment">14656</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">int</span> [][]arr = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length; i++) &#123; <span class="comment">//arr.length指的是二维数组元素的个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span> ; k &lt; arr[i].length ; k++) &#123;<span class="comment">//arr[i].length指的是二维数组元素的个数</span></span><br><span class="line">System.out.print(arr[i][k]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><p><p><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">打印m数组  <span class="number">1</span></span><br><span class="line"> <span class="number">2</span>  <span class="number">2</span></span><br><span class="line"> <span class="number">3</span>  <span class="number">3</span>  <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m[][] = &#123;   &#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;  &#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;m.length; i++ ) &#123;  <span class="comment">//遍历二维数组中的3个数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt;m[i].length ; k++) &#123;</span><br><span class="line"></span><br><span class="line">System.out.print(m[i][k]+<span class="string">&quot;\t&quot;</span>);<span class="comment">//遍历每个数组的每个元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><p><p><p><br>二维数组打印乘法口诀表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m[][] =  <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">9</span>][] ; <span class="comment">//列数不确定，可以不写</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;m.length; i++ ) &#123;  <span class="comment">//遍历二维数组中的3个数组</span></span><br><span class="line">     </span><br><span class="line"> m[i] = <span class="keyword">new</span> <span class="title class_">int</span> [ i+<span class="number">1</span>]; <span class="comment">//循环开启二维数组中的每个一维数组,而且 i+1 影响着下面 m[i].length的长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt;m[i].length ; k++) &#123;</span><br><span class="line"></span><br><span class="line">m[i][k]= i + <span class="number">1</span>;</span><br><span class="line">System.out.print(m[i][k]+<span class="string">&quot;*&quot;</span>+(k+<span class="number">1</span>)+<span class="string">&quot;=&quot;</span>+m[i][k]*(k+<span class="number">1</span>)+<span class="string">&quot;\t&quot;</span>);<span class="comment">//遍历每个数组的每个元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><p><p><p><br>打印十行杨辉三角</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> m[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][];<span class="comment">//定义一个十行的二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m.length;i++ ) &#123;</span><br><span class="line"></span><br><span class="line"> m[i]= <span class="keyword">new</span> <span class="title class_">int</span> [i +<span class="number">1</span>]; <span class="comment">// 开辟m[0],m[1]........m[9]不同的空间</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span><span class="number">0</span>; k &lt; m[i].length; k++) &#123; <span class="comment">//遍历二元数组中每一个一元数组内包含的全部元素</span></span><br><span class="line"><span class="keyword">if</span>( (k == <span class="number">0</span>) || (k == m[i].length -<span class="number">1</span> )) &#123;</span><br><span class="line">m[i][k]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m[i][k]= m[i-<span class="number">1</span>][k-<span class="number">1</span>]+m[i-<span class="number">1</span>][k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span>  <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m.length;i++ ) &#123;</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span><span class="number">0</span>; k &lt; m[i].length; k++) &#123; </span><br><span class="line">System.out.print(m[i][k]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><p><p><p></p><p>一个数组{10，12，45，90}是升序，要求插入一个数后，还是升序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span> &#123;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  arr[]  = &#123;<span class="number">10</span>,<span class="number">12</span>,<span class="number">45</span>,<span class="number">90</span>&#125;;</span><br><span class="line"><span class="type">int</span>  <span class="variable">insertNum</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">// index就是要插入的位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//**定位**</span></span><br><span class="line"><span class="comment">//设一个变量index用于接收下标i，依次遍历 插入的数inserNum 和 原数组的元素arr[i] 进行比较，</span></span><br><span class="line"><span class="comment">//若 插入数insertNum小，则用index获取当前元素下标i；   否则将接收下标的index赋予最大下标arr[arr.length]</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>( insertNum &lt;= arr[i]) &#123;</span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index == -<span class="number">1</span>) &#123;</span><br><span class="line">index = arr.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;定位index的位置是 &quot;</span>+index);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//**扩容**</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个新的数组，并将原先的数组依次赋值给新数组</span></span><br><span class="line"><span class="type">int</span>   arr_new[] = <span class="keyword">new</span> <span class="title class_">int</span> [arr.length+<span class="number">1</span>]; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j=<span class="number">0</span>; i &lt; arr_new.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>( i != index ) &#123;</span><br><span class="line">arr_new[i] = arr[j];</span><br><span class="line">j++;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">arr_new[i] = insertNum;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让arr指向arr_new,回收原来arr的空间</span></span><br><span class="line">              arr  =  arr_new;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历输出</span></span><br><span class="line">System.out.println(<span class="string">&quot;-----添加过后的排序-----&quot;</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.print(arr[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><p><p><p><br>彩票实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个函数，用于换行</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title function_">nt</span> <span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用于随机每个红蓝球</span></span><br><span class="line"><span class="type">int</span> redArr[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="type">int</span> blueArr[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于接收用户每个红蓝球</span></span><br><span class="line"><span class="type">int</span> insertRed[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="type">int</span> insertBlue[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//随机红蓝号码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;redArr.length; i++) &#123;</span><br><span class="line">redArr[i] = rand.nextInt(<span class="number">33</span> - <span class="number">1</span> + <span class="number">1</span>) + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blueArr[<span class="number">0</span>] = rand.nextInt(<span class="number">16</span> - <span class="number">1</span> + <span class="number">1</span>) + <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//匹配红蓝中奖号码</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//用于定义红球中的次数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//用于定义蓝球中的次数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;redArr.length; i++) &#123;</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">&quot;请输入第&quot;</span>+num+<span class="string">&quot;红色球号码[1-33]&quot;</span>);</span><br><span class="line">insertRed[i] =  scanner.nextInt();</span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span> ; j&lt;redArr.length; j++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(insertRed[i] == redArr[j] ) &#123;</span><br><span class="line">index1++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入1个蓝色球号码[1-16]&quot;</span>);</span><br><span class="line">insertBlue[<span class="number">0</span>] =  scanner.nextInt();</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">if</span>(insertBlue[<span class="number">0</span>] == blueArr[<span class="number">0</span>] ) &#123;</span><br><span class="line">index2++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nt ();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( index1== <span class="number">6</span> &amp;&amp; index2 == <span class="number">1</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;天哪，欧皇降临，获得一等奖1000万元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( index1== <span class="number">6</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;运气爆棚，获得二等奖500万元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( index1== <span class="number">5</span> &amp;&amp; index2 == <span class="number">1</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;不错呦，获得三等奖3000元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( index1== <span class="number">5</span> ||  (index1==<span class="number">4</span>  &amp;&amp; index2 == <span class="number">1</span>) ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;嘿嘿，获得四等奖200元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( index1== <span class="number">4</span> ||  (index1==<span class="number">3</span>  &amp;&amp; index2 == <span class="number">1</span>) ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;哦吼，获得五等奖10元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>( index2 == <span class="number">1</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;不赖不赖，获得六等奖5元&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>   &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;谢谢惠顾，感谢你为民生做出贡献&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  nt();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;是否查看本次福利彩票中奖号码(y/n)&quot;</span>);</span><br><span class="line"><span class="type">char</span>  <span class="variable">x</span> <span class="operator">=</span> scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>( x == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公布最终获奖号码。</span></span><br><span class="line">System.out.println(<span class="string">&quot;****本次彩票中奖号码为****&quot;</span>);</span><br><span class="line">nt();</span><br><span class="line">System.out.println(<span class="string">&quot;红球分别是&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;redArr.length; i++) &#123;</span><br><span class="line">System.out.print(redArr[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nt();</span><br><span class="line">System.out.println(<span class="string">&quot;蓝球分别是&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;blueArr.length; i++) &#123;</span><br><span class="line">System.out.print(blueArr[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nt();</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二维数组的注意事项"><a href="#二维数组的注意事项" class="headerlink" title="二维数组的注意事项"></a>二维数组的注意事项</h3><p>定义方式 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一维： int arr       [ ] = new int [x ];</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">二维： int  arr [ ][ ] = new int [ x][ y];</span><br></pre></td></tr></table></figure><blockquote><p>二位数组是由多个一位数组组成的，它的各个一位数组的长度可以相同，也可以不相同<br>arr [ ][ ] = { {1,23},{43,65,76},{22,56..87.33,24} } </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态数组</title>
      <link href="/posts/8d78178a.html"/>
      <url>/posts/8d78178a.html</url>
      
        <content type="html"><![CDATA[<h3 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h3><p>数组的定义类型为父类类型,里面保存的实际元素类型为子类类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.polyarr;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">   private String name;</span><br><span class="line">   private  int age;</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    public String say() &#123;</span><br><span class="line">        return  name + &quot;\t&quot; +age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.polyarr;</span><br><span class="line"></span><br><span class="line">public class Student extends  Person&#123;</span><br><span class="line">    private double score;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age, double score) &#123;</span><br><span class="line">        super(name, age);</span><br><span class="line">        this.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    public String say() &#123;</span><br><span class="line"></span><br><span class="line">        return  super.say()+&quot;score=&quot; + score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.polyarr;</span><br><span class="line"></span><br><span class="line">public class Teacher extends  Person&#123;</span><br><span class="line">    private  double salary;</span><br><span class="line"></span><br><span class="line">    public Teacher(String name, int age, double salary) &#123;</span><br><span class="line">        super(name, age);</span><br><span class="line">        this.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getSalary() &#123;</span><br><span class="line">        return salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSalary(double salary) &#123;</span><br><span class="line">        this.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    //重写父类的方法</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String say() &#123;</span><br><span class="line">        return super.say() +&quot;salary=&quot;+salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.hspedu.polyarr;</span><br><span class="line"></span><br><span class="line">public class ployArray &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Person [] persons = new Person[5];</span><br><span class="line">        persons[0] = new Person(&quot;jack&quot;,20);</span><br><span class="line">        persons[1]= new Student(&quot;tom&quot;,21,66);</span><br><span class="line">        persons[2] = new Student(&quot;heihuj&quot;,26,98);</span><br><span class="line">        persons[3]= new Teacher(&quot;semi&quot;,18,8734);</span><br><span class="line">        persons[4] = new Teacher(&quot;ligui&quot;,12,5849);</span><br><span class="line"></span><br><span class="line">        //遍历数组</span><br><span class="line">        for (int i = 0; i &lt; persons.length ; i++) &#123;</span><br><span class="line">            System.out.println( persons[i].say());</span><br><span class="line">            //编译类型是persons ,运行类型看后面</span><br><span class="line">            //动态绑定</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模版</title>
      <link href="/posts/61d01d3e.html"/>
      <url>/posts/61d01d3e.html</url>
      
        <content type="html"><![CDATA[<h2 id="这是一个标题"><a href="#这是一个标题" class="headerlink" title="这是一个标题"></a>这是一个标题</h2><p>内容<br>内容<br>内容</p><h3 id="这是一个二级标题"><a href="#这是一个二级标题" class="headerlink" title="这是一个二级标题"></a>这是一个二级标题</h3><p>内容<br><img src="/image/picture.jpg" alt="这是图片的alt属性"><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 分类1 ,分类是指文章的类别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 ,标签代表文章的关键字 </tag>
            
            <tag> 标签2 </tag>
            
            <tag> 标签3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"奈落のBlog","short_name":"奈落","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span {  color: #f2b94b;}.bangumi-info-item em {  color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource > svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts > .recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}/*一图流.若不需要,则删除169-176*//* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {  cursor: url("/img/x1.cur"), auto;}a,[type="button"]:not(:disabled),[type="reset"]:not(:disabled),[type="submit"]:not(:disabled),button:not(:disabled) {  cursor: url("/img/x2.cur"), auto !important;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.min.js"/>
      <url>/js/runtime/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var t=new Date("11/01/2022 00:00:00");now.setTime(now.getTime()+1);var e=(now-t)/1e3/60/60/24,a=Math.floor(e),n=(now-t)/1e3/60/60-24*a,r=Math.floor(n);1==String(r).length&&(r="0"+r);var s=(now-t)/1e3/60-1440*a-60*r,i=Math.floor(s);1==String(i).length&&(i="0"+i);var o=(now-t)/1e3-86400*a-3600*r-60*i,l=Math.round(o);1==String(l).length&&(l="0"+l);let g="";g=r<18&&r>=9?`<img class='boardsign' src='/js/runtime/快速高效.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`:`<img class='boardsign' src='/js/runtime/链接.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=g)}setInterval((()=>{createtime()}),250);]]></content>
      
    </entry>
    
    
  
</search>
